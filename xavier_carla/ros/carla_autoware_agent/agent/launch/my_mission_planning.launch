<launch>

  <!--
    # vel_pose_connect #
    the vehicle status is read and a can_velocity (geometry_msgs::TwistStamped) is calculated (by can_status_translator)
    In:  /vehicle_status
    In:  /can_info
    Out: /linear_velocity_viz (visualization of velocity)
    Out: /can_velocity
  -->
  <include file='$(find autoware_connector)/launch/vel_pose_connect.launch'>
    <arg name='topic_pose_stamped' value='/ndt_pose' />
    <arg name='topic_twist_stamped' value='/estimate_twist' />
  </include>

  <!-- 
    # decision_maker #
  -->
  <include file='$(find decision_maker)/launch/decision_maker.launch'>
    <arg name='auto_engage' value='true' />
    <arg name='disuse_vector_map' value='false'/>
  </include>

  <!--
    # op_global_planner #
    In:  /initialpose [geometry_msgs::PoseWithCovarianceStamped]
    In:  /move_base_simple/goal [geometry_msgs::PoseStamped]
    In:  /current_pose [geometry_msgs::PoseStamped]
    In:  /current_velocity [geometry_msgs::TwistStamped]
    In:  /vector_map_info/* [vector_map_msgs::*]
    Out: /lane_waypoints_array [autoware_msgs::LaneArray]
    Out: /global_waypoints_rviz [visualization_msgs::MarkerArray]
    Out: /op_destinations_rviz [visualization_msgs::MarkerArray]
    Out: /vector_map_center_lines_rviz [visualization_msgs::MarkerArray]
  -->
<!--
  <group>
-->
    <remap from='/lane_waypoints_array' to='/based/lane_waypoints_raw'/>
    <include file='$(find op_global_planner)/launch/op_global_planner.launch'>
      <arg name='pathDensity' value='0.75' /> 
      <arg name='enableSmoothing' value='false' /> 
      <arg name='enableLaneChange' value='true' />
      <arg name='enableRvizInput' value='true' />
      <arg name='enableReplan' value='true' />
      <arg name='velocitySource' value='1' />
      <arg name='mapSource' value='0'/>
    </include>
<!--
  </group>
-->

  <!-- 
    # waypoint replanner #
    to reduce velocity on curves
    Out:  /based/lane_waypoints_array [autoware_msgs::LaneArray]
    In:   /based/lane_waypoints_raw [autoware_msgs::LaneArray]
  -->
<!--
  <node pkg='rostopic' type='rostopic' name='config_waypoint_replanner_topic'
        args='pub -l /config/waypoint_replanner autoware_config_msgs/ConfigWaypointReplanner
        "{ replanning_mode: true, use_decision_maker: true, velocity_max: 40.0,
           velocity_min: 0.0, accel_limit: 3.00, decel_limit: 3.00, radius_min: 0.0,
           resample_mode: true, resample_interval: 1.0, 
           replan_curve_mode: true, replan_endpoint_mode: false, 
           realtime_tuning_mode: true}"' />
-->

<!--
  <include file="$(find waypoint_maker)/launch/waypoint_loader.launch"/>
-->
  <node pkg='waypoint_maker' type='waypoint_replanner' name='waypoint_replanner' output="log">
    <param name="replanning_mode" value="true" />
    <param name="realtime_tuning_mode" value="true" />
    <param name="resample_mode" value="true" />
    <param name="resample_interval" value="1.0" />
    <param name="replan_curve_mode" value="true" />
    <param name="replan_endpoint_mode" value="false" />
    <param name="velocity_max" value="20.0" />
    <param name="radius_min" value="0.0" />
    <param name="velocity_min" value="0.0" />
    <param name="accel_limit" value="3.0" />
    <param name="decel_limit" value="20.0" />
    <param name="lateral_accel_limit" value="0.0" />
    <param name='use_decision_maker' value='true'/>
  </node>


  <!--
    # lane_rule #
    In:  /lane_waypoints_array [autoware_msgs::LaneArray]
    In:  /vector_map_info/* [vector_map_msgs::*]
    Out: /traffic_waypoints_array [autoware_msgs::LaneArray]
    Out: /green_waypoints_array [autoware_msgs::LaneArray]
    Out: /red_waypoints_array [autoware_msgs::LaneArray]
  -->
  <arg name="acceleration"               default="1.0"/>
  <arg name="stopline_search_radius"     default="1.0"/>
  <arg name="number_of_zeros_ahead"      default="0"/>
  <arg name="number_of_zeros_behind"     default="0"/>
  <arg name="number_of_smoothing_count"  default="0"/>
  <node pkg='rostopic' type='rostopic' name='config_lane_rule' output='log'
        args='pub -l /config/lane_rule autoware_config_msgs/ConfigLaneRule "{ 
            header: { 
              seq: 0, 
              stamp: {secs: 0, nsecs: 0}, 
              frame_id: }, 
            acceleration: $(arg acceleration), 
            stopline_search_radius: $(arg stopline_search_radius), 
            number_of_zeros_ahead: $(arg number_of_zeros_ahead), 
            number_of_zeros_behind: $(arg number_of_zeros_behind), 
            number_of_smoothing_count: $(arg number_of_smoothing_count) }"'/>
  <node pkg='lane_planner' type='lane_rule' name='lane_rule_lanelet2' output="log"/>

  <!--
    # lane_stop #
    In:  /green_waypoints_array [autoware_msgs::LaneArray]
    In:  /red_waypoints_array [autoware_msgs::LaneArray]
    Out: /traffic_waypoints_array [autoware_msgs::LaneArray]
  -->
  <node pkg='lane_planner' type='lane_stop' name='lane_stop' />

  <!--
    # lane_select #
    In:  /current_pose [geometry_msgs::PoseStamped]
    In:  /current_velocity [geometry_msgs::TwistStamped]
    In:  /traffic_waypoints_array [autoware_msgs::LaneArray]
    Out: /base_waypoints [autoware_msgs::Lane]
    Out: /change_flag [std_msgs::Int32]
    Out: /closest_waypoint [std_msgs::Int32]
    Out: /current_lane_id [std_msgs::Int32]
    Out: /lane_select_marker [visualization_msgs::MarkerArray]
    Out: /vehicle_location [autoware_msgs::VehicleLocation]
  -->
  <node pkg='lane_planner' type='lane_select' name='lane_select' />

</launch>
