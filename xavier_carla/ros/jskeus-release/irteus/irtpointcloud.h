static pointer CLO6116();
static pointer FLET6148();
static pointer (*ftab[47])();

#define QUOTE_STRINGS_SIZE 214
static char *quote_strings[QUOTE_STRINGS_SIZE]={
    "#(:points :colors :normals :curvatures :height :width :point-color :point-size :fill :arrow-width :arrow-size)",
    ":points",
    ":colors",
    ":normals",
    ":curvatures",
    "make-coords",
    ":normal",
    ":size-change",
    "array-dimension",
    ":width",
    ":height",
    "make-matrix",
    "send-message",
    "super",
    ":init",
    ":size",
    "#f(0.0 0.0 0.0)",
    "#f(1000.0 1000.0 1000.0)",
    "make-bounding-box",
    ":point-list",
    ":reset-box",
    ":box",
    ":maxpoint",
    ":minpoint",
    "user::c-matrix-row",
    "matrixp",
    "float-vector",
    "user::c-isnan",
    "user::vector-array-mean",
    ":point-color",
    ":transparent",
    "#(:create)",
    "user::pointcloud",
    ":view-coords",
    ":copy-worldcoords",
    ":point-size",
    ":axis-length",
    ":axis-width",
    "\";; this method has not been implemented !!!\"",
    "warn",
    "\";; this method has not been implemented !!!\"",
    "send",
    ":filter",
    "#(:create)",
    ":filtered-indices",
    ":filter-with-indices",
    ":create",
    "#(:create :negative)",
    "set-difference",
    "user::view-coords",
    ":transform",
    ":worldcoords",
    "#(:key :ckey :nkey :pckey :pnkey :pcnkey :negative)",
    "#(:min-z :hangle :vangle)",
    "deg2rad",
    "#(:ipkey :height :width :cy :cx :negative)",
    "#(:height :width :cy :cx :create :negative)",
    ":image-position-inlier",
    ":ipkey",
    ":negative",
    "#(:fixsize :create)",
    ":step-inlier",
    "#(:h-step :s-step :hlimits :vlimits :slimits :rotate-hue :color-scale :sizelimits)",
    ":element-type",
    "make-array",
    "user::rgb2his",
    "scale-matrix",
    ":reset-coords",
    "#(:create)",
    ":copy-from",
    ":world",
    ":worldpos",
    ":worldrot",
    "user::c-coords-transform-vector",
    "#(:create)",
    ":transform-points",
    "#(:create)",
    ":move-origin-to",
    "#(:create)",
    ":inverse-transformation",
    ":reset",
    "matrix-row",
    "set-matrix-row",
    "gl:gldepthmask",
    "gl:glenable",
    "gl:glblendfunc",
    "gl:glpushattrib",
    ":viewsurface",
    ":makecurrent",
    "gl:gldisable",
    "gl:glpushmatrix",
    ":4x4",
    "gl::*temp-matrix*",
    "gl:glmultmatrixf",
    "gl:gllinewidth",
    "gl:glbegin",
    "gl:glcolor3fv",
    "gl:glvertex3fv",
    "gl:glend",
    "gl:glpointsize",
    "/=",
    ":rainbow",
    ":rainbow-x",
    ":rainbow-y",
    ":rainbow-z",
    "member",
    "(:rainbow :rainbow-z)",
    "copy-matrix",
    "user::his2rgb",
    "normalize-vector",
    ":start1",
    "replace",
    "gl::glenableclientstate",
    "gl::glcolorpointer",
    "gl::glvertexpointer",
    "gl::gldrawarrays",
    "gl::gldisableclientstate",
    "#f(1.0 1.0 1.0)",
    "#f(0.0 0.0 -1.0)",
    "#f(0.0 0.0 1.0)",
    "#f(0.0 -1.0 0.0)",
    "#f(0.0 1.0 0.0)",
    "#f(-1.0 0.0 0.0)",
    "#f(1.0 0.0 0.0)",
    "#f(0.0 0.0 1.0)",
    ":normal-mono",
    "#f(0.8 0.8 0.8)",
    "gl:glcolor3f",
    "gl:glpopmatrix",
    "gl:glpopattrib",
    "#(:num :with-color :with-normal :scale)",
    "random-vector",
    "\"USER\"",
    "\"USER\"",
    "*package*",
    "\"no such package\"",
    ":global",
    ":super",
    "cascaded-coords",
    ":slots",
    "(user::parray carray user::narray user::curvature user::pcolor user::psize user::awidth user::asize box user::height user::width user::view-coords user::drawnormalmode user::transparent user::tcarray)",
    ":metaclass",
    ":documentation",
    "make-class",
    "\"Create point cloud object\"",
    "\"(self class)\"",
    "\"(self class)\"",
    ":vertices",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"change width and height, this method does not change points data\"",
    "\"(self class &optional vc)\"",
    "\"replace points, pts should be list of points or n$times$ matrix\"",
    "\"replace colors, cls should be list of points or n$times$ matrix\"",
    "\"replace normals by, nmls should be list of points or n$times$3 matrix\"",
    "\"(self class &optional curv)\"",
    "\"return list of points\"",
    ":color-list",
    "\"return list of colors\"",
    ":normal-list",
    "\"return list of normals\"",
    ":curvature-list",
    "\"(self class)\"",
    ":centroid",
    "\"retrun centroid of this point cloud\"",
    ":set-color",
    "\"(self class col &optional (_transparent))\"",
    "\"(self class &optional pc)\"",
    "\"(self class &optional ps)\"",
    "\"(self class &optional al)\"",
    "\"(self class &optional aw)\"",
    ":append",
    "\"append point cloud list to this point cloud. \\\\\\\\\n    if :create is true, return appended point cloud and original point cloud does not change.\"",
    ":clear-color",
    "\"(self class)\"",
    ":clear-normal",
    "\"(self class)\"",
    ":nfilter",
    "\"(self class &rest args)\"",
    "\"this method can take the same keywords with :filter-with-indices method.\\\\\\\\\n    if :create is true, return filtered point cloud and original point cloud does not change.\\\\\\\\\"",
    "\"filter point cloud with list of index (points which are indicated by indices will remain).\\\\\\\\\n    if :create is true, return filtered point cloud and original point cloud does not change.\\\\\\\\\n    if :negative is true, points which are indicated by indices will be removed.\"",
    "\"create list of index where filter function retrun true.\\\\\\\\\n    key, ckey, nkey are filter function for points, colors, normals. They are expected to take one argument and return t or nil.\\\\\\\\\n    pckey, pnkey are filter function for points and colors, points and normals. They are expected to take two arguments and return t or nil.\\\\\\\\\n    pcnkey is filter function for points, colors and normals. It is expected to take three arguments and return t or nil.\"",
    ":viewangle-inlier",
    "\"(self class &key (min-z 0.0) (hangle 44.0) (vangle 35.0))\"",
    "\"(self class &key (ipkey) (height 144) (width 176) (cy (/ (float (- height 1)) 2)) (cx (/ (float (- width 1)) 2)) negative)\"",
    ":image-circle-filter",
    "\"(self class dist &key (height 144) (width 176) (cy (/ (float (- height 1)) 2)) (cx (/ (float (- width 1)) 2)) create negative)\"",
    "\"(self class step offx offy)\"",
    ":step",
    "\"downsample points with step\"",
    ":generate-color-histogram-hs",
    "\"(self class &key (h-step 9) (s-step 7) (hlimits (cons 360.0 0.0)) (vlimits (cons 1.0 0.15)) (slimits (cons 1.0 0.25)) (rotate-hue) (color-scale 255.0) (sizelimits 1))\"",
    "\"update object by pc\"",
    "\"transform points and normals with coords.\\\\\\\\\n    if :create is true, return transformed point cloud and original point cloud does not change.\"",
    ":set-offset",
    "\"(self class cds &key (create))\"",
    ":convert-to-world",
    "\"transform points and normals with self coords. converted points data should be at the same position as displayed\"",
    "\"origin of point cloud is moved to neworigin. moved points data should be at the same position as displayed\"",
    ":drawnormalmode",
    "\"(self class &optional mode)\"",
    "\"(self class &optional trs)\"",
    ":draw",
    "\"(self class vwer)\"",
    "user::make-random-pointcloud",
    "\"(&key (num 1000) (with-color) (with-normal) (scale 100.0))\"",
    "\"GEOMETRY\"",
    "\"GEOMETRY\"",
    "\"no such package\"",
    ":irtpointcloud",
    "\"$Id: $\"",
    "provide",
  };
