static pointer CLO380();
static pointer CLO405();
static pointer CLO423();
static pointer (*ftab[34])();

#define QUOTE_STRINGS_SIZE 117
static char *quote_strings[QUOTE_STRINGS_SIZE]={
    "array-dimension",
    "unit-matrix",
    "lu-decompose2",
    "make-matrix",
    "float-vector",
    "\";; could not solve inverse-matrix~%\"",
    "warn",
    "lu-solve2",
    "eps=",
    "\";; matrix2quaternion error~%\"",
    "\";; quaternion2matrix : invalid input ~A, the norm is not 1~%\"",
    "warning-message",
    "scale-matrix",
    "m+",
    "pseudo-inverse2",
    "array-dimensions",
    "sv-decompose",
    "\";; !!WARNING!! : sv-decompose failed.(~a)~%\"",
    "fill",
    "matrix-determinant",
    ":initial-element",
    "make-list",
    "qr-decompose",
    ">=",
    "copy-matrix",
    "matrix-column",
    "set-matrix-column",
    "vector-mean",
    "set-matrix-row",
    "#(:num :err-rate :iteration :ransac-threshold :lms-func :lmeds-error-func :lms-estimate-func)",
    "lms",
    "lmeds-error",
    "lms-estimate",
    "expt",
    "find",
    ":lms-estimate-func",
    ">",
    "<",
    "find-extream",
    "position",
    "#(:lms-estimate-func)",
    "#(:lms-estimate-func)",
    "c-matrix-row",
    "\";; concatenate-matrix-column matrix size error (size=~A)~%\"",
    "matrix-row",
    "matrix",
    "\";; concatenate-matrix-row matrix size error (size=~A)~%\"",
    ":element-type",
    "make-array",
    "concatenate",
    "variance",
    "covariance",
    "inverse-matrix",
    "\"returns inverse matrix of mat\"",
    "diagonal",
    "\"make diagonal matrix from given vecgtor, diagonal #f(1 2) ->#2f((1 0)(0 2))\"",
    "minor-matrix",
    "\"return a matrix removing ic row and jc col elements from m\"",
    "atan2",
    "\"returns atan2 of y and x (atan (/ y x))\"",
    "outer-product-matrix",
    "\"returns outer product matrix of given v \\\\\\\\\n   {\\\\tt\n   matrix(a) v = a * v \\\\\\\\\n    0 -w2 w1\\\\\\\\\n    w2 0 -w0\\\\\\\\\n   -w1 w0  0\\\\\\\\\n   }\"",
    "matrix2quaternion",
    "\"returns quaternion of given matrix\"",
    "quaternion2matrix",
    "\"returns matrix of given quaternion\"",
    "matrix-log",
    "\"returns matrix log of given m, it returns [-pi, pi]\"",
    "matrix-exponent",
    "\"returns exponent of given omega\"",
    "midrot",
    "\"returns mid (or p) rotation matrix of given two matrix r1 and r2\"",
    "pseudo-inverse",
    "\"returns pseudo inverse of given mat\"",
    "pseudo-inverse-org",
    "\"(m &optional ret winv mat-tmp-cr)\"",
    "sr-inverse",
    "\"returns sr-inverse of given mat\"",
    "sr-inverse-org",
    "\"(mat &optional (k 1) me mat-tmp-cr mat-tmp-rr)\"",
    "manipulability",
    "\"return manipulability of given matrix\"",
    "random-gauss",
    "\"make random gauss, m:mean s:standard-deviation\"",
    "gaussian-random",
    "\"make random gauss vector, replacement for quasi-random defined in matlib.c\"",
    "eigen-decompose",
    "\"(m)\"",
    "\"(point-list)\"",
    "\"(res point-)\"",
    "lms-error",
    "\"(result point-list)\"",
    "lmeds",
    "\"(point-list &key (num 5) (err-rate 0.3) (iteration) (ransac-threshold) (lms-func #'lms) (lmeds-error-func #'lmeds-error) (lms-estimate-func #'lms-estimate))\"",
    "\"(result point-list &key (lms-estimate-func #'lms-estimate))\"",
    "lmeds-error-mat",
    "\"(result mat &key (lms-estimate-func #'lms-estimate))\"",
    "concatenate-matrix-column",
    "\"Concatenate matrix in column direction.\"",
    "concatenate-matrix-row",
    "\"Concatenate matrix in row direction.\"",
    "concatenate-matrix-diagonal",
    "\"Concatenate matrix in diagonal.\"",
    "vector-variance",
    "\"returns vector, each element represents variance of elements in the same index of vector within vector-list\"",
    "covariance-matrix",
    "\"make covariance matrix of given input vector-list\"",
    "normalize-vector-org",
    "normalize-vector",
    "compiler::builtin-function-entry",
    "remprop",
    "\"VNORMALIZE\"",
    "compiler::def-builtin-entry",
    "\"calculate normalize-vector #f(0 0 0)->#f(0 0 0).\"",
    ":irtmath",
    "\"$Id$\"",
    "provide",
  };
