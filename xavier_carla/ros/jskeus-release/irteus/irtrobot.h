static pointer CLO4096();
static pointer CLO4099();
static pointer CLO4100();
static pointer CLO4144();
static pointer CLO4145();
static pointer CLO4253();
static pointer CLO4258();
static pointer CLO4267();
static pointer CLO4270();
static pointer CLO4315();
static pointer CLO4328();
static pointer CLO4334();
static pointer CLO4346();
static pointer UWP4431();
static pointer CLO4432();
static pointer CLO4437();
static pointer CLO4438();
static pointer CLO4439();
static pointer CLO4460();
static pointer CLO4518();
static pointer CLO4461();
static pointer CLO4484();
static pointer CLO4521();
static pointer CLO4501();
static pointer CLO4522();
static pointer CLO4503();
static pointer CLO4505();
static pointer CLO4508();
static pointer CLO4509();
static pointer CLO4512();
static pointer CLO4544();
static pointer CLO4546();
static pointer CLO4551();
static pointer CLO4552();
static pointer CLO4554();
static pointer CLO4567();
static pointer CLO4568();
static pointer CLO4569();
static pointer CLO4580();
static pointer CLO4759();
static pointer CLO4582();
static pointer CLO4584();
static pointer CLO4605();
static pointer FLET4610();
static pointer CLO4611();
static pointer CLO4614();
static pointer CLO4615();
static pointer CLO4616();
static pointer CLO4617();
static pointer FLET4622();
static pointer CLO4623();
static pointer CLO4624();
static pointer CLO4625();
static pointer CLO4626();
static pointer CLO4627();
static pointer CLO4628();
static pointer CLO4629();
static pointer CLO4642();
static pointer CLO4655();
static pointer FLET4661();
static pointer FLET4662();
static pointer CLO4663();
static pointer CLO4687();
static pointer CLO4695();
static pointer CLO4703();
static pointer CLO4721();
static pointer CLO4722();
static pointer FLET4727();
static pointer CLO4794();
static pointer CLO4730();
static pointer CLO4731();
static pointer CLO4732();
static pointer CLO4733();
static pointer CLO4745();
static pointer CLO4754();
static pointer (*ftab[52])();

#define QUOTE_STRINGS_SIZE 483
static char *quote_strings[QUOTE_STRINGS_SIZE]={
    "make-cylinder",
    "make-cube",
    "make-cascoords",
    ":x",
    "#f(1.0 0.0 0.0)",
    ":y",
    "#f(0.0 1.0 0.0)",
    ":z",
    "#f(0.0 0.0 1.0)",
    ":-x",
    "#f(-1.0 0.0 0.0)",
    ":-y",
    "#f(0.0 -1.0 0.0)",
    ":-z",
    "#f(0.0 0.0 -1.0)",
    "#f(0.0 0.0 -1.0)",
    ":orient",
    "#f(0.0 0.0 -1.0)",
    "acos",
    "#f(0.0 0.0 -1.0)",
    ":world",
    ":transform",
    ":translate",
    ":locate",
    ":assoc",
    ":set-color",
    ":red",
    ":green",
    "remove-if",
    ":centroid",
    "+",
    "reduce",
    "v+",
    "user::bodyset-link",
    ":init",
    ":bodies",
    ":name",
    ":volume",
    "super",
    ":init-ending",
    "null",
    ":legs",
    "every",
    ":end-coords",
    ":make-support-polygons",
    "remove",
    "\"~A-END-COORDS\"",
    "read-from-string",
    "user:forward-message-to",
    ":root-link",
    "\"~A-ROOT-LINK\"",
    ":angle-vector",
    "cons",
    "float-vector",
    ":inverse-kinematics",
    ":link-list",
    ":parent",
    ":collision-avoidance-link-pair",
    ":collision-avoidance-link-pair-from-link-list",
    ":collision-avoidance-links",
    "send",
    ":move-target",
    ":move-end",
    ":move-end-rot",
    ":copy-worldcoords",
    ":local",
    ":rotate",
    "deg2rad",
    ":move-end-pos",
    ":look-at",
    ":head",
    ":links",
    ":inverse-kinematics-loop-for-look-at",
    "\"~A-COLLISION-AVOIDANCE-LINKS\"",
    "string-upcase",
    ":slots",
    "assoc",
    ":limb",
    ":joint-list",
    ":joint",
    "send-all",
    ":gripper",
    ":joint-order",
    ":cameras",
    ":get-sensors-method-by-limb",
    ":imu-sensors",
    ":force-sensors",
    ":method",
    "\"~A-~A\"",
    "*keyword-package*",
    "find-method",
    "\";; error: cannot find method ~A~%\"",
    "warn",
    ":stop",
    ":warnp",
    ":pos",
    "make-coords",
    ":worldpos",
    "orient-coords-to-axis",
    ":difference-position",
    ":translation-axis",
    ":difference-rotation",
    ":rotation-axis",
    ":calc-target-joint-dimension",
    "fill",
    ":worldrot",
    "matrix-column",
    ":parent-link",
    ":rotate-vector",
    "user::axis",
    "#f(1.0 0.0 0.0)",
    "#f(0.0 1.0 0.0)",
    "#f(0.0 0.0 1.0)",
    "#f(-1.0 0.0 0.0)",
    "#f(0.0 -1.0 0.0)",
    "#f(0.0 0.0 -1.0)",
    "#f(-1.0 0.0 0.0)",
    ":inverse-kinematics-loop",
    ":loop",
    ":target-coords",
    ":null-space",
    ":weight",
    ":debug-view",
    "\";; :look-at failed.~%\"",
    "\";;     count : ~a~%\"",
    "\";; p-dif-rot : ~a/(~a)~%\"",
    "\";;   dif-rot : ~a/(~a)~%\"",
    "\";;      diff : ~a < ~A~%\"",
    "user::all-child-links",
    ":joint-angle",
    ":get-sensor-method",
    ":camera",
    ":force-sensor",
    ":imu-sensor",
    "\"~As\"",
    ":test",
    "equal",
    ":key",
    "find",
    "remove-if-not",
    ":larm",
    ":rarm",
    ":lleg",
    ":rleg",
    ":torso",
    ":look-at-target",
    ":arms",
    "(:rarm :larm)",
    "#(:look-at-target :move-target :link-list)",
    "functionp",
    "\";; error: all target-coords should be Coordinates or functions, but get ~A~%\"",
    "send-message",
    "#(:target-coords :debug-view :look-at-target :move-target :link-list)",
    "#(:target-coords)",
    "float-vector-p",
    "coordinates-p",
    "identity",
    ":initial-value",
    "#f(0.0 0.0 0.0)",
    "#f(0.0 0.0 0.0)",
    "#(:force-list :moment-list :target-coords :debug-view :calc-statics-p :dt :av :root-coords :calc-torque-buffer-args :distribute-total-wrench-to-torque-method)",
    ":calc-torque-buffer-args",
    ":distribute-total-wrench-to-torque-method-default",
    ":calc-torque",
    ":calc-statics-p",
    ":av",
    ":root-coords",
    ":dt",
    ":force-list",
    ":moment-list",
    ":joint-torque",
    "(:rleg :lleg)",
    ":calc-contact-wrenches-from-total-wrench",
    ":total-wrench",
    ":force",
    ":moment",
    ":calc-torque-from-ext-wrenches",
    "#(:move-target :use-torso)",
    ":calc-jacobian-from-link-list",
    "position",
    ":calc-inverse-jacobian",
    "#(:move-target :link-list :min :max :root-link-virtual-joint-weight :target-centroid-pos :cog-gain :cog-translation-axis :centroid-offset-func :centroid-thre :additional-weight-list :joint-args :cog-null-space :min-loop)",
    "#f(0.1 0.1 0.1 0.1 0.5 0.5)",
    "midpoint",
    "listp",
    ":min",
    ":max",
    "user::virtual-link",
    ":inertia-tensor",
    "make-matrix",
    ":add-joint",
    "user::6dof-joint",
    ":child-link",
    ":add-parent-link",
    ":add-child-links",
    ":cog-gain",
    ":centroid-thre",
    ":target-centroid-pos",
    ":cog-translation-axis",
    ":centroid-offset-func",
    ":cog-null-space",
    ":min-loop",
    ":additional-weight-list",
    "#(:avoid-nspace-gain :limbs)",
    "(:rleg :lleg)",
    ":initial-element",
    "make-list",
    "array-dimension",
    ":calc-union-link-list",
    "user::joint-angle-limit-nspace",
    ":methods",
    "(:larm :rarm)",
    "(\"collar\" \"shoulder\" \"elbow\" \"wrist\")",
    "(:lleg :rleg)",
    "(\"crotch\" \"knee\" \"ankle\")",
    "(:torso)",
    "(\"chest\" \"weist\")",
    "(:head)",
    "(\"neck\" \"head\")",
    "symbol-name",
    "substringp",
    "\":~A\"",
    "remove-duplicates",
    "\"    #f(~%      \"",
    "\"~6,2f \"",
    "\"~%      \"",
    "\")~%\"",
    "#(:wrt :limbs :force-sensors :cop-coords :fz-thre :limb-cop-fz-list)",
    "(:rleg :lleg)",
    ":inverse-transform-vector",
    "string",
    "member",
    ":del-joint",
    ":del-parent-link",
    ":del-child-link",
    "find-if",
    "\"~A-\"",
    "(:rarm :larm :rleg :lleg :torso :head)",
    "(:rleg :lleg)",
    ":calc-cop-from-force-moment",
    ":fz-thre",
    ":return-all-values",
    ":fz",
    ":cop",
    "midcoords",
    ":both",
    "#(:mid)",
    "some",
    ":left",
    ":right",
    ":transformation",
    ":newcoords",
    ":worldcoords",
    "#(:thre :rthre :mid :target-centroid-pos :fix-limbs-target-coords :root-link-virtual-joint-weight)",
    "#f(0.1 0.1 0.0 0.0 0.0 0.5)",
    ":fullbody-inverse-kinematics",
    ":fix-limbs",
    ":root-link-virtual-joint-weight",
    ":thre",
    ":rthre",
    "#(:default-step-height :dt :default-step-time :solve-angle-vector-args :debug-view :all-limbs :default-zmp-offsets :init-pose-function :start-with-double-support :end-with-double-support :ik-thre :ik-rthre :calc-zmp)",
    "(:rleg :lleg)",
    "user::gait-generator",
    ":initialize-gait-parameter",
    ":default-step-height",
    ":default-double-support-ratio",
    ":default-zmp-offsets",
    ":all-limbs",
    ":start-with-double-support",
    ":end-with-double-support",
    ":proc-one-tick",
    ":type",
    ":cycloid",
    ":debug",
    ":solve-angle-vector-args",
    ":calc-zmp",
    ":pzmpz",
    "user::all-limbs",
    ":draw-gg-debug-view",
    "x::window-main-one",
    ":czmp",
    ":zmp",
    ":cog",
    ":time",
    ":pz",
    ":contact-state",
    ":end-coords-list",
    "*viewer*",
    ":draw-objects",
    ":flush",
    ":draw-on",
    ":size",
    ":color",
    "#f(0.0 0.0 1.0)",
    ":width",
    "#f(1.0 0.0 0.0)",
    "#f(0.0 1.0 0.0)",
    "#f(0.0 0.0 1.0)",
    "#f(1.0 1.0 1.0)",
    ":viewsurface",
    "#(:ratio)",
    "ratio",
    "\";; generating footstep-parameter...~%\"",
    ":reset-pose",
    ":fix-leg-to-coords",
    "(:rleg :lleg)",
    "v-",
    "\";; generating footstep-parameter... done.~%\"",
    ":put",
    ":footstep-parameter",
    ":default-half-offset",
    ":forward-offset-length",
    ":outside-offset-length",
    ":rotate-rad",
    ":get",
    ":gen-footstep-parameter",
    "#(:footstep-parameter :default-half-offset :forward-offset-length :outside-offset-length :rotate-rad :gen-go-pos-step-node-func)",
    "rad2deg",
    "eps=",
    "(:rleg :lleg)",
    "#(:type)",
    ":crawl",
    ":go-pos-params->footstep-list",
    ":coords",
    ":trot",
    ":pace",
    ":gallop",
    ":body",
    "polygon",
    ":vertices",
    "append",
    "quickhull",
    ":support-polygons",
    ":make-sole-polygon",
    "\"~A-sole-body\"",
    "flatten",
    "<",
    "find-extream",
    "make-bounding-box",
    ":faces",
    "normalize-vector",
    "user::sphere-joint",
    "user::linear-joint",
    ":axis",
    "#(:target-points :force-list :moment-list :static-balance-point-height :update-mass-properties)",
    "(:rarm :larm)",
    "*g-vec*",
    "(:rleg :lleg)",
    "(:rleg :lleg)",
    "(:rleg :lleg)",
    "(:rleg :lleg)",
    "(:rleg :lleg)",
    ":move-centroid-on-foot",
    "(:rleg :lleg)",
    ":swing",
    "#f(0.0 1.0 0.0)",
    "#f(1.0 0.0 0.0)",
    ":string",
    "\"red = support leg\"",
    "\"green = swing leg\"",
    "\"blue = refzmp\"",
    "\"white = calc zmp\"",
    "(:rleg :lleg)",
    "#f(10.0 0.0 0.0)",
    "#f(0.0 -10.0 0.0)",
    ":rpy-angle",
    "oddp",
    ":support-polygon",
    ":descendants",
    "*epsilon*",
    "eps-v=",
    ":bottom",
    ":id",
    "0",
    "1",
    "\"USER\"",
    "\"USER\"",
    "*package*",
    "\"no such package\"",
    ":irtmodel",
    "require",
    ":irtdyna",
    "user::make-default-robot-link",
    "\"(len radius axis name &optional extbody)\"",
    "user::robot-model",
    ":global",
    ":super",
    "user::cascaded-link",
    "(user::larm-end-coords user::rarm-end-coords user::lleg-end-coords user::rleg-end-coords user::head-end-coords user::torso-end-coords user::larm-root-link user::rarm-root-link user::lleg-root-link user::rleg-root-link user::head-root-link user::torso-root-link user::larm-collision-avoidance-links user::rarm-collision-avoidance-links user::larm user::rarm user::lleg user::rleg user::torso user::head user::force-sensors user::imu-sensors user::cameras user::support-polygons)",
    ":metaclass",
    ":element-type",
    ":documentation",
    "make-class",
    "\"(self class)\"",
    ":rarm-end-coords",
    "\"(self class)\"",
    ":larm-end-coords",
    "\"(self class)\"",
    ":rleg-end-coords",
    "\"(self class)\"",
    ":lleg-end-coords",
    "\"(self class)\"",
    ":head-end-coords",
    "\"(self class)\"",
    ":torso-end-coords",
    "\"(self class)\"",
    ":rarm-root-link",
    "\"(self class)\"",
    ":larm-root-link",
    "\"(self class)\"",
    ":rleg-root-link",
    "\"(self class)\"",
    ":lleg-root-link",
    "\"(self class)\"",
    ":head-root-link",
    "\"(self class)\"",
    ":torso-root-link",
    "\"(self class)\"",
    "\"(self class limb method &rest args)\"",
    "\"(self class limb &rest args)\"",
    "\"(self class limb &rest args)\"",
    "\"Returns camera with given name\"",
    "\"Returns force sensor with given name\"",
    "\"Returns imu sensor of given name\"",
    "\"(self class sensor-type sensor-name)\"",
    "\"(self class sensors-type limb)\"",
    "\"Returns force sensors.\"",
    "\"Returns imu sensors.\"",
    "\"Returns camera sensors.\"",
    "\"(self class &rest args)\"",
    "\"(self class &rest args)\"",
    "\"(self class &rest args)\"",
    "\"(self class &rest args)\"",
    "\"(self class &rest args)\"",
    "\"(self class &rest args)\"",
    "\"(self class &rest args)\"",
    "\"(self class &rest args)\"",
    ":look-at-hand",
    "\"look at hand position, l/r supports :rarm, :larm, :arms, and '(:rarm :larm)\"",
    "\"solve inverse kinematics, move move-target to target-coords\n    look-at-target suppots t, nil, float-vector, coords, list of float-vector, list of coords\n    link-list is set by default based on move-target -> root link link-list\"",
    "\"move move-target using dif-pos and dif-rot,\n    look-at-target suppots t, nil, float-vector, coords, list of float-vector, list of coords\n    link-list is set by default based on move-target -> root link link-list\"",
    "\"move robot head to look at targets, look-at-target support t/nil float-vector coordinates, center of list of float-vector or list of coordinates\"",
    ":init-pose",
    "\"Set robot to initial posture.\"",
    ":torque-vector",
    "\"Returns torque vector\"",
    "\"(self class)\"",
    ":calc-force-from-joint-torque",
    "\"Calculates end-effector force and moment from joint torques.\"",
    "\"fullbody inverse kinematics for legged robot.\n     necessary args : target-coords, move-target, and link-list must include legs' (or leg's) parameters\n                      ex. (send *robot* :fullbody-inverse-kinematics (list rarm-tc rleg-tc lleg-tc) :move-target (list rarm-mt rleg-mt lleg-mt) :link-list (list rarm-ll rleg-ll lleg-ll))\"",
    ":joint-angle-limit-nspace-for-6dof",
    "\"(self class &key (avoid-nspace-gain 0.01) (limbs '(:rleg :lleg)))\"",
    "\"(self class limb &optional jname-list)\"",
    ":print-vector-for-robot-limb",
    "\"Print angle vector with limb alingment and limb indent.\n    For example, if robot is rarm, larm, and torso, print result is:\n    #f(\n       rarm-j0 ... rarm-jN\n       larm-j0 ... larm-jN\n       torso-j0 ... torso-jN\n       )\"",
    ":calc-zmp-from-forces-moments",
    "\"Calculate zmp[mm] from sensor local forces and moments\n       If force_z is large, zmp can be defined and returns 3D zmp.\n       Otherwise, zmp cannot be defined and returns nil.\"",
    ":foot-midcoords",
    "\"Calculate midcoords of :rleg and :lleg end-coords.\n    In the following codes, leged robot is assumed.\"",
    "\"Fix robot's legs to a coords\n    In the following codes, leged robot is assumed.\"",
    "\"Move robot COG to change centroid-on-foot location,\n    leg : legs for target of robot's centroid, which should be :both, :rleg, and :lleg.\n    fix-limbs : limb names which are fixed in this IK.\"",
    ":calc-walk-pattern-from-footstep-list",
    "\"Calculate walking pattern from foot step list and return pattern list as a list of angle-vector, root-coords, time, and so on.\"",
    "\"(self class end-coords-list contact-state rz cog pz czmp dt)\"",
    "\"Generate footstep parameter\"",
    "\"(self class)\"",
    "\"Calculate foot step list from goal x position [mm], goal y position [mm], and goal yaw orientation [deg].\"",
    ":go-pos-quadruped-params->footstep-list",
    "\"Calculate foot step list for quadruped walking from goal x position [mm], goal y position [mm], and goal yaw orientation [deg].\"",
    "\"Return support polygons.\"",
    "\"Return support polygon.\n    If name is list, return convex hull of all polygons.\n    Otherwise, return polygon with given name\"",
    "\"(self class)\"",
    "\"(self class name)\"",
    ":make-default-linear-link-joint-between-attach-coords",
    "\"Make default linear arctuator module such as muscle and cylinder and append lins and joint-list.\n    Module includes parent-link => (j0) => l0 => (j1) => l1 (linear actuator) => (j2) => l2 => end-coords.\n    attach-coords-0 is root side coords which linear actulator is attached to.\n    attach-coords-1 is end side coords which linear actulator is attached to.\n    end-coords-name is the name of end-coords.\n    linear-joint-name is the name of linear actuator.\"",
    ":calc-static-balance-point",
    "\"Calculate static balance point which is equivalent to static extended ZMP.\n    The output is expressed by the world coordinates.\n    target-points are end-effector points on which force-list and moment-list apply.\n    force-list [N] and moment-list [Nm] are list of force and moment at target-points.\n    static-balance-point-height is height of static balance point [mm].\"",
    "\"GEOMETRY\"",
    "\"GEOMETRY\"",
    "\"no such package\"",
    ":irtrobot",
    "\"$Id$\"",
    "provide",
  };
