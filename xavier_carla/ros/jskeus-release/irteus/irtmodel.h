static pointer CLO872();
static pointer CLO1288();
static pointer CLO1291();
static pointer CLO1294();
static pointer FLET1414();
static pointer CLO1415();
static pointer CLO1416();
static pointer UWP1423();
static pointer UWP1424();
static pointer CLO1515();
static pointer FLET1567();
static pointer CLO1662();
static pointer CLO1679();
static pointer CLO1737();
static pointer CLO1769();
static pointer FLET1775();
static pointer CLO1820();
static pointer CLO2536();
static pointer CLO1852();
static pointer CLO2196();
static pointer CLO2289();
static pointer CLO2320();
static pointer CLO2323();
static pointer CLO2326();
static pointer CLO2329();
static pointer CLO2333();
static pointer CLO2334();
static pointer CLO2335();
static pointer CLO2340();
static pointer CLO2341();
static pointer CLO2342();
static pointer CLO2343();
static pointer UWP2354();
static pointer UWP2359();
static pointer CLO2360();
static pointer CLO2361();
static pointer FLET2381();
static pointer FLET2382();
static pointer FLET2383();
static pointer FLET2384();
static pointer FLET2385();
static pointer FLET2386();
static pointer CLO2569();
static pointer CLO2406();
static pointer CLO2407();
static pointer CLO2408();
static pointer UWP2409();
static pointer CLO2412();
static pointer CLO2482();
static pointer CLO2483();
static pointer CLO2506();
static pointer CLO2507();
static pointer CLO2576();
static pointer CLO2508();
static pointer CLO2512();
static pointer CLO2513();
static pointer CLO2517();
static pointer CLO2521();
static pointer CLO2528();
static pointer CLO2584();
static pointer CLO2585();
static pointer CLO2696();
static pointer CLO2706();
static pointer CLO2697();
static pointer CLO2707();
static pointer FLET2714();
static pointer CLO2715();
static pointer CLO2730();
static pointer CLO2738();
static pointer CLO2766();
static pointer CLO2767();
static pointer (*ftab[70])();

#define QUOTE_STRINGS_SIZE 900
static char *quote_strings[QUOTE_STRINGS_SIZE]={
    "#(:name :child-link :parent-link :min :max :max-joint-velocity :max-joint-torque :joint-min-max-table :joint-min-max-target)",
    "\"joint~A\"",
    "\"KEYWORD\"",
    ":name",
    "float-vector-p",
    "float-vector",
    "\"[joint ~A] warning negative max-joint-velocity value ~A~%\"",
    "\"[joint ~A] warning negative max-joint-torque value ~A~%\"",
    ":max-joint-velocity",
    ":max-joint-torque",
    ":joint-min-max-table",
    ":joint-min-max-target",
    ":copy-coords",
    "user:forward-message-to",
    "\"subclass's respoinsibility (send ~s :calc-dav-gain)~%\"",
    "warn",
    "\"subclass's respoinsibility (send ~s :joint-dof)~%\"",
    "\"subclass's respoinsibility (send ~s :speed-to-angle)~%\"",
    "\"subclass's respoinsibility (send ~s :angle-to-speed)~%\"",
    "\"subclass's respoinsibility (send ~s :calc-jacobian)~%\"",
    ":joint-angle",
    ":joint-min-max-table-angle-interpolate",
    ":min-angle",
    ":max-angle",
    "array-dimension",
    ":rotate-vector",
    "normalize-vector",
    ":worldrot",
    "user::joint",
    ":worldpos",
    "#f(0.0 0.0 0.0)",
    ":joint-dof",
    "#(:axis :max-joint-velocity :max-joint-torque)",
    ":z",
    "send-message",
    "super",
    ":init",
    ":joint-velocity",
    ":joint-acceleration",
    ":joint-torque",
    "#(:relative)",
    ":joint-min-max-table-min-angle",
    ":joint-min-max-table-max-angle",
    "\";; ~A :joint-angle(~A) violate max-angle(~A)~%\"",
    "warning-message",
    "\";; ~A :joint-angle(~A) violate min-angle(~A)~%\"",
    ":replace-coords",
    ":rotate",
    "deg2rad",
    "rad2deg",
    "user::calc-jacobian-rotational",
    "#(:axis :max-joint-velocity :max-joint-torque)",
    ":x",
    ":-x",
    ":y",
    ":-y",
    ":-z",
    "#(:relative)",
    "\";; ~A :joint-angle(~A) violate max-angle(~A)~%\"",
    "\";; ~A :joint-angle(~A) violate min-angle(~A)~%\"",
    ":translate",
    "user::calc-jacobian-linear",
    "#(:min :max :max-joint-velocity :max-joint-torque)",
    "*-inf*",
    "*inf*",
    "#f(1.0 0.0 0.0)",
    ":min",
    ":max",
    "#(:relative)",
    "\"wheel-joint does not support non-relative mode??~%\"",
    "#f(1.0 0.0 0.0)",
    "#f(0.0 0.0 1.0)",
    "#(:min :max :max-joint-velocity :max-joint-torque)",
    "#f(1.0 0.0 0.0)",
    "#f(0.0 1.0 0.0)",
    "#(:relative)",
    "#f(1.0 0.0 0.0)",
    "#f(0.0 1.0 0.0)",
    "#f(0.0 0.0 1.0)",
    "#(:min :max :max-joint-velocity :max-joint-torque)",
    "#(:relative)",
    "eps=",
    "user::matrix-exponent",
    "user::matrix-log",
    ":transform",
    ":rot",
    "make-coords",
    "#(:relative)",
    "cons",
    "rpy-matrix",
    "#f(1.0 0.0 0.0)",
    "#f(0.0 1.0 0.0)",
    "#f(0.0 0.0 1.0)",
    "#(:axis-order :child-rot)",
    "(:z :y :x)",
    "1",
    "user::atan2",
    "2",
    "3",
    "matrix-to-euler-angle",
    "#(:min :max :max-joint-velocity :max-joint-mjt :absolute-p)",
    "#f(1.0 0.0 0.0)",
    "#f(0.0 1.0 0.0)",
    "#f(0.0 0.0 1.0)",
    ":transformation",
    ":pos",
    ":inverse-transform-vector",
    "#(:relative)",
    "#(:relative)",
    "#f(1.0 0.0 0.0)",
    "#f(0.0 1.0 0.0)",
    "#f(0.0 0.0 1.0)",
    "#f(1.0 0.0 0.0)",
    "#f(0.0 1.0 0.0)",
    "#f(0.0 0.0 1.0)",
    "#(:analysis-level :weight :centroid :inertia-tensor)",
    ":body",
    "#f(0.0 0.0 0.0)",
    "unit-matrix",
    ":reset-dynamics",
    ":coords",
    "cascaded-coords",
    ":worldcoords",
    ":transform-vector",
    "member",
    "delete",
    "#(:name)",
    ":bodies",
    "send-all",
    "flatten",
    ":child-link",
    ":add-joint",
    ":add-parent-link",
    ":parent-link",
    ":add-child-links",
    ":update-descendants",
    ":links",
    ":make-pqpmodel",
    "user:forward-message-to-all",
    ":test",
    "equal",
    ":key",
    "find",
    ":faces",
    "user::joint-angle",
    "1",
    "1",
    ":find-link-route",
    "#(:fat :fat2 :debug :margin :overwrite-collision-model)",
    ":analysis-level",
    ":put",
    ":org-min-angle",
    ":org-max-angle",
    ":copy-worldcoords",
    ":angle-vector",
    "\";~10A ~20,10f ~20,10f~%\"",
    "\";~10A ~20,10f ~20,10f~%\"",
    "\";~10A ~20,10f ~20,10f~%\"",
    "\";~10A ~20,10f ~20,10f~%\"",
    ":newcoords",
    ":init-pose",
    ":pqpmodel",
    ":fat",
    ":fat2",
    "pqp-collision-check",
    ":make-min-max-table-using-collision-check",
    "make-matrix",
    ":low-limit",
    "\";~c~7d/~7d\"",
    ":min-max-collision-check",
    ":free",
    "/=",
    ":high-limit",
    "\";~10A ~7,3f / ~10A ~7,3f / ~A ~A~%\"",
    "\"~%\"",
    "*standard-output*",
    "*error-output*",
    "\"/dev/null\"",
    ":direction",
    ":output",
    "open",
    "x:panel",
    ":create",
    ":width",
    ":get",
    ":height",
    ":atitle",
    "\"min-max-table-view\"",
    ":plot-joint-min-max-table-common",
    ":color",
    ":flush",
    ":draw-line",
    "(:x :y :z :xx :yy :zz)",
    "(:xy :yx :yz :zy :zx :xz)",
    "nil",
    "union",
    "reduce",
    ":calc-union-link-list",
    ":joint",
    "#(:manipulability-limit :manipulability-gain :weight :debug-view :ret :wmat :tmat :umat :umat2 :mat-tmp :mat-tmp-rc :tmp-mrr :tmp-mrr2)",
    "user::manipulability",
    "expt",
    ":no-message",
    "\"k     :~7,3f (manipulability:~7,3f, gain:~7,3f, limit:~7,3f, len:~d)~%\"",
    "array-dimensions",
    "user::sr-inverse",
    "-",
    "#(:move-target :transform-coords :rotation-axis :translation-axis :col-offset :dim :fik-len :fik :tmp-v0 :tmp-v1 :tmp-v2 :tmp-v3 :tmp-v3a :tmp-v3b :tmp-m33)",
    "make-list",
    ":initial-element",
    ":calc-target-axis-dimension",
    ":calc-target-joint-dimension",
    "\"Joint order for this jacobian matrix follows link-list order. Joint torque[Nm] order is also the same.\n    Ex1. One-Arm\n    (setq *rarm-link-list* (send *robot* :link-list (send *robot* :rarm :end-coords :parent)))\n    (send-all *rarm-link-list* :joint)\n    Ex2. Two-Arm\n    (setq *arms-link-list* (mapcar #'(lambda (l) (send *robot* :link-list (send *robot* l :end-coords :parent))) '(:rarm :larm)))\n    (send-all (send *robot* :calc-union-link-list *arms-link-list*) :joint)\n   \"",
    "position",
    "user::bodyset-link",
    ":parent",
    "user::axis",
    "#f(1.0 0.0 0.0)",
    "#f(0.0 1.0 0.0)",
    "#f(0.0 0.0 1.0)",
    ":xx",
    "#f(1.0 0.0 0.0)",
    ":yy",
    "#f(0.0 1.0 0.0)",
    ":zz",
    "#f(0.0 0.0 1.0)",
    "#f(-1.0 0.0 0.0)",
    "#f(0.0 -1.0 0.0)",
    "#f(0.0 0.0 -1.0)",
    "user::default-coords",
    ":calc-jacobian",
    "#(:angle-speed :angle-speed-blending :jacobi :|JACOBI#| :null-space :|I-J#J| :debug-view :weight :wmat :tmp-len :tmp-len2 :fik-len)",
    "\";; ERROR : jacobi or jacobi# is required in :calc-joint-angle-speed~%\"",
    "\"J     :\"",
    "user::format-array",
    "\"d(JJt):~7,3f~%\"",
    "user::matrix-determinant",
    "\"J#t   :\"",
    "\"x     :\"",
    "\"J#x   :\"",
    "midpoint",
    "\"aspeed:\"",
    "\"J#x   :\"",
    "fill",
    "\"Ny    :\"",
    "\"dav   :\"",
    ":calc-angle-speed-gain",
    "#(:obstacles :collision-avoidance-links :debug)",
    "\"collision-links : ~A~%\"",
    "\"parnet-links    : ~A~%\"",
    "\"valid-link-list : ~A~%\"",
    "\"index-links     : ~A~%\"",
    "#(:union-link-list :warnp :collision-avoidance-link-pair :collision-distance-limit)",
    ":collision-distance",
    "\";; ERROR : (car pair) is not included in link-list ~A~%\"",
    ":qsize",
    "pqp-collision-distance",
    "\";; !!WARNING!! collision detected~%;; (~a . ~a . ~a)~%\"",
    ":centroid",
    "<=",
    ":collision-avoidance-args-list",
    ":link-list",
    ":ret",
    ":wmat",
    ":tmat",
    ":umat",
    ":umat2",
    ":mat-tmp",
    ":tmp-mcc",
    ":tmp-mcc2",
    ":tmp-mrc",
    ":tmp-mrr",
    ":tmp-mrr2",
    ":fik",
    ":weight",
    ":tmp-v0",
    ":tmp-v1",
    ":tmp-v2",
    ":tmp-v3",
    ":tmp-v3a",
    ":tmp-v3b",
    ":tmp-v3c",
    ":tmp-m33",
    ":tmp-dim",
    ":tmp-len",
    ":tmp-len2",
    ":tmp-pos",
    ":tmp-rot",
    "#(:avoid-collision-distance :avoid-collision-joint-gain :avoid-collision-null-gain :collision-avoidance-link-pair :union-link-list :link-list :weight :fik-len :debug-view)",
    "send",
    ":collision-avoidance-calc-distance",
    ":collision-pair-list",
    "last",
    "\"col-distance : ~7,3f(<~7,3f) #f(\"",
    "\"~7,3f \"",
    "\") ~A~%\"",
    "find-if",
    ":collision-avoidance-args",
    "make-cascoords",
    ":assoc",
    ":calc-jacobian-from-link-list",
    ":move-target",
    ":dissoc",
    ":collision-avoidance-null-vector",
    ":collision-avoidance-joint-vector",
    "\"coljnt:\"",
    "\"colnul:\"",
    "#(:union-link-list :periodic-time :joint-args :debug-view :move-joints-hook)",
    ":calc-joint-angle-speed",
    ":calc-joint-angle-speed-gain",
    "\"dav^  :\"",
    "1",
    ":speed-to-angle",
    ":relative",
    ":joint-angle-limit-weight-old",
    "assoc",
    ":find-joint-angle-limit-weight-old-from-union-link-list",
    "\"ocost :\"",
    "\"cost  :\"",
    "count-if",
    "#(:avoid-weight-gain :union-link-list :fik-len :weight :additional-weight-list :debug-view :tmp-weight :tmp-len)",
    "functionp",
    "\"usrwei:\"",
    "+",
    ":initial-value",
    "\"addwei:\"",
    ":calc-weight-from-joint-limit",
    "\"weight:\"",
    "\"nspace:\"",
    "#(:avoid-nspace-gain :union-link-list :fik-len :null-space :debug-view :additional-nspace-list :cog-gain :target-centroid-pos :centroid-offset-func :cog-translation-axis :cog-null-space :weight :update-mass-properties :tmp-nspace)",
    ":calc-nspace-from-joint-limit",
    ":cog-jacobian-balance-nspace",
    ":centroid-offset-func",
    ":update-mass-properties",
    ":target-centroid-pos",
    ":cog-gain",
    ":translation-axis",
    "#(:union-link-list :link-list :fik-len :weight :null-space :avoid-nspace-gain :avoid-weight-gain :avoid-collision-distance :avoid-collision-null-gain :avoid-collision-joint-gain :collision-avoidance-link-pair :cog-gain :target-centroid-pos :centroid-offset-func :cog-translation-axis :cog-null-space :additional-weight-list :additional-nspace-list :tmp-len :tmp-len2 :tmp-weight :tmp-nspace :tmp-mcc :tmp-mcc2 :debug-view :jacobi)",
    ":collision-avoidance-link-pair-from-link-list",
    ":obstacles",
    ":debug",
    ":debug-view",
    "\";; ERROR : jacobi is required in :move-joints-avoidance~%\"",
    "\"angle :\"",
    "\"~7,1f \"",
    "\"~7,1f \"",
    "\"~%\"",
    "\" min  :\"",
    "\"~7,1f \"",
    "\"~7,1f \"",
    "\"~%\"",
    "\" max  :\"",
    "\"~7,1f \"",
    "\"~7,1f \"",
    "\"~%\"",
    ":calc-inverse-kinematics-weight-from-link-list",
    ":fik-len",
    ":avoid-weight-gain",
    ":union-link-list",
    ":tmp-weight",
    ":additional-weight-list",
    ":calc-inverse-jacobian",
    "user::m-",
    ":collision-avoidance",
    ":avoid-collision-distance",
    ":avoid-collision-null-gain",
    ":avoid-collision-joint-gain",
    ":collision-avoidance-link-pair",
    "\"colvel:\"",
    "\"blend :~7,3f~%\"",
    ":calc-inverse-kinematics-nspace-from-link-list",
    ":avoid-nspace-gain",
    ":cog-null-space",
    ":cog-translation-axis",
    ":null-space",
    ":tmp-nspace",
    ":additional-nspace-list",
    "user::cascaded-link",
    ":move-joints",
    ":angle-speed",
    ":angle-speed-blending",
    ":|JACOBI#|",
    ":|I-J#J|",
    "#(:union-link-list :rotation-axis :translation-axis :additional-jacobi-dimension)",
    ":dim",
    ":tmp-dims",
    "*viewer*",
    ":viewsurface",
    ":line-width",
    ":point-size",
    "#f(1.0 0.0 0.0)",
    "\";; ERROR : could not get collision-distance ~A\"",
    "#f(0.7 0.0 0.7)",
    ":3d-point",
    ":depth-test",
    ":3d-line",
    "#f(1.0 0.0 0.0)",
    "#f(1.0 0.0 1.0)",
    "bodies",
    ":edges",
    "pvert",
    "nvert",
    "#(:stop :loop :link-list :move-target :rotation-axis :translation-axis :thre :rthre :dif-pos-ratio :dif-rot-ratio :union-link-list :target-coords :jacobi :additional-check :additional-jacobi :additional-vel :centroid-thre :target-centroid-pos :centroid-offset-func :cog-translation-axis :cog-null-space :cog-gain :min-loop :debug-view :ik-args)",
    ":p-limit",
    ":r-limit",
    ":reset-joint-angle-limit-weight-old",
    ":no-clear",
    ":clear",
    "\";; ERROR: list length differ : translation-axis ~A rotation-axis ~A move-target ~A link-list ~A dif-pos ~A dif-rot ~A~%\"",
    ":ik-continues",
    ":rotation-axis",
    "\"loop: ~3d~%\"",
    "\"union-link-list: ~A~%\"",
    "\"move-target: ~A~%\"",
    "\"targe-coordst: ~A~%\"",
    ":ik-convergence-check",
    ":calc-vel-from-pos",
    ":calc-vel-from-rot",
    "\"vel-pos :\"",
    "\"vel-rot :\"",
    "\"vel-pos-norm : ~7,3f/~7,3f~%vel-rot-norm : ~7,3f/~7,3f~%\"",
    ":ik-target-error",
    "\":target-~d\"",
    "read-from-string",
    "\":target-~d\"",
    ":calc-cog-jacobian-from-link-list",
    ":calc-vel-for-cog",
    "length",
    "\"add-J~a    :\"",
    "\"add-v~a    :\"",
    "\":additional-~d\"",
    "\":additional-~d\"",
    ":ik-draw-on-params",
    ":ik-succeed",
    ":move-joints-avoidance",
    ":jacobi",
    ":draw-objects",
    ":draw-collision-debug-view",
    "coordinates",
    ":draw-on",
    ":size",
    "#f(1.0 0.0 0.0)",
    ":no-flush",
    "x::window-main-one",
    "#(:stop :link-list :move-target :debug-view :warnp :revert-if-fail :rotation-axis :translation-axis :joint-args :thre :rthre :union-link-list :centroid-thre :target-centroid-pos :centroid-offset-func :cog-translation-axis :cog-null-space :dump-command :periodic-time :check-collision :additional-jacobi :additional-vel)",
    ":fail-only",
    "remove-duplicates",
    "\";; ERROR: both :link-list and :move-target required~%\"",
    "\";; ik ~A log at ~A on ~A~%;;~%\"",
    "\"success\"",
    "\"fail\"",
    "(10)",
    "string-trim",
    "lisp-implementation-version",
    "\"~A;; link-list ~A~%\"",
    "\"~A;; move-target ~A~%\"",
    "\"~A;; rotatoin-axis ~A, translation-axis ~A~%\"",
    "\"~A;; thre ~A, rthre ~A, stop ~A~%\"",
    "setq",
    "user::c0",
    "quote",
    "user::av0",
    "\";; ERROR: list length differ : translation-axis ~A rotation-axis ~A move-target ~A link-list ~A target-coords ~A~%\"",
    "\";; ERROR: list length differ : additional-jacobi ~A additional-vel ~A~%\"",
    ":inverse-kinematics-args",
    ":additional-jacobi-dimension",
    "(:always-with-debug-log :fail-only-with-debug-log)",
    ":inverse-kinematics-loop",
    ":target-coords",
    ":periodic-time",
    ":stop",
    ":loop",
    ":thre",
    ":rthre",
    ":additional-jacobi",
    ":additional-vel",
    ":ik-args",
    ":self-collision-check",
    "(:always :always-with-debug-log t)",
    "(:fail-only :fail-only-with-debug-log)",
    "\"/tmp/irtmodel-ik-~A\"",
    "\"~A-~04d-~02d-~02d-~02d-~02d-~02d-~A-~A-~A\"",
    "\"~0,6d\"",
    "\"~0,6d\"",
    "\"~0,6d\"",
    "substitute",
    "\"~A/~A-~A.l\"",
    "\"success\"",
    "\"failure\"",
    "unix:mkdir",
    "\"~A\"",
    "dump-structure",
    "(:fail-only-with-debug-log :always-with-debug-log)",
    "\"~A/~A-~A-debug-log.l\"",
    "\"success\"",
    "\"failure\"",
    "\"(setq *ik-loop* ~A~%\"",
    "\"      *ik-target-error* '~A~%\"",
    "\"      *ik-target-error-thre* '~A)~%\"",
    "remprop",
    "\";; inverse-kinematics failed.~%\"",
    "\";; dif-pos : ~a/(~a/~a)~%\"",
    "\";; dif-rot : ~a/(~a/~a)~%\"",
    ":difference-cog-position",
    "\";; cog-dif : ~a/(~a/~a)~%\"",
    "\";;  coords : ~a~%\"",
    "\";;  angles : ~a~%\"",
    "\";;  collision : ~a~%\"",
    "\";;    args : ~a~%\"",
    "count",
    ":count",
    "(list)",
    "instance",
    "progn",
    "user::r",
    ":4x4",
    "mapc",
    "function",
    "lambda",
    "user::j",
    "user::a",
    "send*",
    "list",
    "user::objects",
    "(list)",
    ":dump-command",
    "(list)",
    "\";; command : ~a~%\"",
    "let",
    ":inverse-kinematics",
    "\";; dump debug command to ~A~%\"",
    "\";; (progn (load \\\"~A\\\")(ik-setup)(ik-check))~%\"",
    ":if-exists",
    ":append",
    "\"(defun ~A-setup () (let ((r ~A)) (setq *robot* r) ~A (objects (list *robot*))))~%\"",
    "\"(defun ~A-check () (let ((r *robot*)) (send* r :inverse-kinematics ~A)))~%\"",
    "\"(defun ik-setup () (~A-setup))~%\"",
    "\"(defun ik-check () (~A-check))~%\"",
    "\"(setq ik-failed '(\"",
    "\"(:dif-pos . ~A) (:dif-rot . ~A~%)\"",
    "\"(:dif-cog . ~A)\"",
    "\"))~%\"",
    "#(:update-mass-properties)",
    ":cog-convergence-check",
    "#(:p-limit :tmp-v0 :tmp-v1 :tmp-v2 :tmp-v3)",
    "#(:r-limit :tmp-v0 :tmp-v1 :tmp-v2 :tmp-v3)",
    "#(:links)",
    ":descendants",
    ":child-links",
    "remove",
    "#(:mode :pairs :collision-func)",
    ":all",
    ":collision-check-pairs",
    ":first",
    "#(:ret :contact-rots)",
    "#(:move-target :link-list :move-joints-hook :additional-weight-list :constrained-joint-list :constrained-joint-angle-list :min-loop)",
    ":move-joints-hook",
    ":min-loop",
    "#(:interlocking-joint-pairs)",
    ":interlocking-joint-pairs",
    "remove-if-not",
    "#(:interlocking-joint-pairs)",
    "#(:interlocking-joint-pairs)",
    "\"Interlocking joint pairs.\n    pairs are (list (cons joint0 joint1) ... )\n    If users want to use interlocking joints, please overwrite this method.\"",
    "#(:angle-thre :interlocking-joint-pairs)",
    "identity",
    "every",
    "string=",
    "\":target-~d\"",
    "\":additional-~d\"",
    ":difference-position",
    ":difference-rotation",
    "\":target-~d\"",
    "\"\\\"~A\\\"\"",
    "(list)",
    ":link",
    "let*",
    "user::p",
    "user::mt",
    "string-upcase",
    "*keyword-package*",
    "user::outer-product-matrix",
    "(:x :xx)",
    "(:y :yy)",
    "(:z :zz)",
    "(:xy :yx)",
    "(:yz :zy)",
    "(:zx :xz)",
    "(:xm :ym :zm)",
    ":angle-to-speed",
    ":torso-waist-p",
    ":waist-p",
    "plusp",
    "#(:rotation-axis :translation-axis :fik)",
    "(t t)",
    "(t t)",
    ":col-offset",
    ":transform-coords",
    "remove-if",
    "#(:joint-class :joint-args :vplink :vplink-coords :vclink-coords)",
    "user::6dof-joint",
    "user::virtual-parent-link",
    "midcoords",
    "user::virtual-child-link",
    "make-cube",
    "#f(0.0 0.0 0.0)",
    ":inertia-tensor",
    "#(:joint-class :joint-args :vplink :vplink-coords :vclink-coords)",
    "(user::6dof-joint)",
    "(nil)",
    ":joint-class",
    ":joint-args",
    ":vplink",
    ":vplink-coords",
    ":vclink-coords",
    "cadddr",
    "if",
    "t",
    "mapcar",
    "user::m",
    "user::tc",
    "user::ta",
    "user::ra",
    "atom",
    "cond",
    "user::_limb",
    ":end-coords",
    "user::_move-target",
    "listp",
    "150",
    "10",
    "400",
    "user::virtual-link",
    "0",
    "0",
    "0",
    "0",
    "3",
    "3",
    "car",
    "instance*",
    "unwind-protect",
    "user::l",
    ":del-joint",
    ":del-parent-link",
    ":del-child-link",
    "user::tmp-new-move-target",
    "user::tmp-parent-link",
    "user::tmp-move-target",
    "\"root link should have no parent-link!! ~A ~A~%\"",
    "\"ass: \"",
    "reploop",
    "\"root link ~A should be :assoced with robot ~A!!~%\"",
    "\"ass: \"",
    "cdr",
    ":slots",
    ":joint-list",
    "\";; link(~A) = joint(=~A) + 1 <- for serial link manipulator!!~%\"",
    "\"ass: \"",
    "\"joint should have child-link derived from bodyset-link class ~A ~A\"",
    "\"ass: \"",
    "\"child-link should associated with parent-link ~A ~A\"",
    "\"ass: \"",
    "\"definition of child-link and parent-link should consistent in joints and links ~A ~A ~A\"",
    "\"ass: \"",
    "\"definition of child-link and parent-link should consistent in joints and links ~A ~A ~A\"",
    "\"ass: \"",
    ":unittest",
    "\"lib/llib/unittest.l\"",
    "require",
    "user::init-unit-test",
    "*exit-on-fatal-error*",
    "user::deftest",
    "user::eusmodel-validity-check-test",
    "user::eusmodel-validity-check-one",
    "user::run-all-tests",
    "\"USER\"",
    "\"USER\"",
    "*package*",
    "\"no such package\"",
    ":irtgeo",
    ":irtutil",
    ":pqp",
    ":global",
    ":super",
    "propertied-object",
    "(user::parent-link user::child-link user::joint-angle user::min-angle user::max-angle user::default-coords user::joint-velocity user::joint-acceleration user::joint-torque user::max-joint-velocity user::max-joint-torque user::joint-min-max-table user::joint-min-max-target)",
    ":metaclass",
    ":element-type",
    ":documentation",
    "make-class",
    "\"abstract class of joint, users need to use rotational-joint, linear-joint, sphere-joint, 6dof-joint, wheel-joint or omniwheel-joint.\n          use :parent-link/:child-link for specifying links that this joint connect to and :min/:min for range of joint angle in degree.\"",
    "\"If v is set, it updates min-angle of this instance. :min-angle returns minimal angle of this joint in degree.\"",
    "\"If v is set, it updates max-angle of this instance. :max-angle returns maximum angle of this joint in degree.\"",
    "\"Returns parent link of this joint. if any arguments is set, it is passed to the parent-link.\"",
    "\"Returns child link of this joint. if any arguments is set, it is passed to the child-link.\"",
    ":calc-dav-gain",
    "\"(self class dav i periodic-time)\"",
    "\"Returns Degree of Freedom of this joint.\"",
    "\"Returns values in deg/mm unit of input value in SI(rad/m) unit.\"",
    "\"Returns values in SI(rad/m) unit of input value in deg/mm unit.\"",
    "\"(self class &rest args)\"",
    "\"If jv is set, it updates joint-velocity of this instance. :joint-velocity returns velocity of this joint in SI(m/s, rad/s) unit.\"",
    "\"If ja is set, it updates joint-acceleration of this instance. :joint-acceleration returns acceleration of this joint in SI(m/$s^2$, rad/$s^2$) unit.\"",
    "\"If jt is set, it updates joint-torque of this instance. :joint-torque returns torque of this joint in SI(N, Nm) unit.\"",
    "\"If mjv is set, it updates min-joint-velocity of this instance. :min-joint-velocity returns velocity of this joint in SI(m/s, rad/s)  unit.\"",
    "\"If mjt is set, it updates min-joint-torque of this instance. :min-joint-torque returns velocity of this joint in SI(N, Nm) unit.\"",
    "\"(self class &optional mm-table)\"",
    "\"(self class &optional mm-target)\"",
    "\"(self class target-angle min-or-max)\"",
    "\"(self class &optional (target-angle (send joint-min-max-target :joint-angle)))\"",
    "\"(self class &optional (target-angle (send joint-min-max-target :joint-angle)))\"",
    "user::calc-jacobian-default-rotate-vector",
    "\"(paxis world-default-coords child-reverse transform-coords tmp-v3 tmp-m33)\"",
    "\"(fik row column joint paxis child-link world-default-coords child-reverse move-target transform-coords rotation-axis translation-axis tmp-v0 tmp-v1 tmp-v2 tmp-v3 tmp-v3a tmp-v3b tmp-m33)\"",
    "\"(fik row column joint paxis child-link world-default-coords child-reverse move-target transform-coords rotation-axis translation-axis tmp-v0 tmp-v1 tmp-v2 tmp-v3 tmp-v3a tmp-v3b tmp-m33)\"",
    "user::calc-angle-speed-gain-scalar",
    "\"(j dav i periodic-time)\"",
    "user::calc-angle-speed-gain-vector",
    "\"(j dav i periodic-time)\"",
    "user::rotational-joint",
    "(user::axis)",
    "\"create instance of rotational-joint. :axis is either (:x, :y, :z) or vector. :min-angle and :max-angle takes in radius, but velocity and torque are given in SI units.\"",
    "\"Return joint-angle if v is not set, if v is given, set joint angle. v is rotational value in degree.\"",
    "\"Returns DOF of rotational joint, 1.\"",
    "\"(self class dav i periodic-time)\"",
    "\"Returns degree of given input in radian\"",
    "\"Returns radian of given input in degree\"",
    "\"(self class &rest args)\"",
    "user::linear-joint",
    "(user::axis)",
    "\"Create instance of linear-joint. :axis is either (:x, :y, :z) or vector. :min-angle and :max-angle takes in [mm], but velocity and torque are given in SI units.\"",
    "\"return joint-angle if v is not set, if v is given, set joint angle. v is linear value in [mm].\"",
    "\"Returns DOF of linear joint, 1.\"",
    "\"(self class dav i periodic-time)\"",
    "\"Returns [mm] of given input in [m]\"",
    "\"Returns [m] of given input in [mm]\"",
    "\"(self class &rest args)\"",
    "user::wheel-joint",
    "(user::axis)",
    "\"Create instance of wheel-joint.\"",
    "\"return joint-angle if v is not set, if v is given, set joint angle. v is  joint-angle vector, which is  (float-vector translation-x[mm] rotation-z[deg])\"",
    "\"Returns DOF of linear joint, 2.\"",
    "\"(self class dav i periodic-time)\"",
    "\"Returns [mm/deg] of given input in SI unit [m/rad]\"",
    "\"Returns SI unit [m/rad] of given input in [mm/deg]\"",
    "\"(self class fik row column joint paxis child-link world-default-coords child-reverse move-target transform-coords rotation-axis translation-axis tmp-v0 tmp-v1 tmp-v2 tmp-v3 tmp-v3a tmp-v3b tmp-m33)\"",
    "user::omniwheel-joint",
    "(user::axis)",
    "\"create instance of omniwheel-joint.\"",
    "\"return joint-angle if v is not set, if v is given, set joint angle. v is joint-angle vector, which is (float-vector translation-x[mm] translation-y[mm] rotation-z[deg])\"",
    "\"Returns DOF of linear joint, 3.\"",
    "\"(self class dav i periodic-time)\"",
    "\"Returns [mm/deg] of given input in SI unit [m/rad]\"",
    "\"Returns SI unit [m/rad] of given input in [mm/deg]\"",
    "\"(self class fik row column joint paxis child-link world-default-coords child-reverse move-target transform-coords rotation-axis translation-axis tmp-v0 tmp-v1 tmp-v2 tmp-v3 tmp-v3a tmp-v3b tmp-m33)\"",
    "user::sphere-joint",
    "(user::axis)",
    "\"Create instance of sphere-joint. min/max are defiend as a region of angular velocity in degree.\"",
    "\"return joint-angle if v is not set, if v is given, set joint angle.\n     v is joint-angle vector [deg] by axis-angle representation, i.e (scale rotation-angle-from-default-coords[deg] axis-unit-vector)\"",
    ":joint-angle-rpy",
    "\"Return joint-angle if v is not set, if v is given, set joint-angle vector by RPY representation, i.e. (float-vector yaw[deg] roll[deg] pitch[deg])\"",
    "\"Returns DOF of linear joint, 3.\"",
    "\"(self class dav i periodic-time)\"",
    "\"Returns degree of given input in radian\"",
    "\"Returns radian of given input in degree\"",
    "\"(self class fik row column joint paxis child-link world-default-coords child-reverse move-target transform-coords rotation-axis translation-axis tmp-v0 tmp-v1 tmp-v2 tmp-v3 tmp-v3a tmp-v3b tmp-m33)\"",
    ":joint-euler-angle",
    "\"Return joint-angle if v is not set, if v is given, set joint-angle vector by euler representation.\"",
    "(user::axis)",
    "\"Create instance of 6dof-joint.\"",
    "\"Return joint-angle if v is not set, if v is given, set joint angle vector, which is 6D vector of 3D translation[mm] and 3D rotation[deg], i.e. (find-if #'(lambda (x) (eq (send (car x) :name) 'sphere-joint)) (documentation :joint-angle))\"",
    "\"Return joint-angle if v is not set, if v is given, set joint angle. v is joint-angle vector, which is 6D vector of 3D translation[mm] and 3D rotation[deg], for rotation, please see (find-if #'(lambda (x) (eq (send (car x) :name) 'sphere-joint)) (documentation :joint-angle-rpy))\"",
    "\"Returns DOF of linear joint, 6.\"",
    "\"(self class dav i periodic-time)\"",
    "\"Returns [mm/deg] of given input in SI unit [m/rad]\"",
    "\"Returns SI unit [m/rad] of given input in [mm/deg]\"",
    "\"(self class fik row column joint paxis child-link world-default-coords child-reverse move-target transform-coords rotation-axis translation-axis tmp-v0 tmp-v1 tmp-v2 tmp-v3 tmp-v3a tmp-v3b tmp-m33)\"",
    "bodyset",
    "(user::joint user::parent-link user::child-links user::analysis-level user::default-coords user::weight user::acentroid user::inertia-tensor user::angular-velocity user::angular-acceleration user::spacial-velocity user::spacial-acceleration user::momentum-velocity user::angular-momentum-velocity user::momentum user::angular-momentum user::force user::moment user::ext-force user::ext-moment)",
    "\"Create instance of bodyset-link.\"",
    "\"Returns a coordinates object which represents this coord in the world by concatenating all the cascoords from the root to this coords.\"",
    "\"Change analysis level :coords only changes kinematics level and :body changes geometry too.\"",
    "\"Returns a weight of the link. If w is given, set weight.\"",
    "\"Returns a centroid of the link. If c is given, set new centroid.\"",
    "\"Returns a inertia tensor of the link. If c is given, set new intertia tensor.\"",
    "\"Returns a joint associated with this link. If args is given, args are forward to the joint.\"",
    "\"Set j as joint of this link\"",
    "\"Remove current joint of this link\"",
    "\"Returns parent link\"",
    "\"Returns child links\"",
    "\"Add l to child links\"",
    "\"Set l as parent link\"",
    "\"Delete l from child links\"",
    "\"Delete parent link\"",
    ":default-coords",
    "\"(self class &optional c)\"",
    "(user::links user::joint-list user::bodies user::collision-avoidance-links user::end-coords-list)",
    "\"Create cascaded-link.\"",
    ":init-ending",
    "\"This method is to called finalize the instantiation of the cascaded-link. This update bodies and child-link and parent link from joint-list\"",
    "\"Returns links, or args is passed to links\"",
    "\"Returns joint list, or args is passed to joints\"",
    "\"Return a link with given name.\"",
    "\"Return a joint with given name.\"",
    "\"Returns end-coords with given name\"",
    "\"Return bodies of this object. If args is given it passed to all bodies\"",
    "\"Return faces of this object.\"",
    "\"(self class &rest args)\"",
    "\"Returns angle-vector of this object, if vec is given, it updates angles of all joint. If given angle-vector violate min/max range, the value is modified.\"",
    "\"(self class to &optional from)\"",
    "\"Find link list from to link to from link.\"",
    ":make-joint-min-max-table",
    "\"(self class l0 l1 joint0 joint1 &key (fat 0) (fat2 nil) (debug nil) (margin 0.0) (overwrite-collision-model nil))\"",
    "\"(self class l0 l1 joint0 joint1 joint-range0 joint-range1 min-joint0 min-joint1 fat fat2 debug margin)\"",
    "\"(self class joint0 joint1)\"",
    ":plot-joint-min-max-table",
    "\"Plot joint min max table on Euslisp window.\"",
    "\"(self class rotation-axis translation-axis)\"",
    "\"(self class link-list)\"",
    "\"(self class link-list)\"",
    "\"(self class jacobi &rest args &key ((:manipulability-limit ml) 0.1) ((:manipulability-gain mg) 0.001) weight debug-view ret wmat tmat umat umat2 mat-tmp mat-tmp-rc tmp-mrr tmp-mrr2 &allow-other-keys)\"",
    ":calc-gradh-from-link-list",
    "\"(self class link-list &optional (res (instantiate float-vector (length link-list))))\"",
    "\"Calculate jacobian matrix from link-list and move-target. Unit system is [m] or [rad], not [mm] or [deg].\"",
    "\"(self class union-vel &rest args &key angle-speed (angle-speed-blending 0.5) jacobi |JACOBI#| null-space |I-J#J| debug-view weight wmat tmp-len tmp-len2 fik-len &allow-other-keys)\"",
    "\"(self class union-link-list dav periodic-time)\"",
    ":collision-avoidance-links",
    "\"(self class &optional l)\"",
    "\"(self class link-lists &key obstacles ((:collision-avoidance-links collision-links) collision-avoidance-links) debug)\"",
    "\"(self class &rest args &key union-link-list (warnp t) ((:collision-avoidance-link-pair pair-list)) ((:collision-distance-limit distance-limit) 10) &allow-other-keys)\"",
    "\"(self class pair link-list)\"",
    "\"(self class &rest args &key avoid-collision-distance avoid-collision-joint-gain avoid-collision-null-gain ((:collision-avoidance-link-pair pair-list)) (union-link-list) (link-list) (weight) (fik-len (send self :calc-target-joint-dimension union-link-list)) debug-view &allow-other-keys)\"",
    "\"(self class union-vel &rest args &key union-link-list (periodic-time 0.05) (joint-args) (debug-view nil) (move-joints-hook) &allow-other-keys)\"",
    "\"(self class union-link-list)\"",
    "\"(self class union-link-list)\"",
    "\"(self class avoid-weight-gain fik-len link-list union-link-list debug-view weight tmp-weight tmp-len)\"",
    "\"(self class link-list &key (avoid-weight-gain 1.0) (union-link-list (send self :calc-union-link-list link-list)) (fik-len (send self :calc-target-joint-dimension union-link-list)) (weight (fill (instantiate float-vector fik-len) 1)) (additional-weight-list) (debug-view) (tmp-weight (instantiate float-vector fik-len)) (tmp-len (instantiate float-vector fik-len)))\"",
    "\"(self class avoid-nspace-gain union-link-list weight debug-view tmp-nspace)\"",
    "\"(self class link-list &key (avoid-nspace-gain 0.01) (union-link-list (send self :calc-union-link-list link-list)) (fik-len (send self :calc-target-joint-dimension union-link-list)) (null-space) (debug-view) (additional-nspace-list) (cog-gain 0.0) (target-centroid-pos) (centroid-offset-func) (cog-translation-axis :z) (cog-null-space nil) (weight (fill (instantiate float-vector fik-len) 1.0)) (update-mass-properties t) (tmp-nspace (instantiate float-vector fik-len)))\"",
    "\"(self class union-vel &rest args &key union-link-list link-list (fik-len (send self :calc-target-joint-dimension union-link-list)) (weight (fill (instantiate float-vector fik-len) 1)) (null-space) (avoid-nspace-gain 0.01) (avoid-weight-gain 1.0) (avoid-collision-distance 200) (avoid-collision-null-gain 1.0) (avoid-collision-joint-gain 1.0) ((:collision-avoidance-link-pair pair-list) (send self :collision-avoidance-link-pair-from-link-list link-list :obstacles (cadr (memq :obstacles args)) :debug (cadr (memq :debug-view args)))) (cog-gain 0.0) (target-centroid-pos) (centroid-offset-func) (cog-translation-axis :z) (cog-null-space nil) (additional-weight-list) (additional-nspace-list) (tmp-len (instantiate float-vector fik-len)) (tmp-len2 (instantiate float-vector fik-len)) (tmp-weight (instantiate float-vector fik-len)) (tmp-nspace (instantiate float-vector fik-len)) (tmp-mcc (make-matrix fik-len fik-len)) (tmp-mcc2 (make-matrix fik-len fik-len)) (debug-view) (jacobi) &allow-other-keys)\"",
    "\"(self class &rest args &key union-link-list rotation-axis translation-axis additional-jacobi-dimension &allow-other-keys)\"",
    "\"(self class)\"",
    "\":inverse-kinematics-loop is one loop calculation for :inverse-kinematics.\n    In this method, joint position difference satisfying workspace difference (dif-pos, dif-rot) are calculated and euslisp model joint angles are updated.\n    Optional arguments:\n     :additional-check\n       This argument is to add optional best-effort convergence conditions.\n       :additional-check should be function or lambda.\n       best-effort => In :inverse-kinematics-loop, 'success' is overwritten by '(and success additional-check)'\n                      In :inverse-kinematics, 'success is not overwritten.\n                      So, :inverse-kinematics-loop wait until ':additional-check' becomes 't' as possible,\n                      but ':additional-check' is neglected in the final :inverse-kinematics return.\n     :min-loop\n       Minimam loop count (nil by default).\n       If integer is specified, :inverse-kinematics-loop does returns :ik-continues and continueing solving IK.\n       If min-loop is nil, do not consider loop counting for IK convergence.\n    \"",
    "\"Move move-target to target-coords.\n   ;; target-coords, move-target, rotation-axis, translation-axis, link-list\n   ;; -> both list and atom OK.\n    target-coords : The coordinate of the target, or a function that returns coordinates. Use a list of targets to solve the IK relative to multiple end links simultaneously.\n    link-list : List of links to control. When the target-coords is list, this should be a list of lists.\n    move-target : Specify end-effector coordinate. When the target-coords is list, this should be list too.\n    stop : Maximum number for IK iteration. Default is 50.\n    debug-view : Set t to show debug message and visualization. Use :no-message to just show the irtview image. Default is nil.\n    warnp : Set nil to not display debug message when the IK failed. Default is t.\n    revert-if-fail : Set nil to keep the angle posture of IK solve iteration. Default is t, which return to original position when IK fails.\n    rotation-axis : Use nil for position only IK. :x, :y, :z for the constraint around axis with plus direction, :-x :-y :-z for axis with minus direction. :zz :yy :zz for direction free axis. :xm :ym :zm for allowing rotation with respect to mirror direction. When the target-coords is list, this should be list too. Default is t.\n    translation-axis : :x :y :z for constraint along the x, y, z axis. :xy :yz :zx for plane. Default is t.\n    thre : Threshold for position error to terminate IK iteration. Default is 1 [mm].\n    rthre : Threshold for rotation error to terminate IK iteration. Default is 0.017453 [rad] (1 deg).\n    check-collision : Set t to return false when self collision occurs at found IK solution. Default is nil. To avoid collision within IK loop, use set links to collision-avoidance-links slot of cascaded-link.\n    dump-command : should be t, nil, :always, :fail-only, :always-with-debug-log, or :fail-only-with-debug-log.\n    Log are success/fail log and ik debug information log.\n      t or :always           : dump log both in success and fail (for success/fail log).\n      :always-with-debug-log : dump log both in success and fail (for success/fail log and ik debug information log).\n      :fail-only             : dump log only in fail (for success/fail log).\n      :always-with-debug-log : dump log only in fail (for success/fail log and ik debug information log).\n      nil                    : do not dump log.\"",
    "\"(self class success dif-pos dif-rot rotation-axis translation-axis thre rthre centroid-thre target-centroid-pos centroid-offset-func cog-translation-axis &key (update-mass-properties t))\"",
    "\"(self class dif-pos translation-axis &rest args &key (p-limit 100.0) (tmp-v0 (instantiate float-vector 0)) (tmp-v1 (instantiate float-vector 1)) (tmp-v2 (instantiate float-vector 2)) (tmp-v3 (instantiate float-vector 3)) &allow-other-keys)\"",
    "\"(self class dif-rot rotation-axis &rest args &key (r-limit 0.5) (tmp-v0 (instantiate float-vector 0)) (tmp-v1 (instantiate float-vector 1)) (tmp-v2 (instantiate float-vector 2)) (tmp-v3 (instantiate float-vector 3)) &allow-other-keys)\"",
    "\"(self class &key ((:links ls) (cons (car links) (all-child-links (car links)))))\"",
    "\"(self class &key (mode :all) (pairs (send self :collision-check-pairs)) (collision-func 'pqp-collision-check))\"",
    ":calc-grasp-matrix",
    "\"Calc grasp matrix.\n      Grasp matrix is defined as\n       | E_3 0   E_3 0   ... |\n       | p1x E_3 p2x E_3 ... |\n    Arguments:\n      contact-points is list of contact points[mm].\n      contact-rots is list of contact coords rotation[rad].\n      If contact-rots is specified, grasp matrix as follow:\n       | R1    0  R2    0  ... |\n       | p1xR1 R1 p2xR2 R2 ... |\"",
    ":inverse-kinematics-for-closed-loop-forward-kinematics",
    "\"Solve inverse-kinematics for closed loop forward kinematics.\n    Move move-target to target-coords with link-list.\n    link-list loop should be close when move-target reachs target-coords.\n    constrained-joint-list is list of joints specified given joint angles in closed loop.\n    constrained-joint-angle-list is list of joint-angle for constrained-joint-list.\"",
    ":calc-jacobian-for-interlocking-joints",
    "\"Calculate jacobian to keep interlocking joint velocity same.\n    dtheta_0 = dtheta_1 => [... 0 1 0 ... 0 -1 0 .... ][...dtheta_0...dtheta_1...]\"",
    ":calc-vel-for-interlocking-joints",
    "\"Calculate 0 velocity for keeping interlocking joint at the same joint angle.\"",
    ":set-midpoint-for-interlocking-joints",
    "\"Set interlocking joints at mid point of each joint angle.\"",
    "\"(self class)\"",
    ":check-interlocking-joint-angle-validity",
    "\"Check if all interlocking joint pairs are same values.\"",
    "user::all-child-links",
    "\"(s &optional (pred #'identity))\"",
    "user::calc-dif-with-axis",
    "\"(dif axis &optional tmp-v0 tmp-v1 tmp-v2)\"",
    "user::calc-target-joint-dimension",
    "\"(joint-list)\"",
    "user::calc-joint-angle-min-max-for-limit-calculation",
    "\"(j kk jamm)\"",
    "user::joint-angle-limit-weight",
    "\"(j-l &optional (res (instantiate float-vector (calc-target-joint-dimension j-l))))\"",
    "user::joint-angle-limit-nspace",
    "\"(j-l &optional (res (instantiate float-vector (calc-target-joint-dimension j-l))))\"",
    "user::calc-jacobian-from-link-list-including-robot-and-obj-virtual-joint",
    "\"(link-list move-target obj-move-target robot &key (rotation-axis '(t t)) (translation-axis '(t t)) (fik (make-matrix (send robot :calc-target-axis-dimension rotation-axis translation-axis) (send robot :calc-target-joint-dimension link-list))))\"",
    "user::append-obj-virtual-joint",
    "\"(link-list target-coords &key (joint-class 6dof-joint) (joint-args) (vplink) (vplink-coords) (vclink-coords))\"",
    "user::append-multiple-obj-virtual-joint",
    "\"(link-list target-coords &key (joint-class '(6dof-joint)) (joint-args '(nil)) (vplink) (vplink-coords) (vclink-coords))\"",
    "user::with-difference-position-and-rotation",
    "\"(params &rest args)\"",
    "user::with-difference-positions-and-rotations",
    "\"(params &rest args)\"",
    "user::with-move-target-link-list",
    "\"(params &rest bodies)\"",
    "user::with-append-root-joint",
    "\"(params &rest bodies)\"",
    "user::with-assoc-move-target",
    "\"(params &rest bodies)\"",
    "\"(robot)\"",
    "user::eusmodel-validity-check",
    "\"Check if the robot model is validate\"",
    "\"GEOMETRY\"",
    "\"GEOMETRY\"",
    "\"no such package\"",
    ":irtmodel",
    "\"$Id$\"",
    "provide",
  };
