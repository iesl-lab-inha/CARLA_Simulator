static pointer FLET117();
static pointer CLO356();
static pointer CLO365();
static pointer CLO358();
static pointer CLO361();
static pointer CLO374();
static pointer CLO375();
static pointer CLO376();
static pointer CLO394();
static pointer CLO415();
static pointer FLET427();
static pointer CLO436();
static pointer CLO428();
static pointer CLO453();
static pointer CLO454();
static pointer (*ftab[36])();

#define QUOTE_STRINGS_SIZE 272
static char *quote_strings[QUOTE_STRINGS_SIZE]={
    ":pos",
    ":worldpos",
    "midpoint",
    ":rot",
    ":worldrot",
    "user::midrot",
    "make-coords",
    ":rotate-vector",
    ":x",
    "#f(1.0 0.0 0.0)",
    ":y",
    "#f(0.0 1.0 0.0)",
    ":z",
    "#f(0.0 0.0 1.0)",
    "#(:translation-axis)",
    ":inverse-transform-vector",
    "(:x :xx)",
    "(:y :yy)",
    "(:z :zz)",
    "(:xy :yx)",
    "(:yz :zy)",
    "(:zx :xz)",
    "#(:rotation-axis)",
    "(:x :y :z)",
    ":axis",
    "acos",
    "normalize-vector",
    "(:xx :yy :zz)",
    ":xx",
    ":yy",
    ":zz",
    "(:xm :ym :zm)",
    ":xm",
    ":ym",
    ":zm",
    "user::matrix-log",
    "nil",
    ":local",
    "coordinates-p",
    "\"coordinates expected for :move-to\"",
    "(:local local)",
    ":newcoords",
    "(:parent parent :world world)",
    "*world-coords*",
    ":worldcoords",
    ":parentcoords",
    ":inverse-transformation",
    "(:local local)",
    "(:parent parent :world world)",
    ":error",
    "\":transform wrt?\"",
    "(local :local)",
    "(parent :parent world :world)",
    "\":transform wrt?\"",
    ":transform",
    ":transformation",
    ":replace-coords",
    ":update",
    "(:local local)",
    "(:parent parent)",
    "super",
    "(world :world)",
    "\":transform wrt?\"",
    "(:local local)",
    "(:parent parent)",
    "(world :world)",
    "\":transform wrt?\"",
    "\"coordinates expected for :move-to\"",
    "(:local local)",
    "(:parent parent)",
    "(:world world)",
    ":dimension",
    "coordinates",
    "unit-matrix",
    "float-vector",
    "user::rotm3*",
    ":inverse-rotate-vector",
    "*epsilon*",
    "#f(1.0 0.0 0.0)",
    ":-x",
    "#f(-1.0 0.0 0.0)",
    "#f(0.0 1.0 0.0)",
    ":-y",
    "#f(0.0 -1.0 0.0)",
    "#f(0.0 0.0 1.0)",
    ":-z",
    "#f(0.0 0.0 -1.0)",
    "eps=",
    "#f(1.0 0.0 0.0)",
    "#f(0.0 1.0 0.0)",
    ":rotate",
    ":world",
    "#(:name :bodies)",
    "\"bodyset~A\"",
    "\"KEYWORD\"",
    "send-message",
    ":init",
    ":name",
    ":copy-worldcoords",
    ":assoc",
    "user::forward-message-to-all",
    ":faces",
    "send-all",
    "flatten",
    "send",
    ":draw-on",
    ":edges",
    "face",
    ":holes",
    ":vertices",
    ":normal",
    "make-face-from-vertices",
    "remove",
    "every",
    "edge",
    ":pvertex",
    ":nvertex",
    ":inside",
    ":insidep",
    "make-line",
    ":intersect-line",
    ":parallel",
    ":outside",
    ":intersect",
    "eps-in-range",
    "cons",
    "user::mapjoin",
    "position",
    "\";; geo::face-ear-clipping could not find `mutually visible vertices' for ~A~%\"",
    "warn",
    "pvert",
    "nvert",
    "*triangle-points*",
    "*triangle-edges*",
    "faceset",
    ">=",
    "find-extream",
    ":length",
    ":test",
    "v=",
    "set-exclusive-or",
    "\";; Error wrong vs ~A~%\"",
    ":point",
    "equal",
    "member",
    "make-icosahedron",
    "make-gdome",
    ":csg",
    ":sphere",
    "#(:segments)",
    "make-torus",
    ":segments",
    "#(:segments :angle :mid-angle)",
    "make-list",
    ":primitive",
    ":cylinder",
    "make-prism",
    ":cube",
    "assoc",
    "matrixp",
    "array-dimensions",
    "(3 3)",
    "\"3x3 matrix is required~A\"",
    "user::atan2",
    "\"\"",
    "\"\"",
    "asin",
    "\"\"",
    "\"\"",
    "\"\"",
    "\"\"",
    "\"\"",
    "\"\"",
    "\"\"",
    ":irtmath",
    "require",
    "\"GEOMETRY\"",
    "\"GEOMETRY\"",
    "*package*",
    "\"no such package\"",
    "(body-to-faces body-to-triangles midcoords orient-coords-to-axis bodyset *g-vec* make-sphere make-ring make-fan-cylinder x-of-cube y-of-cube z-of-cube height-of-cylinder radius-of-cylinder radius-of-sphere matrix-to-euler-angle)",
    "*g-vec*",
    ":vtype",
    ":global",
    "midcoords",
    "\"Returns mid (or p) coordinates of given two cooridnates c1 and c2\"",
    "line",
    "\"Return a coordinates on the midpoint of the end points\"",
    "\"(self class axis)\"",
    ":difference-position",
    "\"return diffece in positoin of given coords, translation-axis can take (:x, :y, :z, :xy, :yz, :zx).\"",
    ":difference-rotation",
    "\"return diffece in rotation of given coords, rotation-axis can take (:x, :y, :z, :xx, :yy, :zz, :xm, :ym, :zm)\"",
    ":move-to",
    "\"(self class c &optional (wrt :local) &aux cc)\"",
    "\"(self class c2 &optional (wrt :local))\"",
    "\"(self class c &optional (wrt :local))\"",
    ":move-coords",
    "\"fix 'at' coords on 'self' to 'target'\"",
    "cascaded-coords",
    "\"(self class)\"",
    "\"(self class c2 &optional (wrt :local))\"",
    "\"(self class c &optional (wrt :local))\"",
    "\"(self class c &optional (wrt :local) &aux cc)\"",
    "transform-coords",
    "\"(c1 c2 &optional (c3 (let ((dim (send c1 :dimension))) (instance coordinates :newcoords (unit-matrix dim) (instantiate float-vector dim)))))\"",
    "\"(self class v &optional r)\"",
    "\"(self class v &optional r)\"",
    "\"(self class v &optional r)\"",
    "\"(self class v &optional r)\"",
    "\"(self class vec &optional v3a v3b m33)\"",
    "\"(self class v &optional v3a v3b m33)\"",
    "orient-coords-to-axis",
    "\"orient 'axis' in 'target-coords' to the direction specified by 'v' destructively.\n   'v' must be non-zero vector.\"",
    "bodyset",
    ":super",
    ":slots",
    "((bodies :type cons))",
    ":metaclass",
    ":element-type",
    ":size",
    ":documentation",
    "make-class",
    "\"Create bodyset object\"",
    ":bodies",
    "\"(self class &rest args)\"",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class &rest args)\"",
    "face-to-triangle-aux",
    "\"triangulate the face.\"",
    "face-to-triangle",
    "\"convert face to set of triangles.\"",
    "face-to-tessel-triangle",
    "\"return polygon if triangable, return nil if it is not.\"",
    "face-to-triangle-rest-polygon",
    "\"(f num edgs)\"",
    "face-to-triangle-make-simple",
    "\"(f)\"",
    "body-to-faces",
    "\"return triangled faces of given body\"",
    "body-to-triangles",
    "\"(abody &optional (limit 50))\"",
    "triangle-to-triangle",
    "\"(aface &optional (limit 50))\"",
    "make-sphere",
    "\"make sphere of given r\"",
    "make-ring",
    "\"make ring of given ring and pipe radius\"",
    "make-fan-cylinder",
    "\"make a cylinder whose base face is a fan. the angle of fan\n   is defined by :angle keyword. and, the csg of the returned body is\n   (:cylinder radius height segments angle)\"",
    "x-of-cube",
    "\"return x of cube.\"",
    "y-of-cube",
    "\"return y of cube.\"",
    "z-of-cube",
    "\"return z of cube.\"",
    "height-of-cylinder",
    "\"return height of cylinder.\"",
    "radius-of-cylinder",
    "\"return radius of cylinder.\"",
    "radius-of-sphere",
    "\"return radius of shape.\"",
    "make-faceset-from-vertices",
    "\"create faceset from vertices.\"",
    "matrix-to-euler-angle",
    "\"return euler angle from matrix.\"",
    "quaternion-from-two-vectors",
    "\"Comupute quaternion which rotate vector a into b.\"",
    ":irtgeo",
    "\"$Id$\"",
    "provide",
  };
