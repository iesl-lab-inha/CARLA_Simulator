static pointer CLO2828();
static pointer (*ftab[29])();

#define QUOTE_STRINGS_SIZE 196
static char *quote_strings[QUOTE_STRINGS_SIZE]={
    "\":signal should be defined in lower class~%\"",
    "warn",
    "\":simulate should be defined in lower class~%\"",
    "\":draw-sensor should be defined in lower class~%\"",
    "#(:name)",
    "replace-object",
    ":name",
    "#(:bumper-threshold :name)",
    "send-message",
    "super",
    ":init",
    "some",
    ":draw-sensor",
    ":face-color",
    ":backup-color",
    ":set-color",
    ":red",
    "gl::draw-glbody",
    "pqp-collision-distance",
    "#(:width :height :view-up :viewdistance :hither :yon)",
    "#f(0.0 1.0 0.0)",
    "perspective-viewing",
    "send",
    ":pos",
    ":worldpos",
    ":target",
    ":transform-vector",
    ":worldrot",
    "matrix-column",
    ":view-up",
    ":viewdistance",
    ":hither",
    ":yon",
    ":screen",
    ":assoc",
    ":newprojection",
    "make-matrix",
    "user::*irtviewer*",
    "user::make-irtviewer",
    ":x",
    ":y",
    ":viewing",
    ":viewsurface",
    "gl:glviewsurface",
    ":create",
    ":glcon",
    ":viewer",
    "gl::glcon",
    ":title",
    "\"~A_view\"",
    ":width",
    ":height",
    "\"~A_view\"",
    "view",
    ":makecurrent",
    "gl:lightsource",
    ":ambient",
    ":diffuse",
    ":specular",
    ":position",
    ":opengl",
    "user:forward-message-to",
    ":projection",
    "user::atan2",
    ":project3",
    ":inverse-transform-vector",
    ":rotate-vector",
    "normalize-vector",
    "#(:viewer)",
    "*viewer*",
    "#(:flush :width :color)",
    ":line-width",
    ":color",
    ":viewpoint",
    "gl:gldisable",
    ":3d-line",
    ":view-direction",
    "gl:glenable",
    ":flush",
    ":create-viewer",
    ":draw-objects-raw",
    "x::draw-things",
    "gl:glviewport",
    "gl:glmatrixmode",
    "gl:glloadidentity",
    "float-vector",
    ":fovy",
    "gl:glmultmatrixd",
    "vector",
    "gl:glulookatfv",
    ":clear",
    ":draw",
    "find-method",
    "faceset",
    ":draw-on",
    "\"Unknown body to draw ~A~%\"",
    "#(:with-points :with-colors)",
    ":get-image-raw",
    ":points",
    ":colors",
    "user::pointcloud",
    "#(:points :colors)",
    ":cx",
    ":cy",
    "\";; width: %d /= %d or height: %d /= %d~%\"",
    ":element-type",
    ":float",
    "make-array",
    "fill",
    ":getglimage",
    ":depthbuf",
    ":entity",
    ":byte",
    ":gl-hiddenline",
    ":gl-displaylist-id",
    "gl::delete-displaylist-id",
    "hid",
    "#(:pwidth :pheight :fx :fy :cx :cy :tx :ty :parent-coords :name :create-viewer)",
    "make-cube",
    "make-cylinder",
    ":rotate",
    "body+",
    "user::camera-model",
    "user::vwing",
    ":newcoords",
    ":copy-worldcoords",
    ":translate",
    "\"USER\"",
    "\"USER\"",
    "*package*",
    "\"no such package\"",
    "user::sensor-model",
    ":global",
    ":super",
    "body",
    ":slots",
    "(user::data user::profile)",
    ":metaclass",
    ":size",
    ":documentation",
    "make-class",
    ":profile",
    "\"(self class &optional p)\"",
    ":signal",
    "\"(self class rawinfo)\"",
    ":simulate",
    "\"(self class model)\"",
    ":read",
    "\"(self class)\"",
    "\"(self class v)\"",
    "\"(self class shape &key name &allow-other-keys)\"",
    "user::bumper-model",
    "(user::bumper-threshold)",
    "\"Create bumper model, b is the shape of an object and bt is the threshold in distance[mm].\"",
    "\"Simulate bumper, with given objects, return 1 if the sensor detects an object and 0 if not.\"",
    "\"(self class vwer)\"",
    "\"(self class vwer)\"",
    "((user::vwing :forward (:projection :newprojection :screen :view :viewpoint :view-direction :viewdistance :yon :hither)) user::img-viewer user::pwidth user::pheight)",
    "\"Create camera model. b is the shape of an object\"",
    "\"Create camera viewer, or set viewer\"",
    "\"Returns width of the camera in pixel.\"",
    "\"Returns height of the camera in pixel.\"",
    "\"(self class &rest args)\"",
    ":image-viewer",
    "\"(self class &rest args)\"",
    "\"Returns field of view in degree\"",
    "\"Returns center x.\"",
    "\"Returns center y.\"",
    ":fx",
    "\"Returns focal length of x.\"",
    ":fy",
    "\"Returns focal length of y.\"",
    ":screen-point",
    "\"Returns point in screen corresponds to the given pos.\"",
    ":3d-point",
    "\"Returns 3d position\"",
    ":ray",
    "\"Returns ray vector of given x and y.\"",
    "\"Draw camera raw in irtviewer, ex (send cam :draw-on :flush t)\"",
    "\"(self class vwer &key flush (width 1) (color (float-vector 1 1 1)))\"",
    ":draw-objects",
    "\"Draw objects in camera viewer, expected type of objs is list of objects\"",
    "\"(self class vwr objs)\"",
    ":get-image",
    "\"Get image objects you need to call :draw-objects before calling this function\"",
    "\"(self class vwr &key (points) (colors))\"",
    ":select-drawmode",
    "\"Change drawmode for drawing with :draw-objects methods. mode is symbol of mode, 'hid is symbol for hidden line mode, the other symbols indicate default mode. objs is the same objects using :draw-objects.\"",
    "user::make-camera-from-param",
    "\"Create camera object from given parameters.\"",
    "\"GEOMETRY\"",
    "\"GEOMETRY\"",
    "\"no such package\"",
    ":irtsensor",
    "\"$Id: $\"",
    "provide",
  };
