static pointer CLO2080();
static pointer CLO2082();
static pointer CLO2084();
static pointer CLO2088();
static pointer CLO2102();
static pointer CLO2103();
static pointer CLO2105();
static pointer CLO2181();
static pointer CLO2214();
static pointer CLO2303();
static pointer (*ftab[26])();

#define QUOTE_STRINGS_SIZE 229
static char *quote_strings[QUOTE_STRINGS_SIZE]={
    ">",
    "triangle",
    "<",
    ":count",
    "delete",
    "#f(0.0 0.0 1.0)",
    "<=",
    ">=",
    "triangle-normal",
    "*coplanar-threshold*",
    "*epsilon*",
    "eps=",
    ":vertices",
    "*-inf*",
    "*nan*",
    "\";; cot=~s v=~s vk=~s d=~s/~s~%\"",
    ":nan",
    "*maxcot*",
    "*face-class*",
    "last",
    "intersection",
    "*edge-class*",
    ":init",
    ":pvertex",
    ":nvertex",
    ":pface",
    ":set-face",
    ":edges",
    "car",
    "\";; inner points ~s found~%\"",
    "*bad-vertices*",
    "*vertices*",
    "vector-angle",
    "#f(0.0 0.0 1.0)",
    "#f(0.0 0.0 1.0)",
    "#f(0.0 0.0 1.0)",
    "remove",
    "pface",
    "nface",
    "*points*",
    "list",
    "*colinears*",
    "*faces*",
    ":distance",
    "*error-output*",
    "\"bad point ~A deleted, distance=~A~%\"",
    "*e*",
    "*f*",
    "\"bad edge\"",
    ":normal",
    ":binormal",
    "set-difference",
    ":key",
    "find",
    "\"~%re-searched edge:~A~%\"",
    "\"thd:~A->~A~%\"",
    "\"edgeq error!!\"",
    "*debug*",
    "append",
    "send-all",
    "remove-duplicates",
    "*edges*",
    "*body-class*",
    ":faces",
    ":primitive",
    ":convex-hull",
    "*body*",
    ":id",
    ":side",
    "#(:primitive)",
    ":prism",
    ":top",
    ":bottom",
    "send",
    ":approximated",
    "#(:segments :&allow-other-keys :&aux)",
    ":z",
    ":cone",
    "abs",
    "aref",
    "0",
    "0.001",
    "#(:segments)",
    "\"illegal contour\"",
    "flatten",
    ":revolution",
    "#(:segments)",
    ":torus",
    "#(:segments :circumscribed)",
    "make-prism",
    ":cylinder",
    "make-line",
    ":center-axis",
    ":cube",
    ":get-face",
    "(:-x :-y :x :y)",
    ":csg",
    ":icosahedron",
    "vector-mean",
    "*dodeca-points*",
    ":dodecahedron",
    ":test",
    "equal",
    "make-hash-table",
    "vertices",
    "sethash",
    "edges",
    "pvert",
    "nvert",
    "faces",
    "gethash",
    "normal",
    ":gdome",
    "assoc",
    ":body-from-vertices",
    ":transform-vector",
    "replace",
    ":update",
    "fourth",
    "fifth",
    "sixth",
    "send-message",
    "super",
    "coords",
    "coordinates-axes",
    ":assoc",
    "\"GEOMETRY\"",
    "\"GEOMETRY\"",
    "*package*",
    "\"no such package\"",
    "(find-extream leftmost-point rightmost-point left-points right-points quickhull-left quickhull-right quickhull find-coplanar-vertices colinear-p find-colinear-points remove-colinears-from-circuit coplanar-p *-inf* *inf* *nan* gift-wrapping make-face-from-vertices make-face-from-coplanar-vertices convex-hull-3d make-prism make-cone make-solid-of-revolution make-torus make-cylinder make-cube make-icosahedron make-dodecahedron make-gdome make-body-from-vertices)",
    "(coordinates-axes)",
    "find-extream",
    "\"(vertices key test)\"",
    "leftmost-point",
    "\"(vertices p1 p2 normal)\"",
    "rightmost-point",
    "\"(vertices p1 p2 normal)\"",
    "left-points",
    "\"(points p1 p2 normal)\"",
    "right-points",
    "\"(points p1 p2 normal)\"",
    "quickhull-left",
    "\"(s l r normal)\"",
    "quickhull-right",
    "\"(s l r normal)\"",
    "quickhull",
    "\"(s &optional (normal #f(0.0 0.0 1.0)))\"",
    "find-coplanar-vertices",
    "\"(p1 p2 p3 s)\"",
    "colinear-p",
    "\"(p1 p2 p3 &optional (*epsilon* *coplanar-threshold*))\"",
    "find-colinear-points",
    "\"(points)\"",
    "remove-colinears-from-circuit",
    "\"(circuit)\"",
    "coplanar-p",
    "\"(p1 p2 p3 p4 &optional (*epsilon* *coplanar-threshold*))\"",
    ":global",
    "*inf*",
    "gift-wrapping",
    "\"(f p n a s)\"",
    "make-face-from-vertices",
    "\"ARG = (vertices)\nvertices= list of (#f(x y z) edge1 edge2 ...)\"",
    "make-face-from-coplanar-vertices",
    "\"(p1 p2 p3 s)\"",
    "tangent-foot",
    "\"(p1 p2 p3)\"",
    "calc-p2-of-lowest-hull",
    "\"ARGS=(p1 s)\"",
    "calc-p3-of-lowest-hull",
    "\"ARGS=(p1 p2 s)\"",
    "find-initial-hull",
    "\"(s)\"",
    "enclosed-vertexp",
    "\"(v)\"",
    "convex-hull-3d",
    "\"ARGS = (vertices)\nCreate a body of convex-hull from a list of vertices\"",
    "rotate-vertices",
    "\"(vertex count angle axis)\"",
    "make-side-faces",
    "\"(tops bottoms &optional index)\"",
    "\"ARGS = (bottom-points sweep-vector \n	&key color name primitive)\"",
    "make-conic-side-faces",
    "\"(top-vertex bottom-vertices &optional index)\"",
    "make-cone",
    "\"make-cone (top bottoms &key segments color name)\"",
    "on-z-axis-p",
    "\"(v)\"",
    "make-solid-of-revolution",
    "\"ARGS = (points &key segments color name)\"",
    "make-torus",
    "\"ARGS = points &key segments color name\"",
    "make-cylinder",
    "\"MAKE-CYLINDER radius height (:segments 12) (:circumscribed nil) :color :name\"",
    "make-cube",
    "\"MAKE-CUBE x y z &key color name\"",
    "icosahedron-points",
    "\"(&optional (radius 1.0))\"",
    "make-icosahedron",
    "\"MAKE-ICOSAHEDRON &optional (radius 1.0)\"",
    "subdivide-facet",
    "\"(normal oldverts newverts)\"",
    "make-dodecahedron",
    "\"(&optional (radius 1.0))\"",
    "make-gdome",
    "\"MAKE-GDOME hedron\nhedron is an icosahedron or a gdome of lower level\"",
    "make-body-from-vertices",
    "\"(face-vertices &optional (klass *body-class*))\"",
    ":super",
    "cascaded-coords",
    ":slots",
    "(size model-points points lines)",
    ":metaclass",
    ":element-type",
    ":size",
    ":documentation",
    "make-class",
    "\"(self class)\"",
    ":magnify",
    "\"(self class r)\"",
    ":drawners",
    "\"(self class)\"",
    "\"(self class sz &rest args)\"",
    "assoc-coordinates-axes",
    "\"(casc &optional (size 1) (where (coords)))\"",
    ":primt",
    "\"@(#)$Id$\"",
    "provide",
  };
