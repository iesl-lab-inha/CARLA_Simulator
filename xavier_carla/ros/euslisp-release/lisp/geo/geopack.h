static pointer FLET366();
static pointer CLO859();
static pointer (*ftab[19])();

#define QUOTE_STRINGS_SIZE 506
static char *quote_strings[QUOTE_STRINGS_SIZE]={
    "float-vector",
    "#f(0.0 0.0 1.0)",
    ":z",
    ":y",
    "edge",
    "face",
    "body",
    ":primitive-body-p",
    "*epsilon*",
    "coordinates-distance",
    ":grow",
    "midpoint",
    "super",
    ":prin1",
    "\"~s/~s\"",
    "bounding-box",
    ":init2",
    "#f(0.0 0.0 1.0)",
    ":extream-point",
    "expt",
    "make-prism",
    "vmin",
    "vmax",
    "*contact-threshold*",
    ":init",
    ":box",
    ":intersection",
    ":union",
    ":intersection-p",
    "#(:pvertex :nvertex)",
    "make-string-output-stream",
    "\"#f(\"",
    "\"~3,2f \"",
    "\")\"",
    "get-output-stream-string",
    "*parallel-threshold*",
    ":parallel",
    ":point",
    ":foot",
    "pvert",
    "nvert",
    ":distance-point",
    "float-vector-p",
    "line",
    ":distance-line",
    "*coplanar-threshold*",
    "colinear-p",
    ":colinear-point",
    ":parameter",
    "coplanar-p",
    ":project",
    ":outside",
    ":colinear",
    ":intersect",
    ":pvertex",
    ":nvertex",
    "\"bad face\"",
    "\"bad face\"",
    ":next-edge",
    ":holes",
    ":edges",
    ":direction",
    "\"hole for :direction\"",
    "\"hole for :direction\"",
    ":normal",
    ":previous-edge",
    ":body",
    "\"inconsistent pvert and nvert for :pface\"",
    "\"inconsistent pvert and nvert for :nface\"",
    "\"no such face\"",
    "warn",
    ":error",
    "\"bad face\"",
    ":distance",
    "\"inconsistent face setting\"",
    ":common-perpendicular",
    "*vertex-neighborhood-threshold*",
    ":anothervertex",
    "normal",
    "*norm-threshold*",
    ":color",
    "#(:pface :nface :angle :approximated :flags)",
    "send-message",
    ":set-approximated-flag",
    "#f(1.0 0.0 0.0)",
    "#f(0.0 1.0 0.0)",
    "#f(1.0 0.0 0.0)",
    "coordinates",
    ":rot",
    "matrix",
    ":pos",
    ":all-edges",
    "\"pwing?\"",
    "\"pcwing?\"",
    "\"nwing?\"",
    "\"ncwing?\"",
    "\"not connected\"",
    "\"no such face\"",
    "winged-edge",
    ":pwing",
    ":nwing",
    ":pcwing",
    ":ncwing",
    "#(:pwing :nwing :pcwing :ncwing)",
    ":plane-distance",
    "\";; intersect-border~%\"",
    "minusp",
    "\"float or float-vector expected\"",
    "last",
    "signum",
    ":insidep",
    "(:inside :parallel)",
    "min",
    "send-all",
    "(:inside :parallel)",
    "+",
    ":length",
    "#f(0.0 0.0 0.0)",
    ":area",
    ":border",
    ":inside",
    ":on-vertex",
    "(:parallel)",
    "(:outside)",
    "(:inside :border)",
    ":intersect-line",
    ":intersect-edge",
    ":inverse-transformation",
    ":set-convexp",
    "#(:vertices :edges :normal :distance)",
    ":face",
    "*edge-class*",
    ":pface",
    ":reset-normal",
    ":on-line-point",
    "(:inside :parallel)",
    "member",
    ":inner",
    "(:inside :border)",
    ":included",
    ":vertices",
    "(:inside :border)",
    ":including",
    ":boxtest",
    ":coplanar-intersections",
    ":contact-point",
    ":contact-edge",
    "plane",
    ":contact-plane",
    "(:inside :parallel)",
    "(:inside :parallel)",
    ":centroid",
    "scale",
    "car",
    "nconc",
    ":on-edge",
    ":invert",
    ":transform-normal",
    "append",
    ":csg",
    ":body-type",
    "\"\"",
    ":copied-primitive",
    "#(:normal :distance :edges :vertices :holes :id :body :primitive-face)",
    ":reflectance",
    ":diffusion",
    ":contact",
    "adjoin",
    "#(:normal :distance :edges :vertices :face)",
    "#(:normal :point :distance)",
    "polygon",
    "\"GEOMETRY\"",
    "\"GEOMETRY\"",
    "*package*",
    "\"no such package\"",
    ":geoclasses",
    "\"geoclasses.l\"",
    "require",
    "(*bodies* *parallel-threshold* *coplanar-threshold* *epsilon* *contact-threshold* *vertex-neighborhood-threshold* *norm-threshold* vplus vector-mean direction-vector triangle triangle-normal vector-angle face-normal-vector farthest farthest-pair maxindex random-vector random-normalized-vector random-vectors edgep facep bodyp primitive-body-p n^2 eps= eps< eps> eps<= eps>= eps<> eps-zero eps-in-range eps-v= eps-coords= make-bounding-box make-big-bounding-box bounding-box-intersection bounding-box-union edgep make-line winged-edge-p *edge-class* *face-class* *hole-class* *body-class* make-plane *xy-plane* *yz-plane* *zx-plane* make-polygon)",
    ":vtype",
    ":global",
    "*face-class*",
    "*body-class*",
    "*bodies*",
    ":special",
    "(float *parallel-threshold* *coplanar-threshold* *epsilon* *contact-threshold*)",
    "vplus",
    "\"returns a newly created float-vector that is the sum of all the elements of vector-list. The difference from v+ is that vplus computes the sum of more than two arguments and no result vector can be specified\"",
    "vector-mean",
    "\"returns the mean vector of vector-list.\"",
    "direction-vector",
    "\"(org dest) returns a normalized vector from org to dest\"",
    "triangle-temp1",
    "triangle-temp2",
    "triangle",
    "\"(triangle a b c [normal #f(0 0 1)])\na,b,c are floatvectors representing 2 or 3 dimensional points.\nNormal is the normal vector of the plane on which a,b and c lie.\nTriangle returns 2*area of a triangle constructed by a,b,c.\nTriangle is positive if a,b,c turn counter-clockwise.\nIn other words, if triangle is positive, c locates at the\nleft hand side of line a-b, and b lies at the right side of ac.\"",
    "triangle-normal",
    "\"normal vector for the plane on which three points (a b c) lie.\"",
    "vector-angle",
    "\"Compute angle (radian) between two vectors, v1 and v2.\nNormal is vertical to both v1 and v2.\nv1, v2 and normal must be normalized in advance.\nNormal must be given if the sign of the angle is needed.\"",
    "face-normal-vector",
    "\"(vertices)\"",
    "farthest",
    "\"(p points)\"",
    "farthest-pair",
    "\"(points)\"",
    "maxindex",
    "\"(fv)\"",
    "random-vector",
    "\"(&optional (range 1.0))\"",
    "random-normalized-vector",
    "\"nil\"",
    "random-vector2",
    "\"(&optional (s (random 1.0)))\"",
    "random-vectors",
    "\"(n r)\"",
    "edgep",
    "\"(x)\"",
    "facep",
    "\"(x)\"",
    "bodyp",
    "\"(x)\"",
    "primitive-body-p",
    "\"(x)\"",
    "n^2",
    "\"(n)\"",
    "eps=",
    "\"(m n &optional (eps *epsilon*))\"",
    "eps<",
    "\"(m n &optional (eps *epsilon*))\"",
    "eps>",
    "\"(m n &optional (eps *epsilon*))\"",
    "eps<=",
    "\"(m n &optional (eps *epsilon*))\"",
    "eps>=",
    "\"(m n &optional (eps *epsilon*))\"",
    "eps<>",
    "\"(m n &optional (eps *epsilon*))\"",
    "eps-zero",
    "\"(n &optional (eps *epsilon*))\"",
    "eps-in-range",
    "\"(a b c &optional (eps *epsilon*))\"",
    "eps-v=",
    "\"(v1 v2 &optional (eps *epsilon*))\"",
    "eps-coords=",
    "\"(c1 c2 &optional (th1 *epsilon*) (th2 th1) &aux (d (coordinates-distance c1 c2)))\"",
    "surrounding-box",
    "\"(self class &optional tol)\"",
    ":minpoint",
    "\"(self class)\"",
    ":maxpoint",
    "\"(self class)\"",
    ":center",
    "\"(self class)\"",
    ":diagonal",
    "\"(self class)\"",
    "\"(self class &optional (strm t))\"",
    "\"(self class point)\"",
    "\"(self class box &optional (tolerance))\"",
    "\"(self class box &optional (tolerance))\"",
    "\"(self class box)\"",
    "\"(self class s &optional (abs nil))\"",
    ":volume",
    "\"(self class)\"",
    "\"(self class dir)\"",
    ":below",
    "\"(self class box2 &optional (dir #f(0.0 0.0 1.0)))\"",
    ":corners",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class v1 v2 &optional tolerance)\"",
    "\"(self class v &optional (tolerance))\"",
    "make-bounding-box",
    "\"(vlist &optional (tolerance *contact-threshold*))\"",
    "make-big-bounding-box",
    "\"nil\"",
    "bounding-box-intersection",
    "\"(boxes &optional (tolerance *contact-threshold*) &aux newbox)\"",
    "bounding-box-union",
    "\"(boxes &optional (tolerance *contact-threshold*) &aux newbox)\"",
    "\"(self class &optional f)\"",
    "\"(self class &optional f)\"",
    "\"(self class)\"",
    ":eq",
    "\"(self class ln2)\"",
    ":eql",
    "\"(self class ln2)\"",
    ":equall",
    "\"(self class ln2)\"",
    "\"(self class point)\"",
    "\"(self class p)\"",
    "\"(self class &optional (tolerance))\"",
    "\"(self class box &optional tolerance)\"",
    "\"(self class)\"",
    ":end-point",
    "\"(self class v)\"",
    "\"(self class)\"",
    "\"(self class strm)\"",
    "\"(self class &key ((:pvertex pv)) ((:nvertex nv)) &allow-other-keys)\"",
    "\"(self class point &aux (a (v- pvert nvert)))\"",
    "\"(self class l)\"",
    "\"(self class p &aux (par (send self :foot p)))\"",
    "\"(self class ln)\"",
    "\"(self class point)\"",
    "\"(self class x)\"",
    "\"(self class p &optional (tol *coplanar-threshold*))\"",
    "\"(self class pnt &optional (tol *coplanar-threshold*) &aux param)\"",
    ":colinear-line",
    "\"(self class ln &optional (tol *coplanar-threshold*))\"",
    ":colinear-line-intersection",
    "\"(self class ln2)\"",
    ":coplanar",
    "\"(self class ln &optional (tolerance *coplanar-threshold*))\"",
    "\"(self class pln)\"",
    "\"(self class ln)\"",
    "\"(self class ln &optional (tolerance *parallel-threshold*))\"",
    "make-line",
    "\"(p n)\"",
    ":faces",
    "\"(self class)\"",
    "\"(self class f)\"",
    "\"(self class f)\"",
    "\"(self class f)\"",
    ":next-vertex",
    "\"(self class f)\"",
    "\"(self class &optional (f pface))\"",
    ":next-edge-angle",
    "\"(self class f)\"",
    ":previous-edge-angle",
    "\"(self class f)\"",
    "\"(self class)\"",
    "\"(self class pv nv)\"",
    ":nface",
    "\"(self class pv nv)\"",
    ":another-face",
    "\"(self class fac)\"",
    ":binormal",
    "\"(self class f)\"",
    ":angle",
    "\"(self class)\"",
    ":approximated-p",
    "\"(self class)\"",
    ":flags",
    "\"(self class)\"",
    ":contourp",
    "\"is this a contour edge when observed from viewpoint?\"",
    "\"(self class &optional (threshold 0.7))\"",
    "\"(self class)\"",
    ":set-angle",
    "\"(self class)\"",
    ":set-face",
    "\"(self class pv nv f)\"",
    "\"(self class e)\"",
    ":neighborpoints",
    "\"(self class point)\"",
    "\"(self class point)\"",
    "\"(self class &optional new)\"",
    "\"(self class &rest args &key ((:pface pf)) ((:nface nf)) ((:angle ang)) (approximated nil) ((:flags f) 0) &allow-other-keys)\"",
    ":center-coordinates",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class)\"",
    ":connected-vertex",
    "\"(self class e)\"",
    ":replace-face",
    "\"(self class f newface)\"",
    "winged-edge-p",
    "\"(x)\"",
    ":set-wings",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class &rest args &key ((:pwing pw)) ((:nwing nw)) ((:pcwing pcw)) ((:ncwing ncw)) &allow-other-keys)\"",
    ":id",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class point)\"",
    "\"(self class point)\"",
    ":on-plane-p",
    "\"(self class point &optional (tolerance *epsilon*))\"",
    ":coplanar-point",
    "\"(self class point &optional (tolerance *coplanar-threshold*))\"",
    ":coplanar-line",
    "\"(self class ln &optional (tolerance *coplanar-threshold*))\"",
    "\"(self class pv nv)\"",
    "\"(self class eg)\"",
    "\"(self class point)\"",
    ":original-body",
    "\"(self class)\"",
    ":brightness",
    "\"(self class light-source)\"",
    "\"(self class &optional (point (float-vector 0 0 0)))\"",
    ":separation",
    "\"(self class mypoints hispoints)\"",
    "\"(self class n apoint)\"",
    "\"(self class)\"",
    "\"(self class)\"",
    ":edge",
    "\"(self class n)\"",
    "\"(self class)\"",
    "\"(self class)\"",
    ":vertex",
    "\"(self class n)\"",
    "\"(self class e)\"",
    "\"(self class e)\"",
    ":adjacent-faces",
    "\"(self class &aux flist pf nf)\"",
    ":convexp",
    "\"(self class)\"",
    "\"(self class &optional tolerance)\"",
    "\"(self class box &optional tolerance)\"",
    ":vertices-mean",
    "\"(self class)\"",
    "\"(self class point)\"",
    "\"(self class)\"",
    ":perimeter",
    "\"(self class)\"",
    "\"(self class &optional (point #f(0.0 0.0 0.0)))\"",
    "\"(self class &optional point)\"",
    "\"(self class &optional new)\"",
    "\"(self class point &optional (*epsilon* *epsilon*))\"",
    ":intersect-point-vector",
    "\"(self class point vnorm)\"",
    "\"(self class p1 p2)\"",
    "\"(self class e)\"",
    ":intersect-face",
    "\"(self class f &optional (cbox (send (send self :box) :intersection (send f :box))))\"",
    ":visible",
    "\"(self class vp)\"",
    "\"(self class c)\"",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class &key ((:vertices ver)) ((:edges edg)) ((:normal nor)) ((:distance dis)))\"",
    "\"(self class p &optional (*epsilon* *contact-threshold*) &aux res)\"",
    "\"(self class p &optional (tolerance *contact-threshold*) &aux res)\"",
    ":coplanar-distance",
    "\"(self class pnt)\"",
    "\"(self class cr &optional (tolerance *coplanar-threshold*))\"",
    "\"(self class p &optional (tolerance *contact-threshold*))\"",
    "\"(self class f &optional (tolerance *contact-threshold*))\"",
    "\"(self class p &optional (tolerance *contact-threshold*))\"",
    ":contactp",
    "\"(self class p &optional (tolerance *contact-threshold*))\"",
    ":aligned-plane",
    "\"(self class f)\"",
    "\"(self class point &optional (tol 0.001))\"",
    "\"(self class point)\"",
    "\"(self class)\"",
    "\"(self class &optional (point nil))\"",
    "\"(self class p &optional (*epsilon* *contact-threshold*) &aux res)\"",
    "\"(self class p &optional (tolerance *contact-threshold*))\"",
    "\"(self class)\"",
    "\"(self class)\"",
    ":enter-hole",
    "\"(self class h)\"",
    "\"(self class c)\"",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class)\"",
    ":all-vertices",
    "\"(self class)\"",
    "\"(self class &optional bod)\"",
    ":primitive-face",
    "\"(self class &optional fac)\"",
    ":primitive-body",
    "\"(self class)\"",
    "\"(self class &optional newid)\"",
    ":face-id",
    "\"(self class)\"",
    ":primitive-body-type",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class strm)\"",
    ":copied-primitive-face-p",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class &key ((:normal nor)) ((:distance d)) ((:edges p)) ((:vertices ver)) ((:holes h)) ((:id newid) nil) ((:body bod) nil) ((:primitive-face pface) self))\"",
    "\"(self class &optional new &aux ref)\"",
    "\"(self class &optional new &aux dif)\"",
    "\"(self class &optional newcolor)\"",
    "\"(self class e1)\"",
    "\"(self class p &optional (tolerance *contact-threshold*))\"",
    "hole",
    "\"(self class &optional fac)\"",
    ":hollowed-faces",
    "\"(self class)\"",
    "\"(self class &key ((:normal nor)) ((:distance dis)) ((:edges edg)) ((:vertices ver)) ((:face fac)))\"",
    "*hole-class*",
    "make-plane",
    "\"(&key (normal (float-vector 0 0 1)) (point (float-vector 0 0 0)) (distance nil))\"",
    "*xy-plane*",
    ":constant",
    "*yz-plane*",
    "#f(1.0 0.0 0.0)",
    "*zx-plane*",
    "#f(0.0 1.0 0.0)",
    "make-polygon",
    "\"(&rest points)\"",
    ":geopack",
    "\"@(#)$Id$\"",
    "provide",
  };
