static pointer (*ftab[19])();

#define QUOTE_STRINGS_SIZE 279
static char *quote_strings[QUOTE_STRINGS_SIZE]={
    ":integer",
    ":long",
    ":byte",
    ":start1",
    ":end2",
    "replace",
    "*display*",
    "pending",
    "event",
    "nextevent",
    "#(0 1 :keypress :keyrelease :buttonpress :buttonrelease :motionnotify :enternotify :leavenotify :focusin :focusout :keymapnotify :expose :graphicsexpose :noexpose :visibilitynotify :createnotify :destroynotify :unmapnotify :mapnotify :maprequest :reparentnotify :configurenotify :configurerequest :gravitynotify :resizerequest :circulatenotify :circulaterequest :propertynotify :selectionclear :selectionrequest :selectionnotify :colormapnotify :clientmessage :mappingnotify :lastevent)",
    "*xwindows-hash-tab*",
    "gethash",
    ":shift",
    ":control",
    ":meta",
    ":left",
    ":middle",
    ":right",
    "\";#~d ~a ~A ~A stat=~s ~d key=~d time=~6,1f~%\"",
    ":name",
    "sync",
    ":keyrelease",
    "\";event ~s ~s~%\"",
    ":event-notify",
    "(:configurenotify :configurerequest :expose :visibilitynotify)",
    "member",
    ":event-notify-dispatch",
    "(:keypress :keyrelease :buttonpress :buttonrelease :motionnotify :enternotify :leavenotify :configurenotify :visibilitynotify :expose)",
    ":buttonrelease",
    "*buttonrelease-wanted*",
    "xwindow",
    "*debug*",
    "\"subclass's responsibility ~s~%\"",
    "warn",
    "charbuf",
    "lookupstring",
    ":keyenter",
    "\"subclass's responsibility ~s~%\"",
    "\"subclass's responsibility ~s~%\"",
    ":buttonpress",
    "\"subclass's responsibility ~s~%\"",
    "\"subclass's responsibility ~s~%\"",
    ":motionnotify",
    "\"subclass's responsibility ~s~%\"",
    ":enternotify",
    "\"subclass's responsibility ~s~%\"",
    ":leavenotify",
    "\"ConfigureNotify came to ~S~%\"",
    ":width",
    ":height",
    "/=",
    ":redraw",
    "\":configureRequest sent to ~s~%\"",
    "\":redraw is subclass's responsibility ~s~%\"",
    ":window-main-loop",
    "eventsqueued",
    "*xevent-debug*",
    "*skip-motion-event*",
    "event2",
    "peekevent",
    "*skipped-event-count*",
    "xflush",
    "progn",
    "1",
    "catch",
    "while",
    "t",
    "window-main-one",
    "1",
    "1",
    "cond",
    ">",
    "0",
    "process-event",
    "1",
    "window-main-loop",
    "*error-output*",
    "\"~A ~d error: ~A\"",
    "*program-name*",
    "\" ~A\"",
    "\" in ~s\"",
    ":window-main-loop-again",
    "wmlerror",
    "lisp::install-error-handler",
    "\"window-main-loop finished: ~d events caught~%\"",
    "window-main-thread2",
    "*standard-output*",
    "\"> \"",
    "*standard-input*",
    "select-stream",
    "repwin-timeout",
    "\"X\"",
    "\"X\"",
    "*package*",
    "\"no such package\"",
    ":xdecl",
    "\"Xdecl.l\"",
    "require",
    "(font-id next-event event event-type event-pos event-window event-state event-time event-root-pos event-key event-button event-x-root event-y-root event-x event-y event-width event-height event-shift event-control event-meta event-left event-middle event-right event-pressed display-events window-main-loop window-main-thread wml *buttonrelease-wanted* *xevent-debug*)",
    ":global",
    "xevent",
    ":super",
    "cstruct",
    ":slots",
    "nil",
    ":metaclass",
    "cstructclass",
    ":element-type",
    ":size",
    ":documentation",
    "make-class",
    ":slotlist",
    "((type :integer) (serial :long) (send-event :integer) (display :long) (window :long) (root :long) (subwindow :long) (time :long) (x :integer) (y :integer) (x-root :integer) (y-root :integer) (state :integer) (detail :integer) (same-screen :integer) (focus :integer) (alt-state :integer) (pad :char 92))",
    "xevent-type",
    "\"(lisp::s)\"",
    "set-xevent-type",
    "lisp::setf-update-fn",
    "lisp::setf-lambda",
    "remprop",
    "lisp::setf-method",
    "lisp::setf-documentation",
    "\"(lisp::s lisp::val)\"",
    "xevent-serial",
    "\"(lisp::s)\"",
    "set-xevent-serial",
    "\"(lisp::s lisp::val)\"",
    "xevent-send-event",
    "\"(lisp::s)\"",
    "set-xevent-send-event",
    "\"(lisp::s lisp::val)\"",
    "xevent-display",
    "\"(lisp::s)\"",
    "set-xevent-display",
    "\"(lisp::s lisp::val)\"",
    "xevent-window",
    "\"(lisp::s)\"",
    "set-xevent-window",
    "\"(lisp::s lisp::val)\"",
    "xevent-root",
    "\"(lisp::s)\"",
    "set-xevent-root",
    "\"(lisp::s lisp::val)\"",
    "xevent-subwindow",
    "\"(lisp::s)\"",
    "set-xevent-subwindow",
    "\"(lisp::s lisp::val)\"",
    "xevent-time",
    "\"(lisp::s)\"",
    "set-xevent-time",
    "\"(lisp::s lisp::val)\"",
    "xevent-x",
    "\"(lisp::s)\"",
    "set-xevent-x",
    "\"(lisp::s lisp::val)\"",
    "xevent-y",
    "\"(lisp::s)\"",
    "set-xevent-y",
    "\"(lisp::s lisp::val)\"",
    "xevent-x-root",
    "\"(lisp::s)\"",
    "set-xevent-x-root",
    "\"(lisp::s lisp::val)\"",
    "xevent-y-root",
    "\"(lisp::s)\"",
    "set-xevent-y-root",
    "\"(lisp::s lisp::val)\"",
    "xevent-state",
    "\"(lisp::s)\"",
    "set-xevent-state",
    "\"(lisp::s lisp::val)\"",
    "xevent-detail",
    "\"(lisp::s)\"",
    "set-xevent-detail",
    "\"(lisp::s lisp::val)\"",
    "xevent-same-screen",
    "\"(lisp::s)\"",
    "set-xevent-same-screen",
    "\"(lisp::s lisp::val)\"",
    "xevent-focus",
    "\"(lisp::s)\"",
    "set-xevent-focus",
    "\"(lisp::s lisp::val)\"",
    "xevent-alt-state",
    "\"(lisp::s)\"",
    "set-xevent-alt-state",
    "\"(lisp::s lisp::val)\"",
    "xevent-pad",
    "\"(lisp::s &optional lisp::i)\"",
    "set-xevent-pad",
    "\"(lisp::s lisp::i &rest lisp::val)\"",
    "next-event",
    "\"nil\"",
    "event-type",
    "\"(e)\"",
    "event-x",
    "\"(e)\"",
    "event-y",
    "\"(e)\"",
    "event-x-root",
    "\"(e)\"",
    "event-y-root",
    "\"(e)\"",
    "event-pos",
    "\"(e)\"",
    "event-key",
    "\"(e)\"",
    "event-root-pos",
    "\"(e)\"",
    "event-width",
    "\"(e)\"",
    "event-height",
    "\"(e)\"",
    "event-time",
    "\"(e)\"",
    "event-window",
    "\"(e)\"",
    "event-button",
    "\"(e)\"",
    "event-state",
    "\"(e)\"",
    "event-shift",
    "\"(e)\"",
    "event-control",
    "\"(e)\"",
    "event-meta",
    "\"(e)\"",
    "event-left",
    "\"(e)\"",
    "event-middle",
    "\"(e)\"",
    "event-right",
    "\"(e)\"",
    "event-pressed",
    "\"returns T if any key is pressed. In EnterNotify, see the 16th element\ninstead of 12th of motoinNotify events.\"",
    "print-event",
    "\"(event)\"",
    "display-events",
    "\"nil\"",
    "make-string",
    ":event-notify-print",
    "\"(self class type event)\"",
    "\"(self class type event)\"",
    "\"(self class type event)\"",
    "\"(self class event)\"",
    ":keypress",
    "\"(self class event)\"",
    "\"(self class ch &optional event)\"",
    "\"(self class event)\"",
    "\"(self class event)\"",
    "\"(self class event)\"",
    "\"(self class event)\"",
    "\"(self class event)\"",
    ":configurenotify",
    "\"(self class event)\"",
    ":configurerequest",
    "\"(self class event)\"",
    ":expose",
    "\"(self class event)\"",
    ":visibilitynotify",
    "\"(self class event)\"",
    "\"(self class)\"",
    "\"(event)\"",
    "\"(&optional fd)\"",
    "\"(&rest forms)\"",
    "wml",
    "\"(&rest forms)\"",
    "\"(code msg1 form &optional (msg2))\"",
    "\"nil\"",
    "window-main-thread",
    "\"nil\"",
    "display-fd",
    "\"(&optional (disp *display*))\"",
    ":vtype",
    "repwin",
    "\"nil\"",
    ":xevent",
    "\"@(#)$Id$\"",
    "provide",
  };
