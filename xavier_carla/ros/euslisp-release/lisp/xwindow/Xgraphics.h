static pointer (*ftab[31])();

#define QUOTE_STRINGS_SIZE 269
static char *quote_strings[QUOTE_STRINGS_SIZE]={
    ":integer",
    ":long",
    ":char",
    "*display*",
    "loadqueryfont",
    "\"can't load font ~S\"",
    "warn",
    "font-courb12",
    "c-long",
    "c-int",
    "make-string",
    "querytextextents",
    "#(:width :height :visual :depth :format :offset)",
    "*visual*",
    "visual-depth",
    "8",
    "15",
    "16",
    "createimage",
    "make-foreign-string",
    "endian",
    "*red-mask*",
    "*green-mask*",
    "*blue-mask*",
    "((function . 1) (plane-mask . 2) (foreground . 4) (background . 8) (line-width . 16) (line-style . 32) (cap-style . 64) (join-style . 128) (fill-style . 256) (fill-rule . 512) (font . 16384) (all 1048575) (:function . 1) (:plane-mask . 2) (:foreground . 4) (:background . 8) (:line-width . 16) (:line-style . 32) (:cap-style . 64) (:join-style . 128) (:fill-style . 256) (:fill-rule . 512) (:font . 16384) (:all 1048575))",
    "assoc",
    "*xwindows-hash-tab*",
    "sethash",
    "#(:drawable :background :foreground :name)",
    "defaultrootwindow",
    "*bg-pixel*",
    "*fg-pixel*",
    ":init",
    "gcval",
    "creategc",
    "super",
    ":name",
    "send",
    ":change-attributes",
    "freegc",
    "gcontext",
    ":create",
    "18446744073709551615",
    ":gc",
    "copygc",
    "((:clear . 0) (:and . 1) (:andreverse . 2) (:copy . 3) (:andinverted . 4) (:noop . 5) (:xor . 6) (:or . 7) (:nor . 8) (:equiv . 9) (:invert . 10) (:xorreverse . 11) (:copyinverted . 12) (:orinverted . 13) (:nand . 14) (:set . 15))",
    "\"not integer or keyword for :function\"",
    ":function-to-value",
    "setfunction",
    "*color-map*",
    ":get-pixel",
    "setforeground",
    ":get-attribute",
    "foreground",
    "setbackground",
    "background",
    ":foreground",
    ":background",
    ":get-attributes",
    "setplanemask",
    "plane-mask",
    ":line-width",
    "line-width",
    ":line-style",
    "line-style",
    ":cap-style",
    "cap-style",
    ":join-style",
    "join-style",
    "string",
    "setdashes",
    ":fill-style",
    "fill-style",
    ":fill-rule",
    "fill-rule",
    "#(:function :plane-mask :foreground :background :line-width :line-style :cap-style :join-style :fill-style :fill-rule :font :cmap :&allow-other-keys :&aux :mask :mask1 :attr)",
    ":font",
    ":function",
    "/=",
    ":set",
    "changegc",
    "getgcvalues",
    ":get",
    "font",
    "setfont",
    ":drawable",
    "settile",
    "setstipple",
    "system:gc",
    ":tile",
    ":alloc",
    "\"color ~a or ~a cannot be allocated in ~a\"",
    ":xdecl",
    "\"Xdecl.l\"",
    "require",
    "\"X\"",
    "\"X\"",
    "*package*",
    "\"no such package\"",
    "(*color-map* create-ximage gcval alloc-color find-visual)",
    "lsbfirst",
    ":constant",
    "msbfirst",
    ":global",
    ":element-type",
    "make-array",
    "become",
    "gcvalues",
    ":super",
    "cstruct",
    ":slots",
    "nil",
    ":metaclass",
    "cstructclass",
    ":byte",
    ":size",
    ":documentation",
    "make-class",
    ":slotlist",
    "(#':integer (plane-mask :long) (foreground :long) (background :long) (line-width :integer) (line-style :integer) (cap-style :integer) (join-style :integer) (fill-style :integer) (fill-rule :integer) (arc-mode :integer) (tile :long) (stipple :long) (ts-x-origin :integer) (ts-y-origin :integer) (font :long) (subwindow-mode :integer) (graphics-exposures :integer) (clip-x-origin :integer) (clip-y-origin :integer) (clip-mask :long) (dash-offset :integer) (dashes :char))",
    "gcvalues-function",
    "\"(lisp::s)\"",
    "set-gcvalues-function",
    "lisp::setf-update-fn",
    "lisp::setf-lambda",
    "remprop",
    "lisp::setf-method",
    "lisp::setf-documentation",
    "\"(lisp::s lisp::val)\"",
    "gcvalues-plane-mask",
    "\"(lisp::s)\"",
    "set-gcvalues-plane-mask",
    "\"(lisp::s lisp::val)\"",
    "gcvalues-foreground",
    "\"(lisp::s)\"",
    "set-gcvalues-foreground",
    "\"(lisp::s lisp::val)\"",
    "gcvalues-background",
    "\"(lisp::s)\"",
    "set-gcvalues-background",
    "\"(lisp::s lisp::val)\"",
    "gcvalues-line-width",
    "\"(lisp::s)\"",
    "set-gcvalues-line-width",
    "\"(lisp::s lisp::val)\"",
    "gcvalues-line-style",
    "\"(lisp::s)\"",
    "set-gcvalues-line-style",
    "\"(lisp::s lisp::val)\"",
    "gcvalues-cap-style",
    "\"(lisp::s)\"",
    "set-gcvalues-cap-style",
    "\"(lisp::s lisp::val)\"",
    "gcvalues-join-style",
    "\"(lisp::s)\"",
    "set-gcvalues-join-style",
    "\"(lisp::s lisp::val)\"",
    "gcvalues-fill-style",
    "\"(lisp::s)\"",
    "set-gcvalues-fill-style",
    "\"(lisp::s lisp::val)\"",
    "gcvalues-fill-rule",
    "\"(lisp::s)\"",
    "set-gcvalues-fill-rule",
    "\"(lisp::s lisp::val)\"",
    "gcvalues-arc-mode",
    "\"(lisp::s)\"",
    "set-gcvalues-arc-mode",
    "\"(lisp::s lisp::val)\"",
    "gcvalues-tile",
    "\"(lisp::s)\"",
    "set-gcvalues-tile",
    "\"(lisp::s lisp::val)\"",
    "gcvalues-stipple",
    "\"(lisp::s)\"",
    "set-gcvalues-stipple",
    "\"(lisp::s lisp::val)\"",
    "gcvalues-ts-x-origin",
    "\"(lisp::s)\"",
    "set-gcvalues-ts-x-origin",
    "\"(lisp::s lisp::val)\"",
    "gcvalues-ts-y-origin",
    "\"(lisp::s)\"",
    "set-gcvalues-ts-y-origin",
    "\"(lisp::s lisp::val)\"",
    "gcvalues-font",
    "\"(lisp::s)\"",
    "set-gcvalues-font",
    "\"(lisp::s lisp::val)\"",
    "gcvalues-subwindow-mode",
    "\"(lisp::s)\"",
    "set-gcvalues-subwindow-mode",
    "\"(lisp::s lisp::val)\"",
    "gcvalues-graphics-exposures",
    "\"(lisp::s)\"",
    "set-gcvalues-graphics-exposures",
    "\"(lisp::s lisp::val)\"",
    "gcvalues-clip-x-origin",
    "\"(lisp::s)\"",
    "set-gcvalues-clip-x-origin",
    "\"(lisp::s lisp::val)\"",
    "gcvalues-clip-y-origin",
    "\"(lisp::s)\"",
    "set-gcvalues-clip-y-origin",
    "\"(lisp::s lisp::val)\"",
    "gcvalues-clip-mask",
    "\"(lisp::s)\"",
    "set-gcvalues-clip-mask",
    "\"(lisp::s lisp::val)\"",
    "gcvalues-dash-offset",
    "\"(lisp::s)\"",
    "set-gcvalues-dash-offset",
    "\"(lisp::s lisp::val)\"",
    "gcvalues-dashes",
    "\"(lisp::s)\"",
    "set-gcvalues-dashes",
    "\"(lisp::s lisp::val)\"",
    "*keyword-package*",
    "lisp::slotlist",
    ":vtype",
    "font-id",
    "\"(font &aux (id font))\"",
    "textdots",
    "\"(str &optional (font font-courb12))\"",
    "create-ximage",
    "\"(data &key (width 0) (height 0) (visual *visual*) (depth (visual-depth visual)) (format 2) (offset 0))\"",
    "set-ximage",
    "\"(ximage data width height &optional (visual *visual*) (depth (visual-depth visual)) (bitunit depth))\"",
    "gc-attribute-to-mask",
    "\"(attribute-name)\"",
    "\"(self class id)\"",
    "\"(self class &rest args &key (drawable (defaultrootwindow *display*)) (background *bg-pixel*) (foreground *fg-pixel*) (name) &allow-other-keys)\"",
    ":free",
    "\"(self class)\"",
    "\"(self class)\"",
    ":copy",
    "\"(self class)\"",
    "\"(self class f)\"",
    "\"0=Clear,	1=And,		2=AndReverse,	3=Copy\n4=AndInverted,	5=NoOp,		6=Xor,		7=Or,\n8=Nor,		9=Equiv,	10=Invert,	11=XorReverse,\n12=CopyInverted,13=OrInverted,	14=Nand,	15=Set\"",
    "\"(self class &optional pix (cmap *color-map*))\"",
    "\"(self class &optional pix (cmap *color-map*))\"",
    ":foreback",
    "\"(self class &optional fore back)\"",
    ":reverse",
    "\"(self class)\"",
    ":planemask",
    "\"(self class &optional plane-mask)\"",
    "\"(self class &optional x)\"",
    "\"(self class &optional x)\"",
    "\"(self class &optional x)\"",
    "\"(self class &optional x)\"",
    ":dash",
    "\"(self class &rest x)\"",
    "\"(self class &optional x)\"",
    "\"(self class &optional x)\"",
    "\"&key function planemask foreground background \n line-width line-style cap-style join-style font\"",
    "\"(self class &rest attrs)\"",
    "\"(self class attr)\"",
    "\"(self class &optional x)\"",
    "\"(self class pixmap)\"",
    ":stipple",
    "\"(self class pixmap)\"",
    "make-gc-from-pixmap",
    "\"(pixmap)\"",
    "make-color-gc",
    "\"(fg [bg cmap]) fg and bg may be color names such as red.\ncmap is defaulted to x:*color-map*.\"",
    ":xgraphics",
    "\"@(#)$Id$\"",
    "provide",
  };
