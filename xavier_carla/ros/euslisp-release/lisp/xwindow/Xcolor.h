static pointer (*ftab[25])();

#define QUOTE_STRINGS_SIZE 214
static char *quote_strings[QUOTE_STRINGS_SIZE]={
    "make-string",
    "(8 15 16 24 32)",
    "*display*",
    "matchvisualinfo",
    "\"; ~d bit ~a \"",
    "3",
    "pseudo",
    "4",
    "true",
    "5",
    "direct",
    "\"; No~%\"",
    ":long",
    "\"; visual=0x~x visual_id=~d ~a~%\"",
    "*visual*",
    "default",
    "\"\"",
    "((:staticgray . 0) (:grayscale . 1) (:staticcolor . 2) (:static . 2) (:pseudocolor . 3) (:pseudo . 3) (:truecolor . 4) (:true . 4) (:directcolor . 5) (:direct . 5))",
    "assoc",
    "\"illegal visual type ~A\"",
    ":element-type",
    ":integer",
    "make-array",
    "*visuals*",
    ":test",
    "=",
    "\";; visual-depth: no such visual ~s registered.\"",
    "(5 4 3)",
    "(32 24 16 15 8)",
    "visual-type",
    "/=",
    "3",
    ":pseudo",
    "4",
    ":true",
    "5",
    ":direct",
    ":short",
    ":byte",
    ":red",
    ":green",
    ":blue",
    "xcolor",
    ":init",
    "querycolor",
    ":rgb",
    ":drawable",
    "setwindowcolormap",
    "freecolormap",
    ":store",
    "string",
    "lookupcolor",
    "\"invalid color specification\"",
    "alloccolor",
    ":get",
    "pixel",
    "storecolor",
    "\"invalid pixel\"",
    "geometry:hls2rgb",
    "car",
    ":lut",
    "freecolors",
    "delete",
    ":plane-bits",
    "alloccolorcells",
    "\"cannot allocate private colors in cmapid=~d\"",
    "warn",
    "cons",
    "expt",
    "vector",
    ":allocate-private-colors",
    ":free",
    "\"color allocation\"",
    ":allocate-colors",
    "\"colorcells allocation failure\"",
    "\"size mismatch with the LUT already created\"",
    ":define-lut",
    "installcolormap",
    "uninstallcolormap",
    "*xwindows-hash-tab*",
    "sethash",
    "#(:nplanes :ncolors :visual :contiguous)",
    "*root*",
    "createcolormap",
    ":alloc",
    "send",
    ":query",
    "*color-map*",
    "*max-intensity*",
    "(list-visuals visual-id visual-class visual-red-mask visual-blue-mask visual-green-mask visual-masks visual-bits-per-rgb visual-depth best-visual)",
    "list-visuals",
    "\"(&optional (screen 0))\"",
    "\"(name)\"",
    "find-visual",
    "\"(type depth &optional (screen 0))\"",
    "visual-id",
    "\"(vis)\"",
    "visual-class",
    "\"(vis)\"",
    "visual-red-mask",
    "\"(vis)\"",
    "visual-green-mask",
    "\"(vis)\"",
    "visual-blue-mask",
    "\"(vis)\"",
    "visual-masks",
    "\"(vis)\"",
    "visual-bits-per-rgb",
    "\"(vis)\"",
    "visual-depth",
    "\"(vis)\"",
    "best-visual",
    "\"(&optional (class-preference '(5 4 3)) (depth-preference '(32 24 16 15 8)) (screen 0))\"",
    ":global",
    ":super",
    "cstruct",
    ":slots",
    "nil",
    ":metaclass",
    "cstructclass",
    ":size",
    ":documentation",
    "make-class",
    ":slotlist",
    "((pixel :long) (red :short) (green :short) (blue :short) (flags :byte) (pad :byte))",
    "xcolor-pixel",
    "\"(lisp::s)\"",
    "set-xcolor-pixel",
    "lisp::setf-update-fn",
    "lisp::setf-lambda",
    "remprop",
    "lisp::setf-method",
    "lisp::setf-documentation",
    "\"(lisp::s lisp::val)\"",
    "xcolor-red",
    "\"(lisp::s)\"",
    "set-xcolor-red",
    "\"(lisp::s lisp::val)\"",
    "xcolor-green",
    "\"(lisp::s)\"",
    "set-xcolor-green",
    "\"(lisp::s lisp::val)\"",
    "xcolor-blue",
    "\"(lisp::s)\"",
    "set-xcolor-blue",
    "\"(lisp::s lisp::val)\"",
    "xcolor-flags",
    "\"(lisp::s)\"",
    "set-xcolor-flags",
    "\"(lisp::s lisp::val)\"",
    "xcolor-pad",
    "\"(lisp::s)\"",
    "set-xcolor-pad",
    "\"(lisp::s lisp::val)\"",
    ":pixel",
    "\"(self class)\"",
    "\"(self class &aux v)\"",
    "\"(self class &aux v)\"",
    "\"(self class &aux v)\"",
    "\"(self class)\"",
    "\"(self class pix r g b &optional (f 7))\"",
    ":id",
    "colormap",
    "\"(self class)\"",
    "\"(self class pix &aux color)\"",
    ":set-window",
    "\"(self class win)\"",
    ":destroy",
    "\"(self class)\"",
    "\"allocate a color in the colormap. Argument may either be a color name string\nor a list of three short (not byte) integers representing red, green and blue.\"",
    "\"(self class pix r &optional g b &aux exactdef colordef status)\"",
    ":store-hls",
    "\"(self class pix hue lightness saturation)\"",
    ":lut-list",
    "\"(self class)\"",
    ":lut-names",
    "\"(self class)\"",
    "\"(self class lut)\"",
    "\"(self class lut n)\"",
    "\"(self class lut)\"",
    ":planes",
    "\"(self class)\"",
    "\"(self class)\"",
    ":plane-shifts",
    "\"(self class)\"",
    "\"(self class &optional (pix nil))\"",
    "\"(self class npixels &optional (nplanes 0))\"",
    "\"(self class rgb-list &optional (private nil) (nplanes 0))\"",
    "\"(self class lut-name rgb-list &optional (private nil))\"",
    ":define-gray-scale-lut",
    "\"(self class lut-name levels &optional (private nil))\"",
    ":define-rgb-lut",
    "\"(self class lut-name red &optional (green red) (blue green) private)\"",
    ":define-hls-lut",
    "\":define-HLS-LUT name count hue low high saturation\"",
    ":define-rainbow-lut",
    "\":define-RAINBOW-LUT name (count 32) (hue1 0) (hue2 360) (lightness 0.5) (saturation 1.0)\"",
    ":install",
    "\"(self class)\"",
    ":uninstall",
    "\"(self class)\"",
    "\"(self class &optional id)\"",
    ":create",
    "\"(self class &key (nplanes 0) (ncolors 1) (visual *visual*) (contiguous nil))\"",
    ":get-pixel",
    "\"(self class name)\"",
    ":copy-colors",
    "\"(self class cmap start &optional (end (1+ start)))\"",
    "get-lighter-pixel",
    "\"(pix &optional (rate 1.4) (cmap *color-map*) &aux rgb)\"",
    "get-redish-pixel",
    "\"(pix &optional (rate 1.1) (cmap *color-map*) &aux rgb)\"",
    ":xcolor",
    "provide",
  };
