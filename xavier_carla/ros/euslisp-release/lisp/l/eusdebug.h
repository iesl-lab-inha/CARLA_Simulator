static pointer FLET35121();
static pointer FLET35319();
static pointer FLET37798();
static pointer CLO39340();
static pointer CLO39405();
static pointer CLO39479();
static pointer CLO39553();
static pointer CLO39617();
static pointer CLO39679();
static pointer CLO39683();
static pointer UWP40697();
static pointer FLET40943();
static pointer (*ftab[34])();

#define QUOTE_STRINGS_SIZE 397
static char *quote_strings[QUOTE_STRINGS_SIZE]={
    "\"\"",
    "while",
    "not",
    "format",
    "*error-output*",
    "finish-output",
    "reploop",
    "\"ass: \"",
    "\"~C[3~Cm\"",
    "\"~C[0m\"",
    "*break-on-warning*",
    "\"warn: \"",
    "*standard-output*",
    "*print-level*",
    "*print-length*",
    "pprint",
    "\"~A=\"",
    ":direction",
    ":output",
    ":if-exists",
    ":append",
    ":if-does-not-exist",
    ":create",
    "open",
    "\"~s -----------------~%\"",
    "string",
    "intsymvector",
    "substringp",
    "\";; ~S~A~A~A~%\"",
    "special-form-p",
    "\"  Special form\"",
    "macro-function",
    "\"  Macro\"",
    "\"  Function\"",
    "\"\"",
    ":vtype",
    "0",
    "\"  Constant=\"",
    "1",
    "\"  Global=\"",
    "2",
    "\"  Global Special=\"",
    "\"  Thread Special=\"",
    "\"\"",
    "\"\"",
    ":byte",
    "(((:long long 4) 4) ((:word :short word short 2) 2) ((:byte :char :character byte char character 1) 1))",
    ":test",
    "member",
    "assoc",
    "\"~6,6x \"",
    "1",
    "\"~2,2x \"",
    "2",
    "\"~4,4x \"",
    ":short",
    "4",
    "\"~8,8x \"",
    ":long",
    "\"brk~d: \"",
    "*replevel*",
    "\"no func def. for setbreak\"",
    "broken-function",
    "lambda",
    "&rest",
    "args",
    "step-hook",
    "cons",
    "get",
    "quote",
    "0",
    "let",
    "c1",
    "c2",
    "start",
    "runtime",
    "overhead",
    "0",
    "nettime",
    "0",
    ">",
    "0",
    "setq",
    "1-",
    "0",
    "-",
    "t",
    "\";; ~7,3f milisec~%\"",
    "/",
    "*",
    "1000.0",
    "internal-time-units-per-second",
    "print",
    "position",
    "*unbound*",
    "*tracelevel*",
    "spaces",
    "\";; s~s: \"",
    "*keyword-package*",
    "*package*",
    "(:pp :pprint)",
    "(:p)",
    "(:go :g)",
    "\";; ==> ~S~%\"",
    "(:s :step)",
    "\";; ~S ==> ~S~%\"",
    "(:q :quit)",
    "step-exit",
    "quit",
    "(:?)",
    "\";; s   -- single step~%\"",
    "\";; g   -- execute this form without stepping~%\"",
    "\";; p,pp-- print current form~%\"",
    "\";; q   -- quit stepping~%\"",
    "\";; e form-- evaluate form~%\"",
    ":e",
    "step-error",
    "(lambda (&rest x) (format *error-output* \"step evaluation error ~A~%\" x) (throw 'step-error nil))",
    "*error-handler*",
    "\";; e?\"",
    "progn",
    "0",
    "catch",
    "evalhook",
    "symbol-function",
    "\";; ~%~d: --> ~s ~s\"",
    "traced-function",
    "\";; ~%~d: ~s <-- ~s\"",
    "functionp",
    "(&rest paramlist)",
    "tracex",
    "paramlist",
    "dolist",
    "f",
    "*traced-functions*",
    "cond",
    "nil",
    "null",
    "fboundp",
    "warn",
    "\"Function ~s does not exist\"",
    "trace1",
    "push",
    "setf",
    "delete",
    "vars",
    "80",
    "*terminal-io*",
    "86",
    "73",
    "\".\"",
    "find",
    "\"no such variable\"",
    "85",
    "81",
    "inspect",
    "83",
    "(104 63)",
    "\";;	p  --describe object\n;;	v  --print variable names\n;;	i <var> --inspect var\n;;	s <var> <value> -- set value to var\n;;	<var> --describe var\n;;	u  --back to parent object\n;;	q  --quit inspection~%\"",
    "inspect-eval",
    "(lambda (ec form &optional msg1 msg2) (warn \"error ~s ~s ~s\" form msg1 msg2) (throw 'inspect-eval t))",
    "\";; ~a* \"",
    "*standard-input*",
    "q",
    "inspect1",
    "\"~a\"",
    "&aux",
    "time1",
    "result",
    "incf",
    ":call-count",
    "get-internal-run-time",
    "apply",
    ":timed-function",
    ":elapsed-time",
    "prog1",
    "list",
    "is",
    "called",
    "times",
    "and",
    "elapsed",
    "0.0167",
    "seconds",
    "if",
    "0",
    "0",
    "or",
    "error",
    "\"not a function\"",
    "fdef",
    "0",
    "0",
    "setfunc",
    "time-func",
    "*timed-functions*",
    "being",
    "timed",
    "when",
    "string<=",
    "\"\"",
    "\"\"",
    "\"\"",
    "\"\"",
    "constantp",
    "\"\"",
    "\"\"",
    "\"KEYWORD\"",
    ":class",
    ":name",
    "send-all",
    "\"~S~%\"",
    "metaclass-name",
    "car",
    ":method",
    "documentation",
    "read-from-string",
    "self",
    "class",
    "\"~c~20S ~a~%\"",
    "\"\"",
    "\"/tmp/eus~A\"",
    "\"more ~A\"",
    "unwind-protect",
    "with-open-file",
    "unix:system",
    "unix:unlink",
    "\"(Y or N): \"",
    "89",
    "78",
    "\"(YES or NO): \"",
    "string-upcase",
    "\"YES\"",
    "string=",
    "\"NO\"",
    "\"\"",
    "0",
    "function",
    "1",
    "macro",
    "2",
    "special",
    "3",
    "module",
    "append",
    ":methods",
    "cadr",
    "remove-duplicates",
    "\"\n;;	~d methods defined in ~D classes\n;;	~d unique method names\n;;	~d compiled, ~d not compiled~%\"",
    "compiled-function-p",
    "count-if",
    "count-if-not",
    "\"~A\"",
    "symbol-name",
    "string-downcase",
    "symbol-package",
    "\"~8a ~8a ~a~%\"",
    ":find-external",
    "package-name",
    "\"compiled\"",
    "\"lambda  \"",
    "\"macro\"",
    "\"func\"",
    "\"        ~a~%\"",
    "object",
    ":hierarchy",
    "\"~a \"",
    "metaclass-vars",
    "set-difference",
    "\" ~a~%\"",
    "\"()\"",
    ":super",
    "defclass",
    ":slots",
    ":subclasses",
    "\"~A remote error: ~A\"",
    "*program-name*",
    "\" ~A\"",
    "\" in ~s\"",
    "reval",
    ":instream",
    ":outstream",
    "remote-error",
    "\";; installing remote function ~s~%\"",
    "\";; remote-function= ~s~%\"",
    "*remote-function*",
    "make-server-socket-stream",
    "*server-streams*",
    "*asynchronous-streams*",
    ":test-not",
    ":key",
    "sigio-handler",
    ":async",
    "*asynchronous-stream-functions*",
    ":infd",
    ":domain",
    ":host",
    ":port",
    "make-socket-address",
    "make-socket-port",
    "*remote-port*",
    "socket-port",
    "\"listening on ~s:~d~%\"",
    "install-remote-function",
    "\"LISP\"",
    "\"LISP\"",
    "\"no such package\"",
    "(assert warning-message *break-on-warning* warn describe describe-list apropos apropos-list dump-string break setbreak unbreak timing btrace *tracelevel* eval-dynamic step-hook step *traced-functions* trace untrace inspect *timed-functions* time-func time untime help list-symbols functions variables special-variables global-variables constants methods method-list more y-or-n-p yes-or-no-p bell check-methods pfuncs class-hierarchy classdefs *remote-port* remote-error reval *server-streams* remote-port)",
    "assert",
    "\"(pred &optional (message \\\"\\\") &rest args)\"",
    "warning-message",
    "\"(color format &rest mesg)\"",
    ":global",
    "\"(format &rest mesg)\"",
    "describe",
    "\"(obj &optional (strm *standard-output*) (*print-level* nil) (*print-length* nil))\"",
    "describe-list",
    "\"(objects &optional (file *standard-output*))\"",
    "apropos",
    "\"(strng &optional pack)\"",
    "apropos-list",
    "\"(strng &optional pack)\"",
    "dump-string",
    "\"(s &optional (file *standard-output*) (word :byte) (width 16))\"",
    "break",
    "\"(&optional (prompt (format nil \\\"brk~d: \\\" (1+ *replevel*))))\"",
    "setbreak",
    "\"(func)\"",
    "unbreak",
    "\"(func)\"",
    "timing",
    "\"(count &rest form)\"",
    "btrace",
    "\"(&optional (n 10))\"",
    "eval-dynamic",
    "\"(sym &optional (env (system:list-all-bindings)))\"",
    "\"(form env)\"",
    "step",
    "\"(form)\"",
    "\"(name arglist)\"",
    "\"(name)\"",
    "trace",
    "\"(&rest functions)\"",
    "untrace",
    "\"(&rest functions)\"",
    "\"(obj &optional prompt)\"",
    "\"(obj)\"",
    "\"(func)\"",
    "time",
    "\"(func &optional clear)\"",
    "untime",
    "\"(func)\"",
    "list-symbols",
    "\"(pred pkgs)\"",
    "functions",
    "\"(functions [name] [package ...])\nlist up symbols which have global function definition\"",
    "special-variables",
    "\"(special-variables [name] [pkgs ...])\ncollects symbols declared as special\"",
    "global-variables",
    "\"(special-variables [name] [pkgs ...])\ncollects symbols declared as special\"",
    "variables",
    "\"(variables [name] [pkgs ...])\ncollects symbols with a global value assigned\"",
    "constants",
    "\"(&optional (name \\\"\\\") &rest pkgs)\"",
    "methods",
    "\"args=&optional name\nfinds method-class pair which include name as substring of the method name\"",
    "method-list",
    "\"(&optional (file t) (verbose nil) &rest classes)\"",
    "more",
    "\"(form)\"",
    "y-or-n-p",
    "\"(&optional format-string &rest args &aux response)\"",
    "yes-or-no-p",
    "\"(&optional format-string &rest args &aux response)\"",
    "bell",
    "\"(n &optional (strm t))\"",
    ":type",
    "compiled-code",
    "\"(self class)\"",
    "check-methods",
    "\"nil\"",
    "pfuncs",
    "\"(file &optional (funcs (functions)) (verbose nil))\"",
    "class-hierarchy",
    "\"(&optional (klass object) (strm t) (verbose nil))\"",
    "classdef",
    "\"(c)\"",
    "classdefs",
    "\"(&optional (klass object) (strm t))\"",
    "\"(code msg1 form &optional (msg2))\"",
    "\"(s)\"",
    "\"(s)\"",
    "open-server",
    "\"(&optional (port 2048) (remote-func #'reval))\"",
    ":eusdebug",
    "\"@(#)$Id$\"",
    "provide",
  };
