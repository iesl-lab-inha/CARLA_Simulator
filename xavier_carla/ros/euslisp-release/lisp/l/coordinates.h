static pointer CLO83764();
static pointer (*ftab[19])();

#define QUOTE_STRINGS_SIZE 277
static char *quote_strings[QUOTE_STRINGS_SIZE]={
    "coordinates",
    "matrix-row",
    ":name",
    "replace-matrix",
    "replace",
    "copy-matrix",
    ":create",
    ":coords",
    "*world-coords*",
    "array-dimension",
    "unit-matrix",
    "float-vector",
    ":changed",
    ":local",
    "\"coordinates expected for :move-to\"",
    "(:local local)",
    ":newcoords",
    "(:parent parent :world world)",
    ":worldcoords",
    ":parentcoords",
    ":inverse-transformation",
    "(:local local)",
    "(:parent parent :world world)",
    ":error",
    "\":transform wrt?\"",
    "(local :local)",
    "(parent :parent world :world)",
    "\":transform wrt?\"",
    "(local :local)",
    "(:parent parent :world world nil)",
    ":worldrot",
    "\":rotate wrt?\"",
    "matrixp",
    "\"illegal rotation\"",
    "float-vector-p",
    ":rotate-with-matrix",
    "(:local local)",
    "(:parent parent :world world)",
    "\":rotate wrt?\"",
    "(local :local)",
    "(:parent parent world :world)",
    "\":orient wrt?\"",
    ":orient-with-matrix",
    "(local :local)",
    "(parent :parent world :world)",
    "\":orient wrt?\"",
    "(:local local)",
    ":transform-vector",
    "(:world world :parent parent nil)",
    "\":parent-vector wrt?\"",
    "(:local local)",
    "(:parent parent :world world nil)",
    "\":parent-orientation wrt? wrt must be :world, :local, :parent or coordinates instance\"",
    ":parent-orientation",
    ":parent-vector",
    "scale-matrix",
    "euler-matrix",
    "rpy-matrix",
    "make-matrix",
    ":worldpos",
    "super",
    ":prin1",
    "\"~A ~1,3G ~1,3g ~1,3g / ~1,3g ~1,3g ~1,3g\"",
    "\"\"",
    "\"~A ~1,3g ~1,3g / ~1,3g\"",
    "\"\"",
    "#(:dimension :pos :rot :euler :rpy :axis :angle :at :coords :4x4 :wrt :name :properties)",
    ":euler",
    ":rpy",
    ":replace-coords",
    ":rotate",
    ":4x4",
    ":leaves",
    "send-all",
    "flatten",
    ":transformation",
    ":obey",
    ":copy-coords",
    "delete",
    ":disobey",
    ":dissoc",
    ":update",
    ":dimension",
    "3",
    "2",
    "*world-coords2*",
    "\"dimension?\"",
    ":rotate-vector",
    ":inverse-transform-vector",
    "(:local local)",
    "(:parent parent)",
    "(world :world)",
    "\":transform wrt?\"",
    "(:local local)",
    "(:parent parent)",
    "(world :world)",
    "\":transform wrt?\"",
    "\"coordinates expected for :move-to\"",
    "(:local local)",
    "(:parent parent)",
    "(:world world)",
    "(:local local)",
    "(:parent parent)",
    "(local :local)",
    "(parent :parent)",
    "(:local local)",
    "(parent :parent)",
    "(:local local)",
    "(parent :parent)",
    "(:local local)",
    "(:parent parent)",
    "(:local local)",
    "(:parent parent)",
    "#(:parent :at)",
    "send-message",
    ":init",
    ":rot",
    ":pos",
    ":assoc",
    ":inheritance",
    "send",
    "cascaded-coords",
    "\"GEOMETRY\"",
    "\"GEOMETRY\"",
    ":nicknames",
    "(\"GEO\")",
    "make-package",
    "\"GEOMETRY\"",
    "\"GEOMETRY\"",
    "*package*",
    "\"no such package\"",
    "\"LISP\"",
    "use-package",
    "\"GEOMETRY\"",
    "\"GEOMETRY\"",
    "\"no such package\"",
    "(coords cascoords make-cascoords make-coords transform-coords* transform-coords coordinates-p)",
    "(*world-coords* *world-coords2* coordinates-distance almost-same-coordinates-p)",
    "(coordinates-pos coordinates-rot)",
    "(rot pos)",
    "(parent descendants worldcoords manager changed)",
    ":global",
    ":super",
    "propertied-object",
    ":slots",
    "((rot :type array) (pos :type float-vector))",
    ":metaclass",
    ":element-type",
    ":size",
    ":documentation",
    "make-class",
    "coordinates-p",
    "\"(obj)\"",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class)\"",
    ":x-axis",
    "\"(self class)\"",
    ":y-axis",
    "\"(self class)\"",
    ":z-axis",
    "\"(self class)\"",
    "\"(self class &optional nm)\"",
    "\"(self class c &optional p)\"",
    ":replace-rot",
    "\"(self class r)\"",
    ":replace-pos",
    "\"(self class p)\"",
    "\"(self class c &optional p)\"",
    ":copy-rot",
    "\"(self class)\"",
    ":copy-pos",
    "\"(self class)\"",
    "\"(self class &optional (dest (instance coordinates :create (length pos))))\"",
    "\"(self class &optional (dest (instance coordinates :create (length pos))))\"",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class)\"",
    ":copy-worldcoords",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class)\"",
    ":reset-coords",
    "\"(self class)\"",
    ":move-to",
    "\"(self class c &optional (wrt :local) &aux cc)\"",
    "\"(self class v)\"",
    "\"(self class v)\"",
    "\"(self class vec)\"",
    "\"(self class &optional (dest (instance coordinates :create (length pos))))\"",
    "\"(self class c2 &optional (wrt :local))\"",
    ":transform",
    "\"(self class c &optional (wrt :local))\"",
    "\"(self class mat wrt)\"",
    "\"(self class theta &optional axis (wrt :local))\"",
    "\"(self class mat wrt)\"",
    ":orient",
    "\"(self class theta axis &optional (wrt :local))\"",
    "\"(self class v wrt)\"",
    "\"(self class v wrt)\"",
    ":translate",
    "\"(self class vec &optional (wrt :local))\"",
    ":locate",
    "\"(self class vec &optional (wrt :local))\"",
    ":scale",
    "\"(self class &optional s)\"",
    "\"(self class azimuth elevation rotation)\"",
    ":euler-angle",
    "\"(self class)\"",
    "\"(self class r p y)\"",
    ":rpy-angle",
    "\"(self class)\"",
    ":rotation-angle",
    "\"(self class)\"",
    "\"(self class &optional mat44)\"",
    "\"(self class &optional (strm t) &rest more-args &aux (rpy (send self :worldrot)) (p (send self :worldpos)))\"",
    "\"(self class &optional (dimension 3))\"",
    "\"(self class &key (dimension 3) ((:pos p) (instantiate float-vector dimension)) ((:rot r) (unit-matrix dimension)) (euler nil) (rpy nil) (axis nil) (angle nil) (at nil) (coords at) (4x4 nil) (wrt :local) ((:name nm)) (properties nil) &allow-other-keys)\"",
    "(parent descendants worldcoords manager changed)",
    ":parent",
    "\"(self class)\"",
    ":descendants",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class child &optional c)\"",
    "\"(self class child)\"",
    ":clear-assoc",
    "\"(self class)\"",
    "\"(self class mother)\"",
    "\"(self class mother)\"",
    "\"(self class c &optional p)\"",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class &optional (dest (instance coordinates :create (length pos))))\"",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class v)\"",
    "\"(self class v)\"",
    "\"(self class v)\"",
    "\"(self class &optional (dest (instance coordinates :create)))\"",
    "\"(self class c2 &optional (wrt :local))\"",
    "\"(self class c &optional (wrt :local))\"",
    "\"(self class c &optional (wrt :local) &aux cc)\"",
    "\"(self class mat wrt)\"",
    "\"(self class theta axis &optional (wrt :local))\"",
    "\"(self class mat wrt)\"",
    "\"(self class theta axis &optional (wrt :local))\"",
    "\"(self class v wrt)\"",
    "\"(self class v wrt)\"",
    ":manager",
    "\"(self class &optional m)\"",
    "\"(self class &rest initargs &key ((:parent par)) at &allow-other-keys)\"",
    "transform-coords",
    "\"(c1 c2 &optional (c3 (let ((dim (send c1 :dimension))) (instance coordinates :newcoords (unit-matrix dim) (instantiate float-vector dim)))))\"",
    "transform-coords*",
    "\"(c1 c2 &rest clist &aux cresult)\"",
    "transform-vector",
    "\"(trans vec)\"",
    "make-coords",
    "\"(&rest initargs)\"",
    "make-cascoords",
    "\"(&rest initargs)\"",
    "coords",
    "\"(&rest initargs)\"",
    "cascoords",
    "\"(&rest initargs)\"",
    "wrt",
    "\"(coords vec)\"",
    ":constant",
    "coordinates-distance",
    "\"(c1 c2 &aux (c (send c1 :transformation c2)))\"",
    ":coordinates",
    "\"@(#)$Id$\"",
    "provide",
  };
