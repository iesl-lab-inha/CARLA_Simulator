static pointer (*ftab[7])();

#define QUOTE_STRINGS_SIZE 105
static char *quote_strings[QUOTE_STRINGS_SIZE]={
    ":find",
    ":extend",
    "make-array",
    ":enter",
    "string",
    "send-message",
    "super",
    ":prin1",
    "\"~d/~d\"",
    "#(:not-found :size :test :rehash-size :hash)",
    "eq",
    "sxhash",
    "vector",
    "\"EMPTY\"",
    "\"DEL\"",
    "#(:size :test :rehash-size :hash :not-found)",
    "hash-table",
    ":init",
    ":size",
    ":test",
    ":rehash-size",
    ":hash",
    ":not-found",
    ":get",
    ":delete",
    ":map",
    ":clear",
    ":dequeue",
    "\"nothing queued ~s\"",
    "equal",
    "find",
    ":count",
    "delete",
    "last",
    "\"LISP\"",
    "\"LISP\"",
    "*package*",
    "\"no such package\"",
    "(hash-table make-hash-table gethash sethash remhash hash-table-p maphash clrhash queue)",
    ":global",
    ":super",
    "object",
    ":slots",
    "((key :type vector) (value :type vector) (size :type :integer) (count :type :integer) (hash-function) (test-function) (rehash-size) (empty :type symbol) (deleted :type symbol) (not-found))",
    ":metaclass",
    ":element-type",
    ":documentation",
    "make-class",
    "(hash-table-key hash-table-value hash-table-size hash-table-count hash-table-hash-function hash-table-test-function hash-table-rehash-size)",
    "\"(self class)\"",
    "\"(self class s)\"",
    "\"(self class s)\"",
    "\"(self class sym val)\"",
    "\"(self class sym)\"",
    "\"(self class)\"",
    "\"(self class s)\"",
    "\"map func to the key and its value\"",
    ":list-values",
    "\"(self class)\"",
    ":list-keys",
    "\"(self class)\"",
    ":list",
    "\"(self class)\"",
    ":hash-function",
    "\"(self class &optional hf)\"",
    "\"(self class)\"",
    "\"(self class &optional (strm t) &rest mesgs)\"",
    "\"(self class &key ((:not-found nofound) nil) ((:size s) 10) (test #'eq) ((:rehash-size rehash) 2.0) (hash #'sxhash))\"",
    "make-hash-table",
    "\"(&key (size 10) (test #'eq) (rehash-size 1.7) (hash #'sxhash) (not-found nil))\"",
    "gethash",
    "\"(key htab)\"",
    "sethash",
    "\"(key htab val)\"",
    "remhash",
    "\"(key htab)\"",
    "hash-table-p",
    "\"(x)\"",
    "maphash",
    "\"(func hashtab)\"",
    "clrhash",
    "\"(hashtab)\"",
    "queue",
    "cons",
    "nil",
    "\"(self class)\"",
    ":length",
    "\"(self class)\"",
    ":empty?",
    "\"(self class)\"",
    ":trim",
    "\"(self class s)\"",
    "\"(self class &optional (error-p nil))\"",
    ":enqueue",
    "\"(self class x)\"",
    ":search",
    "\"(self class item &optional (test #'equal))\"",
    "\"(self class item &optional (test #'equal) (count 1))\"",
    ":first",
    "\"(self class)\"",
    ":last",
    "\"(self class)\"",
    ":hashtab",
    "\"@(#)$Id: hashtab.l,v 1.1.1.1 2003/11/20 07:46:31 eus Exp $\"",
    "provide",
  };
