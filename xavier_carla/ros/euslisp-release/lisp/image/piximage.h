static pointer CLO726();
static pointer (*ftab[17])();

#define QUOTE_STRINGS_SIZE 308
static char *quote_strings[QUOTE_STRINGS_SIZE]={
    "integer-vector",
    "make-sequence",
    "send",
    ":init",
    ":width",
    ":height",
    "replace",
    "\"~5,5d \"",
    "\"~a\"",
    ":pixel-hex-string",
    "\"~%\"",
    "send-message",
    "super",
    ":prin1",
    "\"~dx~d\"",
    ":element-type",
    ":bit",
    ":byte",
    ":integer",
    "\"image depth > 32 is not supported\"",
    "make-array",
    "fill",
    ":fill",
    ":set-pixel",
    ":pixel",
    ":duplicate",
    "\"~2,2x \"",
    "halve-image",
    "double-image",
    ":start1",
    ":end1",
    ":start2",
    "xpicture",
    "index-color-image",
    ":display-lut",
    "look-up",
    ":xpicture",
    "display-lut",
    "*gray32*",
    "*viewsurface*",
    ":depth",
    "8",
    ":putimage",
    ":dst-x",
    ":dst-y",
    "16",
    ":to16",
    "24",
    ":to24",
    "32",
    ":to32",
    "\"can't display with the visual of ~s bit depth\"",
    "warn",
    "make-string",
    "+",
    "reduce",
    ":name",
    "\"~a-compressed-gray-scale~d\"",
    ":size",
    "color-image24",
    "\"~d\"",
    "*w",
    "(224 28 3)",
    "(63488 2016 31)",
    ":short",
    "(224 28 3)",
    "\";red=~d ~d  green=~d ~d  blue=~d ~d~%\"",
    "\"~6,6x \"",
    "8",
    "lut",
    "16",
    "24",
    "32",
    "\"can't display with the visual of ~s bit depth\"",
    "grayscale-image",
    ":entity",
    ":component",
    "\"~4,4x \"",
    "\"component of 16bpp image is not yet implemented\"",
    "*",
    "color-image16",
    "color-image32",
    "rgb-to-hls",
    "x::*visual-true-8*",
    "x::visual-masks",
    ":query",
    ":store",
    ":lut",
    ":display",
    "x::*color-map*",
    "*image-colormap*",
    "x::colormap",
    ":create",
    ":ncolors",
    ":define-gray-scale-lut",
    ":gray16",
    "*x-gray16-lut*",
    ":gray32",
    "*x-gray32-lut*",
    ":define-rainbow-lut",
    ":rainbow32",
    "*x-rainbow32-lut*",
    ":rainbow16",
    "*x-rainbow16-lut*",
    ":define-hls-lut",
    ":red16",
    "*x-red16-lut*",
    ":green16",
    "*x-green16-lut*",
    ":blue16",
    "*x-blue16-lut*",
    ":define-lut",
    ":vivid",
    "\"black\"",
    "\"yellow\"",
    "\"green\"",
    "\"blue\"",
    "\"orange\"",
    "\"lightblue\"",
    "\"magenta\"",
    "\"white\"",
    "*x-color-lut*",
    "*256to8*",
    "*256to16*",
    "*256to32*",
    "*gray16*",
    "*rainbow16*",
    "*rainbow32*",
    "*thermo16*",
    "*red16*",
    "*green16*",
    "*blue16*",
    "\"IMAGE\"",
    "\"IMAGE\"",
    "*package*",
    "\"no such package\"",
    "(image-2d single-channel-image bitmap-image grayscale-image index-color-image multi-channel-image split-color-image color-image color-image16 color-image24 color-image32 make-colors make-ximage overlay-edge look-up look-up* look-up2 concatenate-lut make-equilevel-lut pseudo2true *image-colormap* *color-viewer* swap-rgb color-32to24 color-24to32 color-32to8 color-32to8x3 color-24to8 color-24to16 color-24to8x3)",
    "(rgb-to-hls image-correlation image-correlation1 circular-correlation)",
    "\"GEOMETRY\"",
    "use-package",
    ":vtype",
    ":global",
    "*x-gray8-lut*",
    "make-equilevel-lut",
    "\"(levels &optional (size 256))\"",
    "look-up2",
    "\"(src dest lut1 lut2)\"",
    "look-up*",
    "\"(src dest luts &aux p)\"",
    "concatenate-lut",
    "\"(lut1 lut2 &optional (size 256))\"",
    "image-2d",
    ":super",
    "array",
    ":slots",
    "(depth)",
    ":metaclass",
    ":documentation",
    "make-class",
    "single-channel-image",
    "nil",
    "bitmap-image",
    "multi-channel-image",
    "(components)",
    "split-color-image",
    "color-image",
    "(pixel-bytes redshift redwidth greenshift greenwidth blueshift bluewidth)",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class x y)\"",
    "\"(self class x y val)\"",
    "\"(self class &rest args)\"",
    ":copy-from",
    "\"(self class src)\"",
    ":copy",
    "\"(self class)\"",
    ":hex",
    "\"(self class &optional (x 0) (y 0) (w 8) (h 8) (strm t))\"",
    "\"(self class strm &rest msg)\"",
    "\"(self class w h &optional imgvec (deepth 8))\"",
    "\"(self class val)\"",
    ":clear",
    "\"(self class)\"",
    ":transpose",
    "\"(self class &optional (result (instance (class self) :init (send self :height) (send self :width))))\"",
    ":map-picture",
    "\"(self class lut &optional (result (send self :duplicate)))\"",
    ":map",
    "\"(self class fn &optional (result (send self :duplicate)))\"",
    "\"(self class x y)\"",
    "\"(self class x y val)\"",
    "\"(self class x y)\"",
    ":halve",
    "\"(self class &optional (simage))\"",
    ":double",
    "\"(self class &optional (simage))\"",
    ":patch-in",
    "\"(self class xs ys img)\"",
    "\"(self class &optional lut)\"",
    "\"(self class &optional newlut)\"",
    "\"(self class &optional (xw *viewsurface*) (lut) (x 0) (y 0))\"",
    ":subimage",
    "\"(self class x y subwidth subheight)\"",
    "\"(self class xs ys img)\"",
    ":brightest-pixel",
    "\"(self class)\"",
    ":darkest-pixel",
    "\"(self class)\"",
    ":average-pixel",
    "\"(self class)\"",
    ":amplify",
    "\"(self class rate &optional (result (send self :duplicate)) &aux (pict2 (array-entity result)))\"",
    ":compress-gray-scale",
    "\"(self class levels &optional result &aux pict2)\"",
    "\"(self class lut1 &optional (result (send self :duplicate)))\"",
    ":lut2",
    "\"(self class lut1 lut2 &optional (result (send self :duplicate)))\"",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class w h &optional imgvec)\"",
    "\"(self class x y)\"",
    "color-32to24",
    "\"(img32 w h &optional (img24 (make-string (* w h 3))))\"",
    "color-24to32",
    "\"(img24 w h &optional (img32 (make-string (* w h 4))))\"",
    "color-24to8",
    "\"(img24vec w h &optional (img8vec (make-string (*w h))) (masks '(224 28 3)))\"",
    "color-24to16",
    "\"(img24vec w h &optional img16vec (masks '(63488 2016 31)))\"",
    "color-32to8",
    "\"(img32vec w h &optional (img8vec (make-string (* w h))) (masks '(224 28 3)))\"",
    "color-24to6",
    "\"(img24 width height &optional (img6 (make-string (* width height))))\"",
    "color-32to8x3",
    "\"(img32 w h &optional (redvec (make-string (* w h))) (greenvec (make-string (* w h))) (bluevec (make-string (* w h))))\"",
    "color-24to8x3",
    "\"(img24 w h &optional (redvec (make-string (* w h))) (greenvec (make-string (* w h))) (bluevec (make-string (* w h))))\"",
    "swap-rgb",
    "\"(img &optional (step 3))\"",
    ":components",
    "\"(self class)\"",
    "\"(self class w h &optional (colorimg) (deepth 24) (num-components 3))\"",
    "\"(self class)\"",
    ":byte-depth",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class x y)\"",
    "\"(self class x y)\"",
    ":pixel-list",
    "\"(self class x y)\"",
    "\"(self class xs ys img)\"",
    "\"(self class x y subwidth subheight)\"",
    "\"(self class &optional (simage))\"",
    "\"(self class &optional (simage))\"",
    "\"(self class &optional (xw *viewsurface*) (x 0) (y 0))\"",
    "\"(self class n &optional cimg)\"",
    ":red",
    "\"(self class)\"",
    ":green",
    "\"(self class)\"",
    ":blue",
    "\"(self class)\"",
    ":pseudo2true",
    "\"(self class img8)\"",
    ":monochromize",
    "\"(self class &optional (mimg))\"",
    "\"(self class w h &optional img)\"",
    "\"(self class x y)\"",
    "\"(self class x y val)\"",
    "\"(self class x y)\"",
    "\"(self class x y)\"",
    "\"(self class)\"",
    "\"(self class n)\"",
    "\"(self class x y)\"",
    "\"(self class)\"",
    "\"(self class)\"",
    ":from32",
    "\"(self class img32)\"",
    "\"(self class &optional entity32)\"",
    ":hls",
    "\"(self class &optional (hls-image (instance (class self) :init (send self :width) (send self :height))))\"",
    "\"(self class w h &optional imgvec)\"",
    ":from24",
    "\"(self class img24)\"",
    "\"(self class &optional entity24)\"",
    "\"(self class)\"",
    ":to8",
    "\"(self class &optional entity8)\"",
    "\"(self class &optional (hls-image (instance color-image32 :init (send self :width) (send self :height))))\"",
    "\"(self class n &optional (cimg (instance grayscale-image :init (send self :width) (send self :height))))\"",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class)\"",
    "\"(self class &optional (mimg (instance grayscale-image :init (send self :width) (send self :height))))\"",
    "color-to-deep",
    "\"(colpiximg)\"",
    "copy-color-map",
    "\"(src dest n)\"",
    "make-ximage",
    "\"(rawimg &optional (lut *gray32*))\"",
    "make-colors",
    "\"(default-color-map)\"",
    ":piximage",
    "\"#(@)$Id$\"",
    "provide",
  };
