(arrayp function-documentation "
Args: (x)
Returns T if X is an array; NIL otherwise. Remember that vector is array.")
(constantp function-documentation "
Args: (x)
Returns T if KCL is sure that X, when given as a form, always evaluates to a
same value.  Returns NIL otherwise.  Typically used to check whether a symbol
names a constant variable.")
(delete-file function-documentation "
Args: (filespec)
Deletes the specified file.  FILESPEC may be a symbol, a string, a pathname,
or a file stream.")
(disassemble function-documentation "
Args: (&optional (thing nil) &key (h-file nil) (data-file nil))
Compiles the form specified by THING and prints the intermediate C language
code for that form.  But does not install the result of compilation.  If THING
is NIL, then the previously DISASSEMBLEd form is re-DISASSEMBLEd.  If THING is
a symbol that names a function not yet compiled, the function definition is
disassembled.  If THING is a lambda expression, it is disassembled as a
function definition.  Otherwise, THING itself is disassembled as a top-level
form.
H-FILE and DATA-FILE specify intermediate files to build a fasl file from the
C language code.  NIL means \"do not create the file\".")
(listp function-documentation "
Args: (x)
Returns T if X is either a cons or NIL.  Otherwise, returns NIL.")
(package-use-list function-documentation "
Args: (package)
Returns, as a list, those packages that PACKAGE uses.")
(pathnamep function-documentation "
Args: (x)
Returns T if X is a pathname object; NIL otherwise.")
(rplaca function-documentation "
Args: (cons x)
Replaces the car of CONS with X, and returns the modified CONS.")
(string-downcase function-documentation "
Args: (string &key (start 0) (end (length string)))
Returns a copy of STRING with all upper case characters converted to lower
case.  Its destructive version is NSTRING-DOWNCASE.")
(string-not-greaterp function-documentation "
Args: (string1 string2
       &key (start1 0) (end1 (length string1))
            (start2 0) (end2 (length string2)))
Similar to STRING<=, but ignores cases.")
(subsetp function-documentation "
Args: (list1 list2 &key (key #'identity) (test #'eql) test-not)
Returns T if every element of LIST1 is also an element of LIST2.  Returns NIL
otherwise.")
(*trace-output* variable-documentation "
The stream used for trace output.  The initial value is a synonym stream to
*TERMINAL-IO*.")
(typep function-documentation "
Args: (x type)
Returns T if X belongs to TYPE; NIL otherwise.")
(use-package function-documentation "
Args: (package-spec &optional (package *package*))
Causes PACKAGE to use packages specified by PACKAGE-SPEC, in addition to those
packages that PACKAGE already uses.  PACKAGE-SPEC may be a package object, a
string, a symbol, or a list consisting of package objects, strings, and
symbols.")
(vector-pop function-documentation "
Args: (vector)
Decrements the fill-pointer of VECTOR by one and returns the element pointed
to by the new fill-pointer.  Signals an error if the old value of the fill-
pointer is 0 already.")
(zerop function-documentation "
Args: (number)
Returns T if the arg is zero; NIL otherwise.")
(structurep function-documentation "
Args: (x)
KCL specific.
Returns T if X is a structure object defined by DEFSTRUCT; NIL otherwise.")
