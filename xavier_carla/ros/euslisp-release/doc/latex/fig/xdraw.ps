%!PS-Adobe-2.0 EPSF-1.2
%%Creator: SuperPaint
%%Title: Xdraw.ps
%%CreationDate: 95.1.19
%%BoundingBox: 0 0 409 252 
%%Pages 1
%%DocumentFonts: Symbol
%%+Times-Roman
%%+Geneva
%%DocumentNeededFonts: Symbol
%%+Times-Roman
%%+Geneva
%%DocumentProcSets: BeachHead 2 1
%%DocumentSuppliedProcSets: BeachHead 2 1
%%EndComments
%%BeginProcSet: BeachHead 2 2
%% BeachHead - v2.2 Copyright 1991, 1992 Silicon Beach Software, inc. 
userdict /BeachHead known userdict begin /BeachHead 140 dict def BeachHead end begin /ta exch def /BeachHead_version 2 def /isWinPS false def /c 75 string def /sa 75 string def /f false def /g false def /h false def /i false def /k 0.015 def /oldmatrix 6 array def /newmatrix 6 array def
/a{bind def}bind def/b{exch def}a /_doTexturePat false def /_strtxtmatrix null def /nulld { counttomark {null def} repeat pop } a mark /l /m /o /q /r /u /v /w /_cwidths /wa /x /y /z /A /B /D /E/F /G /H /I /J /K /M /N /O /P /Q /R /S /T /V /W /X /Y /ba /ca /da /ea /fa /ga
/ha /ia /ja /ka ta not{/la /ma}if /_strtxtmatrix nulld /ra 256 array def
ra dup dup 0 /Times-Roman findfont /Encoding get 0 128 getinterval putinterval
39 /quotesingle put 96 /grave put /Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve
/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent
/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute
/dieresis/notequal/AE/Oslash/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff
/summation/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash/questiondown
/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft/guillemotright
/ellipsis/blank/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright
/quoteleft/quoteright/divide/lozenge/ydieresis/Ydieresis/fraction/currency/guilsinglleft
/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron ra 128 128 getinterval astore pop /winvec 256 array def ra winvec copy pop winvec 15{dup}repeat 161 /ring put 178 /Scaron put 182 /eth put 184 /Thorn put 185 /thorn put 195 /scaron put 198 /Eth put 222 
/hyphen put 223 /twosuperior put 225 /threesuperior put 240 
/onequarter put 249 /onehalf put 250 /periodcentered put 252 /cedilla put 253 /multiply put 254 /Yacute put version cvr 51 ge 
{ winvec 245 /onesuperior put winvec 251 /threequarters put winvec 255 /yacute put } if /d { 0 1 74 { c exch 0 put } for dup c cvs pop c } a /qa { 0 1 74 { sa exch 0 put } for dup sa cvs pop sa 74 1 put } a /e { d 74 2 put } a /addoblique { /g true def } a /addheavy 
{ /f true def } a /adduline { /h true def } a /findshadowfont 
{ findoutlinefont /i true def } a /findoutlinefont { findbeachheadfont j } a /findbeachheadfont { /f false def /g false def /h false def /i false def
dup findfont dup /FontType get 0 ne	{ /Encoding get dup 161 get exch 162 get /cent eq exch /exclamdown eq and { userdict /BeachHead get begin qa FontDirectory sa known { pop sa findfont } {
findfont dup length 1 add dict /o b { 1 index /FID ne 2 index /UniqueID ne and { o 3 1 roll put } { pop pop } ifelse } forall /FontName sa dup length string copy def
o /Encoding isWinPS {winvec}{ra} ifelse put sa o definefont } ifelse end }{ findfont } ifelse }{ exch pop } ifelse } a /j { userdict /BeachHead get begin dup /FontName get e FontDirectory c known { pop pop c findfont } { exch dup /FontType get 0 eq { { 1 index /FID ne 2 index 
/UniqueID ne and {def} {pop pop} ifelse }forall currentdict end dup dup /FDepVector get [ exch {j} forall
] /FDepVector exch put exch e pop c exch definefont } { 12 dict begin dup /l b /FontType 3 def /FontMatrix [1 0 0 1 0 0] def /FontBBox [0 0 1 1] def /Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for dup exch maxlength 2 add dict begin { 1 index /FID ne 2 index /UniqueID ne and {def} {pop pop} ifelse
}forall /PaintType 2 def /StrokeWidth 1 0 FontMatrix dtransform dup mul exch dup mul add sqrt .012 exch div def
currentdict end /_dummy exch definefont /r b /m 1 string def /FontType 3 def /BuildChar { exch begin m 0 3 -1 roll put r setfont m stringwidth setcharwidth l setfont userdict /BeachHead get /i get { .05 -.05 moveto m show } if reversecolor 0 0 moveto m show reversecolor r 
setfont 0 0 moveto m show end } a
currentdict end exch e pop c exch definefont } ifelse } ifelse end } a /EPSBegin { save userdict /BeachHead get begin /la b count /ma b end userdict /showpage {} put
0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin 10 setmiterlimit [] 0 setdash newpath } a /EPSEnd { userdict /BeachHead get begin count ma sub dup 0 gt {{pop}repeat} {pop}ifelse la end restore } a /cimage { userdict /BeachHead get begin { {readstring} } { {readhexstring} }
ifelse /u b /colorimage where
{ pop 4 index dup string /v b dup string /w b dup string /x b dup string /y b string /z b { currentfile v u pop } { currentfile w u pop }
{ currentfile x u pop } { currentfile y u pop currentfile z u pop pop } 5 -1 roll { true 4 A } { true 4 /colorimage load exec } ifelse }
{ 4 index dup string /z b 4 mul string /B b { currentfile B u pop pop currentfile z u pop }
exch { transimage } { /image load exec } ifelse } ifelse end } a /bhshow { userdict /BeachHead get begin gsave g { [1 0 .17 1 0 0] concat } if f {
/_x1 12 k mul def currentpoint 3 copy _y1 add exch _x1 add exch moveto show 3 copy _y1 add exch _x1 sub exch moveto show 3 copy _y1 sub exch _x1 add exch moveto
show 3 copy _y1 sub exch _x1 sub exch moveto show moveto } if show grestore end } a /C { D { gsave
E F 3 index idtransform translate G 1 4 index 4 index {H} /image load exec grestore /I 0 def /G 0 def /D false def } if } a /transimage { userdict /BeachHead get begin
2 index 8 ne { /image load exec } { 4 index cvi string /H b /J 0 string def /K 0 def /D false def /I 0 def /G 0 def 0 1 5 index 1 sub { /F b 0 1 6 index 1 sub { K J length ge {
1 index dup type /stringtype ne { exec } if /J b /K 0 def } if J K get /K K 1 add def dup 255 eq { pop pop C } { H I 3 -1 roll put /I I 1 add def /G G 1 add def D not { /E b /G 1 def /D true def } { pop } ifelse } ifelse } for C } for 5{pop}repeat } ifelse end } a /L { D { gsave
E F 8 index idtransform translate I 1 8 9 index {M} {N} {O} {P} true 4 /colorimage	load exec grestore /I 0 def /D false def } if } a /A {
9 index cvi dup string /M b dup string /N b dup string /O b string /P b /Q 0 string def /K 0 def /D false def /I 0 def /G 0 def 0 1 10 index 1 sub { /F b 0 1 11 index 1 sub { K Q length ge {
6 index exec /R b 5 index exec /S b 4 index exec /T b 3 index exec /Q b /K 0 def } if
R K get S K get T K get Q K get /K K 1 add def dup 0 eq 2 index 0 eq and 3 index 0 eq and 4 index 0 eq and { 5{pop}repeat L } { M I 6 -1 roll put N I 5 -1 roll put O I 4 -1 roll put P I 3 -1 roll put /I I 1 add def D not { /E b /D true def } { pop } ifelse } ifelse
} for L } for 10{pop}repeat } a /bps 8 string def /bpm [8 0 0 8 0 0] def /bpp { bps } def /overlaybackpat { userdict /BeachHead get begin gsave
setrgbcolor bps copy pop dup 0 get 8 div floor cvi 8 mul 1 index 2 get 8 div floor cvi 8 mul 2 index 1 get 8 div floor cvi 8 mul 8 4 index 3 get 8 div floor cvi 8 mul { 2 index 8 3 index { 1 index gsave translate 8 8 scale 8 8 false bpm /bpp load imagemask grestore } for pop }
for pop pop pop grestore end } a /U { userdict /BeachHead get begin /V b /W b
countdictstack save V 2 add 2 roll count V sub /X b /W load end { exec } stopped userdict /BeachHead get begin
/Y b count X sub { pop } repeat Y 3 1 roll restore countdictstack exch sub { end } repeat end } a /Z ( ) def /aa { moveto {
ba setfont Z end gsave 0 setgray stringwidth grestore
userdict /BeachHead get begin rmoveto /ca load null ne { /da da 1 add def da ea length 1 sub le { fa ea da get ca } if } { ax ay rmoveto fa ga eq { cx cy rmoveto } if } ifelse
} stopped currentdict userdict /BeachHead get ne { userdict /BeachHead get begin }if } a /filltextpath { userdict /BeachHead get begin
/ea b dup type dup /integertype eq exch /realtype eq or { /ay b /ax b /ga b /cy b /cx b /ca null def } { /wa 0 def /ca b } ifelse /ha b /ia b ia { userdict /BeachHead get /i get { gsave 0 setgray /ca load null ne { /ca load ea kshow /wa 0 def } { cx cy ga ax ay ea awidthshow } 
ifelse grestore } if } if gsave currentfont ia 
{ begin r FontMatrix makefont l FontMatrix makefont end } { null exch } ifelse /ja b /ka b /ba currentfont def _doTexturePat 
{ systemdict /makepattern known } { false }ifelse { matrix currentmatrix _strtxtmatrix null ne { _strtxtmatrix setmatrix } if 1 -1 scale txTrnsX txTrnsY translate settexturepat setmatrix /da 0 def ea { /fa b Z 0 fa put ja setfont currentpoint Z show aa {exit} if } forall } {
10 setlinewidth /da 0 def currentpoint newpath 0 dup dup dup moveto lineto closepath moveto ea {
/fa b Z 0 fa put currentpoint ja setfont count 1 add dup 1 roll Z true { charpath } stopped count count -1 roll sub { pop } repeat currentpoint {ha} 0 U pop newpath 0 dup dup dup moveto lineto closepath moveto aa {exit} if } forall } grestore ka null ne { /wa 0 def gsave 0 setgray
/da 0 def ea { /fa b Z 0 fa put ka setfont 
currentpoint Z show aa {exit} if } forall grestore } if /_doTexturePat false def /_strtxtmatrix null def end } a /reversecolor { 1
currentrgbcolor 1 index eq 3 1 roll eq and { currentgray sub } if setgray } a /ftpkproc
{ pop Z 0 3 -1 roll put Z stringwidth neg exch neg exch rmoveto userdict /BeachHead get begin
_cwidths wa get /wa wa 1 add def _cwidths wa get /wa wa 1 add def rmoveto end } a /xa { userdict /BeachHead get begin
pop pop Z 0 3 -1 roll put currentpoint Z bhshow moveto _cwidths pa get /pa pa 1 add def _cwidths pa get /pa pa 1 add def rmoveto end } a
/na[256{0}repeat]def mark 161 176 173 185 176 165 177 177 178 163 179 179 181 109 182 182 183 229 184 213 185 112 186 242 189 87 195 214 197 187 198 68 214 184 215 224 240 240
counttomark 2 div cvi {na 3 1 roll put} repeat pop /krnshow
{ dup type dup /integertype ne exch /realtype ne and {12} if
/Symbol findfont exch scalefont /oa b /ua currentfont def /pa 0 def systemdict /cshow known currentfont /FontType get 0 eq and { /_cwidths b /xa load cshow } { exch {
dup na exch get dup 0 eq isWinPS or { pop Z 0 3 -1 roll put currentpoint Z userdict begin bhshow end moveto }
{ oa setfont Z 0 3 -1 roll put currentpoint Z bhshow moveto ua setfont pop } ifelse dup pa get /pa pa 1 add def 1 index pa get /pa pa 1 add def rmoveto } forall pop } ifelse } a /setcmykcolor where
{ pop /bhsetcmykcolor/setcmykcolor load def } { /bhsetcmykcolor { 4 1 roll 3{ 3 index add neg 1 add dup 0 lt {pop 0}if 3 1 roll }repeat setrgbcolor pop
}a }ifelse end 
%%EndProcSet
%%EndProlog
%%BeginSetup
userdict/BeachHead get begin
%%EndSetup
%%Page One 1
newpath
0 0 moveto
0 252 lineto
409 252 lineto
409 0 lineto closepath clip
gsave
-94 291 translate
1 -1 scale
newpath 94 39 moveto 503 39 lineto 503 291 lineto 94 291 lineto 94 39 lineto closepath 
1 setgray
eofill
newpath 94.5 39.5 moveto 502.5 39.5 lineto 502.5 290.5 lineto 94.5 290.5 lineto 94.5 39.5 lineto closepath 
0 setgray
1 setlinewidth stroke
newpath 335.5 110.5 moveto
462.5 110.5 lineto
0 setgray
currentlinecap 2 setlinecap
1 setlinewidth stroke
setlinecap
/Times-Roman findbeachheadfont 18 scalefont setfont
gsave
338 110 translate 1 -1 scale 0 0 moveto
0 setgray
(abcdefghijkXYZ)
[8 0 9 0 8 0 9 0 8 0 6 0 9 0 9 0 5 0 5 0 9 0 13 0 13 0 11 0 ]
18 krnshow
grestore
/Geneva findbeachheadfont 14 scalefont setfont
gsave
304 143 translate 1 -1 scale 0 0 moveto
0 setgray
(\(x, y\))
[6 0 9 0 4 0 4 0 9 0 6 0 ]
14 krnshow
grestore
newpath 153 68 moveto 267 68 lineto 267 126 lineto 153 126 lineto 153 68 lineto closepath 
1 setgray
eofill
newpath 153.5 68.5 moveto 266.5 68.5 lineto 266.5 125.5 lineto 153.5 125.5 lineto 153.5 68.5 lineto closepath 
0 setgray
1 setlinewidth stroke
/Geneva findbeachheadfont 12 scalefont setfont
gsave
143 63 translate 1 -1 scale 0 0 moveto
0 setgray
(\(x,y\))
[5 0 7 0 4 0 7 0 5 0 ]
12 krnshow
grestore
gsave
202 144 translate 1 -1 scale 0 0 moveto
0 setgray
(width)
[11 0 5 0 7 0 6 0 7 0 ]
12 krnshow
grestore
gsave
183 100 translate 1 -1 scale 0 0 moveto
0 setgray
(rectangle)
[6 0 7 0 7 0 6 0 7 0 7 0 7 0 5 0 7 0 ]
12 krnshow
grestore
newpath matrix currentmatrix
1.81 1 scale
115.224 206 31.5 0 360 arc
setmatrix
closepath 
0 setgray
1 setlinewidth stroke
newpath 151.5 174.5 moveto 266.5 174.5 lineto 266.5 237.5 lineto 151.5 237.5 lineto 151.5 174.5 lineto closepath 
0 setgray
1 setlinewidth stroke
newpath 152.5 206.5 moveto
267.5 206.5 lineto
0 setgray
currentlinecap 2 setlinecap
1 setlinewidth stroke
setlinecap
newpath 209.5 175.5 moveto
209.5 237.5 lineto
0 setgray
currentlinecap 2 setlinecap
1 setlinewidth stroke
setlinecap
newpath matrix currentmatrix
1.607 1 scale
135.383 207 30.5 270 0 arc
setmatrix

0 setgray
1 setlinewidth stroke
newpath 209.5 206.5 moveto
266.5 206.5 lineto
0 setgray
currentlinecap 2 setlinecap
1 setlinewidth stroke
setlinecap
newpath 218.5 176.5 moveto
209.5 206.5 lineto
0 setgray
currentlinecap 2 setlinecap
1 setlinewidth stroke
setlinecap
newpath matrix currentmatrix
0.632 1 scale
336.458 206 9.5 270 0 arc
setmatrix

0 setgray
1 setlinewidth stroke
gsave
130 170 translate 1 -1 scale 0 0 moveto
0 setgray
(\(x,y\))
[5 0 7 0 4 0 7 0 5 0 ]
12 krnshow
grestore
gsave
194 256 translate 1 -1 scale 0 0 moveto
0 setgray
(width)
[11 0 5 0 7 0 6 0 7 0 ]
12 krnshow
grestore
gsave
270 205 translate 1 -1 scale 0 0 moveto
0 setgray
(start-)
[7 0 6 0 7 0 6 0 6 0 7 0 ]
12 krnshow
grestore
gsave
270 221 translate 1 -1 scale 0 0 moveto
0 setgray
( angle)
[4 0 7 0 7 0 7 0 5 0 7 0 ]
12 krnshow
grestore
gsave
193 167 translate 1 -1 scale 0 0 moveto
0 setgray
(end-angle)
[7 0 7 0 7 0 7 0 7 0 7 0 7 0 5 0 7 0 ]
12 krnshow
grestore
gsave
310 95 translate 1 -1 scale 0 0 moveto
0 setgray
(string)
[7 0 6 0 6 0 5 0 7 0 7 0 ]
12 krnshow
grestore
newpath 363.5 90.5 moveto 420.5 90.5 lineto 420.5 142.5 lineto 363.5 142.5 lineto 363.5 90.5 lineto closepath 
0 setgray
1 setlinewidth stroke
newpath 395.5 85.5 moveto 436.5 85.5 lineto 436.5 168.5 lineto 395.5 168.5 lineto 395.5 85.5 lineto closepath 
0 setgray
1 setlinewidth stroke
newpath 383 133 moveto 472 133 lineto 472 155 lineto 383 155 lineto 383 133 lineto closepath 
1 setgray
eofill
/Times-Roman findbeachheadfont 18 scalefont setfont
gsave
386 148 translate 1 -1 scale 0 0 moveto
0 setgray
(imagestring)
[5 0 14 0 8 0 9 0 8 0 7 0 5 0 6 0 5 0 9 0 9 0 ]
18 krnshow
grestore
newpath 164.5 244.5 moveto
253.5 244.5 lineto
0 setgray
currentlinecap 2 setlinecap
1 setlinewidth stroke
setlinecap
newpath 164 244 moveto 164 239 lineto 152 244 lineto 164 249 lineto 164 244 lineto closepath 
0 setgray
eofill
newpath 253 244 moveto 253 249 lineto 265 244 lineto 253 239 lineto 253 244 lineto closepath 
0 setgray
eofill
newpath 141.5 226.5 moveto
141.5 187.5 lineto
0 setgray
currentlinecap 2 setlinecap
1 setlinewidth stroke
setlinecap
newpath 141 226 moveto 136 226 lineto 141 238 lineto 146 226 lineto 141 226 lineto closepath 
0 setgray
eofill
newpath 141 187 moveto 146 187 lineto 141 175 lineto 136 187 lineto 141 187 lineto closepath 
0 setgray
eofill
newpath 109 200 moveto 149 200 lineto 149 216 lineto 109 216 lineto 109 200 lineto closepath 
1 setgray
eofill
/Geneva findbeachheadfont 12 scalefont setfont
gsave
110 212 translate 1 -1 scale 0 0 moveto
0 setgray
(height)
[7 0 7 0 5 0 7 0 7 0 6 0 ]
12 krnshow
grestore
newpath 141.5 117.5 moveto
141.5 81.5 lineto
0 setgray
currentlinecap 2 setlinecap
1 setlinewidth stroke
setlinecap
newpath 141 117 moveto 136 117 lineto 141 128 lineto 146 117 lineto 141 117 lineto closepath 
0 setgray
eofill
newpath 141 81 moveto 146 81 lineto 141 69 lineto 136 81 lineto 141 81 lineto closepath 
0 setgray
eofill
newpath 164.5 131.5 moveto
255.5 131.5 lineto
0 setgray
currentlinecap 2 setlinecap
1 setlinewidth stroke
setlinecap
newpath 164 131 moveto 164 126 lineto 152 131 lineto 164 136 lineto 164 131 lineto closepath 
0 setgray
eofill
newpath 255 131 moveto 255 136 lineto 267 131 lineto 255 126 lineto 255 131 lineto closepath 
0 setgray
eofill
newpath 335 110 moveto 330 124 lineto 327 122 lineto 324 120 lineto 335 110 lineto closepath 
0 setgray
eofill
newpath 327.5 122.5 moveto
320.5 133.5 lineto
0 setgray
currentlinecap 2 setlinecap
1 setlinewidth stroke
setlinecap
newpath 109 91 moveto 149 91 lineto 149 107 lineto 109 107 lineto 109 91 lineto closepath 
1 setgray
eofill
gsave
110 103 translate 1 -1 scale 0 0 moveto
0 setgray
(height)
[7 0 7 0 5 0 7 0 7 0 6 0 ]
12 krnshow
grestore
gsave
187 217 translate 1 -1 scale 0 0 moveto
0 setgray
(arc)
[7 0 6 0 7 0 ]
12 krnshow
grestore
newpath 418 258 moveto matrix currentmatrix
1.774 1 scale
235.6 258 31 180 270 arc
setmatrix
418 258 lineto closepath 
0 setgray
eofill
newpath matrix currentmatrix
1.787 1 scale
233.927 258 30.5 180 270 arc
setmatrix

0 setgray
1 setlinewidth stroke
gsave
398 187 translate 1 -1 scale 0 0 moveto
0 setgray
(start-)
[7 0 6 0 7 0 6 0 6 0 7 0 ]
12 krnshow
grestore
gsave
398 203 translate 1 -1 scale 0 0 moveto
0 setgray
( angle)
[4 0 7 0 7 0 7 0 5 0 7 0 ]
12 krnshow
grestore
gsave
282 261 translate 1 -1 scale 0 0 moveto
0 setgray
(end-angle)
[7 0 7 0 7 0 7 0 7 0 7 0 7 0 5 0 7 0 ]
12 krnshow
grestore
gsave
425 261 translate 1 -1 scale 0 0 moveto
0 setgray
(fill-arc)
[6 0 5 0 5 0 5 0 7 0 7 0 6 0 7 0 ]
12 krnshow
grestore
newpath 418.5 258.5 moveto
418.5 223.03534 lineto
0 setgray
currentlinecap 2 setlinecap
1 setlinewidth stroke
setlinecap
newpath 418.5 222.78534 moveto
423.92841 222.78534 lineto
418.5 210.35715 lineto
413.07159 222.78534 lineto
418.5 222.78534 lineto
0 setgray
fill
newpath 418.5 257.5 moveto
359.03534 257.5 lineto
0 setgray
currentlinecap 2 setlinecap
1 setlinewidth stroke
setlinecap
newpath 358.78534 257.5 moveto
358.78534 252.07159 lineto
346.35715 257.5 lineto
358.78534 262.92841 lineto
358.78534 257.5 lineto
0 setgray
fill
grestore
showpage
%%Trailer
end
