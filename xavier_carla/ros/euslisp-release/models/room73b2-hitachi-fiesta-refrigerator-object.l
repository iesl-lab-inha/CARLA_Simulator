;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass room73b2-hitachi-fiesta-refrigerator-object
  :super cascaded-link
  :slots (sensors
         handle0 handle1 handle2 handle3
         joint0 joint1 joint2 joint3 joint4 joint5 ))
(defmethod room73b2-hitachi-fiesta-refrigerator-object
  (:init
   (&rest args &key (name "room73b2-hitachi-fiesta-refrigerator") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0 blink1 blink2 blink3 blink4 blink5 blink6
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :root
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 275.0 270.0 1450.0) (float-vector -275.0 270.0 1450.0) (float-vector -275.0 -270.0 1450.0) (float-vector 275.0 -270.0 1450.0)))
         (instance face :init :vertices (list (float-vector -275.0 270.0 1420.0) (float-vector 275.0 270.0 1420.0) (float-vector 275.0 -270.0 1420.0) (float-vector -275.0 -270.0 1420.0)))
         (instance face :init :vertices (list (float-vector 275.0 270.0 1450.0) (float-vector 275.0 270.0 1420.0) (float-vector -275.0 270.0 1420.0) (float-vector -275.0 270.0 1450.0)))
         (instance face :init :vertices (list (float-vector 275.0 -270.0 1450.0) (float-vector 275.0 -270.0 1420.0) (float-vector 275.0 270.0 1420.0) (float-vector 275.0 270.0 1450.0)))
         (instance face :init :vertices (list (float-vector -275.0 -270.0 1450.0) (float-vector -275.0 -270.0 1420.0) (float-vector 275.0 -270.0 1420.0) (float-vector 275.0 -270.0 1450.0)))
         (instance face :init :vertices (list (float-vector -275.0 270.0 1450.0) (float-vector -275.0 270.0 1420.0) (float-vector -275.0 -270.0 1420.0) (float-vector -275.0 -270.0 1450.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 275.0 270.0 50.0) (float-vector -275.0 270.0 50.0) (float-vector -275.0 -270.0 50.0) (float-vector 275.0 -270.0 50.0)))
         (instance face :init :vertices (list (float-vector -275.0 270.0 0.0) (float-vector 275.0 270.0 0.0) (float-vector 275.0 -270.0 0.0) (float-vector -275.0 -270.0 0.0)))
         (instance face :init :vertices (list (float-vector 275.0 270.0 50.0) (float-vector 275.0 270.0 0.0) (float-vector -275.0 270.0 0.0) (float-vector -275.0 270.0 50.0)))
         (instance face :init :vertices (list (float-vector 275.0 -270.0 50.0) (float-vector 275.0 -270.0 0.0) (float-vector 275.0 270.0 0.0) (float-vector 275.0 270.0 50.0)))
         (instance face :init :vertices (list (float-vector -275.0 -270.0 50.0) (float-vector -275.0 -270.0 0.0) (float-vector 275.0 -270.0 0.0) (float-vector 275.0 -270.0 50.0)))
         (instance face :init :vertices (list (float-vector -275.0 270.0 50.0) (float-vector -275.0 270.0 0.0) (float-vector -275.0 -270.0 0.0) (float-vector -275.0 -270.0 50.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -245.0 240.0 1420.0) (float-vector -275.0 240.0 1420.0) (float-vector -275.0 -240.0 1420.0) (float-vector -245.0 -240.0 1420.0)))
         (instance face :init :vertices (list (float-vector -275.0 240.0 50.0) (float-vector -245.0 240.0 50.0) (float-vector -245.0 -240.0 50.0) (float-vector -275.0 -240.0 50.0)))
         (instance face :init :vertices (list (float-vector -245.0 240.0 1420.0) (float-vector -245.0 240.0 50.0) (float-vector -275.0 240.0 50.0) (float-vector -275.0 240.0 1420.0)))
         (instance face :init :vertices (list (float-vector -245.0 -240.0 1420.0) (float-vector -245.0 -240.0 50.0) (float-vector -245.0 240.0 50.0) (float-vector -245.0 240.0 1420.0)))
         (instance face :init :vertices (list (float-vector -275.0 -240.0 1420.0) (float-vector -275.0 -240.0 50.0) (float-vector -245.0 -240.0 50.0) (float-vector -245.0 -240.0 1420.0)))
         (instance face :init :vertices (list (float-vector -275.0 240.0 1420.0) (float-vector -275.0 240.0 50.0) (float-vector -275.0 -240.0 50.0) (float-vector -275.0 -240.0 1420.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 275.0 270.0 1420.0) (float-vector -275.0 270.0 1420.0) (float-vector -275.0 240.0 1420.0) (float-vector 275.0 240.0 1420.0)))
         (instance face :init :vertices (list (float-vector -275.0 270.0 50.0) (float-vector 275.0 270.0 50.0) (float-vector 275.0 240.0 50.0) (float-vector -275.0 240.0 50.0)))
         (instance face :init :vertices (list (float-vector 275.0 270.0 1420.0) (float-vector 275.0 270.0 50.0) (float-vector -275.0 270.0 50.0) (float-vector -275.0 270.0 1420.0)))
         (instance face :init :vertices (list (float-vector 275.0 240.0 1420.0) (float-vector 275.0 240.0 50.0) (float-vector 275.0 270.0 50.0) (float-vector 275.0 270.0 1420.0)))
         (instance face :init :vertices (list (float-vector -275.0 240.0 1420.0) (float-vector -275.0 240.0 50.0) (float-vector 275.0 240.0 50.0) (float-vector 275.0 240.0 1420.0)))
         (instance face :init :vertices (list (float-vector -275.0 270.0 1420.0) (float-vector -275.0 270.0 50.0) (float-vector -275.0 240.0 50.0) (float-vector -275.0 240.0 1420.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 275.0 -240.0 1420.0) (float-vector -275.0 -240.0 1420.0) (float-vector -275.0 -270.0 1420.0) (float-vector 275.0 -270.0 1420.0)))
         (instance face :init :vertices (list (float-vector -275.0 -240.0 50.0) (float-vector 275.0 -240.0 50.0) (float-vector 275.0 -270.0 50.0) (float-vector -275.0 -270.0 50.0)))
         (instance face :init :vertices (list (float-vector 275.0 -240.0 1420.0) (float-vector 275.0 -240.0 50.0) (float-vector -275.0 -240.0 50.0) (float-vector -275.0 -240.0 1420.0)))
         (instance face :init :vertices (list (float-vector 275.0 -270.0 1420.0) (float-vector 275.0 -270.0 50.0) (float-vector 275.0 -240.0 50.0) (float-vector 275.0 -240.0 1420.0)))
         (instance face :init :vertices (list (float-vector -275.0 -270.0 1420.0) (float-vector -275.0 -270.0 50.0) (float-vector 275.0 -270.0 50.0) (float-vector 275.0 -270.0 1420.0)))
         (instance face :init :vertices (list (float-vector -275.0 -240.0 1420.0) (float-vector -275.0 -240.0 50.0) (float-vector -275.0 -270.0 50.0) (float-vector -275.0 -270.0 1420.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 275.0 240.0 535.0) (float-vector -245.0 240.0 535.0) (float-vector -245.0 -240.0 535.0) (float-vector 275.0 -240.0 535.0)))
         (instance face :init :vertices (list (float-vector -245.0 240.0 505.0) (float-vector 275.0 240.0 505.0) (float-vector 275.0 -240.0 505.0) (float-vector -245.0 -240.0 505.0)))
         (instance face :init :vertices (list (float-vector 275.0 240.0 535.0) (float-vector 275.0 240.0 505.0) (float-vector -245.0 240.0 505.0) (float-vector -245.0 240.0 535.0)))
         (instance face :init :vertices (list (float-vector 275.0 -240.0 535.0) (float-vector 275.0 -240.0 505.0) (float-vector 275.0 240.0 505.0) (float-vector 275.0 240.0 535.0)))
         (instance face :init :vertices (list (float-vector -245.0 -240.0 535.0) (float-vector -245.0 -240.0 505.0) (float-vector 275.0 -240.0 505.0) (float-vector 275.0 -240.0 535.0)))
         (instance face :init :vertices (list (float-vector -245.0 240.0 535.0) (float-vector -245.0 240.0 505.0) (float-vector -245.0 -240.0 505.0) (float-vector -245.0 -240.0 535.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 275.0 240.0 845.0) (float-vector -245.0 240.0 845.0) (float-vector -245.0 -240.0 845.0) (float-vector 275.0 -240.0 845.0)))
         (instance face :init :vertices (list (float-vector -245.0 240.0 815.0) (float-vector 275.0 240.0 815.0) (float-vector 275.0 -240.0 815.0) (float-vector -245.0 -240.0 815.0)))
         (instance face :init :vertices (list (float-vector 275.0 240.0 845.0) (float-vector 275.0 240.0 815.0) (float-vector -245.0 240.0 815.0) (float-vector -245.0 240.0 845.0)))
         (instance face :init :vertices (list (float-vector 275.0 -240.0 845.0) (float-vector 275.0 -240.0 815.0) (float-vector 275.0 240.0 815.0) (float-vector 275.0 240.0 845.0)))
         (instance face :init :vertices (list (float-vector -245.0 -240.0 845.0) (float-vector -245.0 -240.0 815.0) (float-vector 275.0 -240.0 815.0) (float-vector 275.0 -240.0 845.0)))
         (instance face :init :vertices (list (float-vector -245.0 240.0 845.0) (float-vector -245.0 240.0 815.0) (float-vector -245.0 -240.0 815.0) (float-vector -245.0 -240.0 845.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :ivory1)
     (send (elt bc 1) :set-color :ivory1)
     (send (elt bc 2) :set-color :ivory1)
     (send (elt bc 3) :set-color :ivory1)
     (send (elt bc 4) :set-color :ivory1)
     (send (elt bc 5) :set-color :ivory1)
     (send (elt bc 6) :set-color :ivory1)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :root :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :room73b2-hitachi-fiesta-refrigerator-bodyset2
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 150.0 240.0 5.0) (float-vector -150.0 240.0 5.0) (float-vector -150.0 -240.0 5.0) (float-vector 150.0 -240.0 5.0)))
         (instance face :init :vertices (list (float-vector -150.0 240.0 -5.0) (float-vector 150.0 240.0 -5.0) (float-vector 150.0 -240.0 -5.0) (float-vector -150.0 -240.0 -5.0)))
         (instance face :init :vertices (list (float-vector 150.0 240.0 5.0) (float-vector 150.0 240.0 -5.0) (float-vector -150.0 240.0 -5.0) (float-vector -150.0 240.0 5.0)))
         (instance face :init :vertices (list (float-vector 150.0 -240.0 5.0) (float-vector 150.0 -240.0 -5.0) (float-vector 150.0 240.0 -5.0) (float-vector 150.0 240.0 5.0)))
         (instance face :init :vertices (list (float-vector -150.0 -240.0 5.0) (float-vector -150.0 -240.0 -5.0) (float-vector 150.0 -240.0 -5.0) (float-vector 150.0 -240.0 5.0)))
         (instance face :init :vertices (list (float-vector -150.0 240.0 5.0) (float-vector -150.0 240.0 -5.0) (float-vector -150.0 -240.0 -5.0) (float-vector -150.0 -240.0 5.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :ivory1)
     (setq blink6 (instance bodyset-link :init (make-cascoords) :bodies bc :name :room73b2-hitachi-fiesta-refrigerator-bodyset2 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :room73b2-hitachi-fiesta-refrigerator-bodyset3
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 150.0 240.0 5.0) (float-vector -150.0 240.0 5.0) (float-vector -150.0 -240.0 5.0) (float-vector 150.0 -240.0 5.0)))
         (instance face :init :vertices (list (float-vector -150.0 240.0 -5.0) (float-vector 150.0 240.0 -5.0) (float-vector 150.0 -240.0 -5.0) (float-vector -150.0 -240.0 -5.0)))
         (instance face :init :vertices (list (float-vector 150.0 240.0 5.0) (float-vector 150.0 240.0 -5.0) (float-vector -150.0 240.0 -5.0) (float-vector -150.0 240.0 5.0)))
         (instance face :init :vertices (list (float-vector 150.0 -240.0 5.0) (float-vector 150.0 -240.0 -5.0) (float-vector 150.0 240.0 -5.0) (float-vector 150.0 240.0 5.0)))
         (instance face :init :vertices (list (float-vector -150.0 -240.0 5.0) (float-vector -150.0 -240.0 -5.0) (float-vector 150.0 -240.0 -5.0) (float-vector 150.0 -240.0 5.0)))
         (instance face :init :vertices (list (float-vector -150.0 240.0 5.0) (float-vector -150.0 240.0 -5.0) (float-vector -150.0 -240.0 -5.0) (float-vector -150.0 -240.0 5.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :ivory1)
     (setq blink5 (instance bodyset-link :init (make-cascoords) :bodies bc :name :room73b2-hitachi-fiesta-refrigerator-bodyset3 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :room73b2-hitachi-fiesta-refrigerator-bodyset4
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 150.0 240.0 5.0) (float-vector -150.0 240.0 5.0) (float-vector -150.0 -240.0 5.0) (float-vector 150.0 -240.0 5.0)))
         (instance face :init :vertices (list (float-vector -150.0 240.0 -5.0) (float-vector 150.0 240.0 -5.0) (float-vector 150.0 -240.0 -5.0) (float-vector -150.0 -240.0 -5.0)))
         (instance face :init :vertices (list (float-vector 150.0 240.0 5.0) (float-vector 150.0 240.0 -5.0) (float-vector -150.0 240.0 -5.0) (float-vector -150.0 240.0 5.0)))
         (instance face :init :vertices (list (float-vector 150.0 -240.0 5.0) (float-vector 150.0 -240.0 -5.0) (float-vector 150.0 240.0 -5.0) (float-vector 150.0 240.0 5.0)))
         (instance face :init :vertices (list (float-vector -150.0 -240.0 5.0) (float-vector -150.0 -240.0 -5.0) (float-vector 150.0 -240.0 -5.0) (float-vector 150.0 -240.0 5.0)))
         (instance face :init :vertices (list (float-vector -150.0 240.0 5.0) (float-vector -150.0 240.0 -5.0) (float-vector -150.0 -240.0 -5.0) (float-vector -150.0 -240.0 5.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :ivory1)
     (setq blink4 (instance bodyset-link :init (make-cascoords) :bodies bc :name :room73b2-hitachi-fiesta-refrigerator-bodyset4 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :room73b2-hitachi-fiesta-refrigerator-bodyset5
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -215.0 200.0 -190.0) (float-vector -215.0 -200.0 -190.0) (float-vector -215.0 -200.0 190.0) (float-vector -215.0 200.0 190.0)))
         (instance face :init :vertices (list (float-vector 215.0 -200.0 -190.0) (float-vector 215.0 -200.0 190.0) (float-vector -215.0 -200.0 190.0) (float-vector -215.0 -200.0 -190.0)))
         (instance face :init :vertices (list (float-vector 215.0 200.0 -190.0) (float-vector 215.0 200.0 190.0) (float-vector 215.0 190.0 190.0) (float-vector 215.0 190.0 -180.0) (float-vector 215.0 -190.0 -180.0) (float-vector 215.0 -190.0 190.0) (float-vector 215.0 -200.0 190.0) (float-vector 215.0 -200.0 -190.0)))
         (instance face :init :vertices (list (float-vector -215.0 200.0 190.0) (float-vector -215.0 -200.0 190.0) (float-vector 215.0 -200.0 190.0) (float-vector 215.0 -190.0 190.0) (float-vector -205.0 -190.0 190.0) (float-vector -205.0 190.0 190.0) (float-vector 215.0 190.0 190.0) (float-vector 215.0 200.0 190.0)))
         (instance face :init :vertices (list (float-vector 215.0 200.0 -190.0) (float-vector 215.0 -200.0 -190.0) (float-vector -215.0 -200.0 -190.0) (float-vector -215.0 200.0 -190.0)))
         (instance face :init :vertices (list (float-vector -215.0 200.0 -190.0) (float-vector -215.0 200.0 190.0) (float-vector 215.0 200.0 190.0) (float-vector 215.0 200.0 -190.0)))
         (instance face :init :vertices (list (float-vector -205.0 190.0 190.0) (float-vector -205.0 -190.0 190.0) (float-vector -205.0 -190.0 -180.0) (float-vector -205.0 190.0 -180.0)))
         (instance face :init :vertices (list (float-vector -205.0 -190.0 -180.0) (float-vector -205.0 -190.0 190.0) (float-vector 215.0 -190.0 190.0) (float-vector 215.0 -190.0 -180.0)))
         (instance face :init :vertices (list (float-vector 215.0 190.0 -180.0) (float-vector 215.0 190.0 190.0) (float-vector -205.0 190.0 190.0) (float-vector -205.0 190.0 -180.0)))
         (instance face :init :vertices (list (float-vector -205.0 190.0 -180.0) (float-vector -205.0 -190.0 -180.0) (float-vector 215.0 -190.0 -180.0) (float-vector 215.0 190.0 -180.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 215.0 270.0 260.0) (float-vector 215.0 270.0 -190.0) (float-vector 215.0 -270.0 -190.0) (float-vector 215.0 -270.0 260.0)))
         (instance face :init :vertices (list (float-vector 215.0 -270.0 -190.0) (float-vector 265.0 -270.0 -190.0) (float-vector 265.0 -270.0 260.0) (float-vector 215.0 -270.0 260.0)))
         (instance face :init :vertices (list (float-vector 265.0 -270.0 -190.0) (float-vector 265.0 270.0 -190.0) (float-vector 265.0 270.0 260.0) (float-vector 265.0 -270.0 260.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 265.0 195.0 180.0) (float-vector 265.0 112.0 180.0) (float-vector 265.0 112.0 200.0) (float-vector 265.0 195.0 200.0)))
         (instance hole :init :vertices (list (float-vector 265.0 -112.0 180.0) (float-vector 265.0 -195.0 180.0) (float-vector 265.0 -195.0 200.0) (float-vector 265.0 -112.0 200.0)))
))
         (instance face :init :vertices (list (float-vector 265.0 270.0 260.0) (float-vector 215.0 270.0 260.0) (float-vector 215.0 -270.0 260.0) (float-vector 265.0 -270.0 260.0)))
         (instance face :init :vertices (list (float-vector 265.0 270.0 -190.0) (float-vector 215.0 270.0 -190.0) (float-vector 215.0 270.0 260.0) (float-vector 265.0 270.0 260.0)))
         (instance face :init :vertices (list (float-vector 215.0 270.0 -190.0) (float-vector 265.0 270.0 -190.0) (float-vector 265.0 -270.0 -190.0) (float-vector 215.0 -270.0 -190.0)))
         (instance face :init :vertices (list (float-vector 270.58 -195.0 200.0) (float-vector 270.58 -195.0 180.0) (float-vector 274.3 -149.0 180.0) (float-vector 274.3 -149.0 200.0)))
         (instance face :init :vertices (list (float-vector 274.3 -149.0 180.0) (float-vector 298.5 -63.2 180.0) (float-vector 298.5 -63.2 200.0) (float-vector 274.3 -149.0 200.0)))
         (instance face :init :vertices (list (float-vector 298.5 -63.2 180.0) (float-vector 302.2 0.0 180.0) (float-vector 302.2 0.0 200.0) (float-vector 298.5 -63.2 200.0)))
         (instance face :init :vertices (list (float-vector 302.2 0.0 180.0) (float-vector 298.5 63.2 180.0) (float-vector 298.5 63.2 200.0) (float-vector 302.2 0.0 200.0)))
         (instance face :init :vertices (list (float-vector 298.5 63.2 180.0) (float-vector 274.3 149.0 180.0) (float-vector 274.3 149.0 200.0) (float-vector 298.5 63.2 200.0)))
         (instance face :init :vertices (list (float-vector 274.3 149.0 180.0) (float-vector 270.58 195.0 180.0) (float-vector 270.58 195.0 200.0) (float-vector 274.3 149.0 200.0)))
         (instance face :init :vertices (list (float-vector 270.58 195.0 180.0) (float-vector 265.0 195.0 180.0) (float-vector 265.0 195.0 200.0) (float-vector 270.58 195.0 200.0)))
         (instance face :init :vertices (list (float-vector 265.0 112.0 180.0) (float-vector 274.3 104.0 180.0) (float-vector 274.3 104.0 200.0) (float-vector 265.0 112.0 200.0)))
         (instance face :init :vertices (list (float-vector 274.3 104.0 180.0) (float-vector 287.3 59.5 180.0) (float-vector 287.3 59.5 200.0) (float-vector 274.3 104.0 200.0)))
         (instance face :init :vertices (list (float-vector 287.3 59.5 180.0) (float-vector 291.0 0.0 180.0) (float-vector 291.0 0.0 200.0) (float-vector 287.3 59.5 200.0)))
         (instance face :init :vertices (list (float-vector 291.0 0.0 180.0) (float-vector 287.3 -59.5 180.0) (float-vector 287.3 -59.5 200.0) (float-vector 291.0 0.0 200.0)))
         (instance face :init :vertices (list (float-vector 287.3 -59.5 180.0) (float-vector 274.3 -104.0 180.0) (float-vector 274.3 -104.0 200.0) (float-vector 287.3 -59.5 200.0)))
         (instance face :init :vertices (list (float-vector 274.3 -104.0 180.0) (float-vector 265.0 -112.0 180.0) (float-vector 265.0 -112.0 200.0) (float-vector 274.3 -104.0 200.0)))
         (instance face :init :vertices (list (float-vector 265.0 -195.0 200.0) (float-vector 270.58 -195.0 200.0) (float-vector 274.3 -149.0 200.0) (float-vector 298.5 -63.2 200.0) (float-vector 302.2 0.0 200.0) (float-vector 298.5 63.2 200.0) (float-vector 274.3 149.0 200.0) (float-vector 270.58 195.0 200.0) (float-vector 265.0 195.0 200.0) (float-vector 265.0 112.0 200.0) (float-vector 274.3 104.0 200.0) (float-vector 287.3 59.5 200.0) (float-vector 291.0 0.0 200.0) (float-vector 287.3 -59.5 200.0) (float-vector 274.3 -104.0 200.0) (float-vector 265.0 -112.0 200.0)))
         (instance face :init :vertices (list (float-vector 265.0 -195.0 180.0) (float-vector 270.58 -195.0 180.0) (float-vector 270.58 -195.0 200.0) (float-vector 265.0 -195.0 200.0)))
         (instance face :init :vertices (list (float-vector 270.58 -195.0 180.0) (float-vector 265.0 -195.0 180.0) (float-vector 265.0 -112.0 180.0) (float-vector 274.3 -104.0 180.0) (float-vector 287.3 -59.5 180.0) (float-vector 291.0 0.0 180.0) (float-vector 287.3 59.5 180.0) (float-vector 274.3 104.0 180.0) (float-vector 265.0 112.0 180.0) (float-vector 265.0 195.0 180.0) (float-vector 270.58 195.0 180.0) (float-vector 274.3 149.0 180.0) (float-vector 298.5 63.2 180.0) (float-vector 302.2 0.0 180.0) (float-vector 298.5 -63.2 180.0) (float-vector 274.3 -149.0 180.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :ivory1)
     (setq blink3 (instance bodyset-link :init (make-cascoords) :bodies bc :name :room73b2-hitachi-fiesta-refrigerator-bodyset5 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :room73b2-hitachi-fiesta-refrigerator-bodyset6
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -225.0 220.0 -140.0) (float-vector -225.0 -220.0 -140.0) (float-vector -225.0 -220.0 140.0) (float-vector -225.0 220.0 140.0)))
         (instance face :init :vertices (list (float-vector 225.0 -220.0 -140.0) (float-vector 225.0 -220.0 140.0) (float-vector -225.0 -220.0 140.0) (float-vector -225.0 -220.0 -140.0)))
         (instance face :init :vertices (list (float-vector 225.0 220.0 -140.0) (float-vector 225.0 220.0 140.0) (float-vector 225.0 210.0 140.0) (float-vector 225.0 210.0 -130.0) (float-vector 225.0 -210.0 -130.0) (float-vector 225.0 -210.0 140.0) (float-vector 225.0 -220.0 140.0) (float-vector 225.0 -220.0 -140.0)))
         (instance face :init :vertices (list (float-vector -225.0 220.0 140.0) (float-vector -225.0 -220.0 140.0) (float-vector 225.0 -220.0 140.0) (float-vector 225.0 -210.0 140.0) (float-vector -215.0 -210.0 140.0) (float-vector -215.0 210.0 140.0) (float-vector 225.0 210.0 140.0) (float-vector 225.0 220.0 140.0)))
         (instance face :init :vertices (list (float-vector 225.0 220.0 -140.0) (float-vector 225.0 -220.0 -140.0) (float-vector -225.0 -220.0 -140.0) (float-vector -225.0 220.0 -140.0)))
         (instance face :init :vertices (list (float-vector -225.0 220.0 -140.0) (float-vector -225.0 220.0 140.0) (float-vector 225.0 220.0 140.0) (float-vector 225.0 220.0 -140.0)))
         (instance face :init :vertices (list (float-vector -215.0 210.0 140.0) (float-vector -215.0 -210.0 140.0) (float-vector -215.0 -210.0 -130.0) (float-vector -215.0 210.0 -130.0)))
         (instance face :init :vertices (list (float-vector -215.0 -210.0 -130.0) (float-vector -215.0 -210.0 140.0) (float-vector 225.0 -210.0 140.0) (float-vector 225.0 -210.0 -130.0)))
         (instance face :init :vertices (list (float-vector 225.0 210.0 -130.0) (float-vector 225.0 210.0 140.0) (float-vector -215.0 210.0 140.0) (float-vector -215.0 210.0 -130.0)))
         (instance face :init :vertices (list (float-vector -215.0 210.0 -130.0) (float-vector -215.0 -210.0 -130.0) (float-vector 225.0 -210.0 -130.0) (float-vector 225.0 210.0 -130.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 225.0 270.0 180.0) (float-vector 225.0 270.0 -150.0) (float-vector 225.0 -270.0 -150.0) (float-vector 225.0 -270.0 180.0)))
         (instance face :init :vertices (list (float-vector 225.0 -270.0 -150.0) (float-vector 275.0 -270.0 -150.0) (float-vector 275.0 -270.0 180.0) (float-vector 225.0 -270.0 180.0)))
         (instance face :init :vertices (list (float-vector 275.0 -270.0 -150.0) (float-vector 275.0 270.0 -150.0) (float-vector 275.0 270.0 180.0) (float-vector 275.0 -270.0 180.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 275.0 195.0 100.0) (float-vector 275.0 112.0 100.0) (float-vector 275.0 112.0 120.0) (float-vector 275.0 195.0 120.0)))
         (instance hole :init :vertices (list (float-vector 275.0 -112.0 100.0) (float-vector 275.0 -195.0 100.0) (float-vector 275.0 -195.0 120.0) (float-vector 275.0 -112.0 120.0)))
))
         (instance face :init :vertices (list (float-vector 275.0 270.0 180.0) (float-vector 225.0 270.0 180.0) (float-vector 225.0 -270.0 180.0) (float-vector 275.0 -270.0 180.0)))
         (instance face :init :vertices (list (float-vector 275.0 270.0 -150.0) (float-vector 225.0 270.0 -150.0) (float-vector 225.0 270.0 180.0) (float-vector 275.0 270.0 180.0)))
         (instance face :init :vertices (list (float-vector 225.0 270.0 -150.0) (float-vector 275.0 270.0 -150.0) (float-vector 275.0 -270.0 -150.0) (float-vector 225.0 -270.0 -150.0)))
         (instance face :init :vertices (list (float-vector 280.58 -195.0 120.0) (float-vector 280.58 -195.0 100.0) (float-vector 284.3 -149.0 100.0) (float-vector 284.3 -149.0 120.0)))
         (instance face :init :vertices (list (float-vector 284.3 -149.0 100.0) (float-vector 308.5 -63.2 100.0) (float-vector 308.5 -63.2 120.0) (float-vector 284.3 -149.0 120.0)))
         (instance face :init :vertices (list (float-vector 308.5 -63.2 100.0) (float-vector 312.2 0.0 100.0) (float-vector 312.2 0.0 120.0) (float-vector 308.5 -63.2 120.0)))
         (instance face :init :vertices (list (float-vector 312.2 0.0 100.0) (float-vector 308.5 63.2 100.0) (float-vector 308.5 63.2 120.0) (float-vector 312.2 0.0 120.0)))
         (instance face :init :vertices (list (float-vector 308.5 63.2 100.0) (float-vector 284.3 149.0 100.0) (float-vector 284.3 149.0 120.0) (float-vector 308.5 63.2 120.0)))
         (instance face :init :vertices (list (float-vector 284.3 149.0 100.0) (float-vector 280.58 195.0 100.0) (float-vector 280.58 195.0 120.0) (float-vector 284.3 149.0 120.0)))
         (instance face :init :vertices (list (float-vector 280.58 195.0 100.0) (float-vector 275.0 195.0 100.0) (float-vector 275.0 195.0 120.0) (float-vector 280.58 195.0 120.0)))
         (instance face :init :vertices (list (float-vector 275.0 112.0 100.0) (float-vector 284.3 104.0 100.0) (float-vector 284.3 104.0 120.0) (float-vector 275.0 112.0 120.0)))
         (instance face :init :vertices (list (float-vector 284.3 104.0 100.0) (float-vector 297.3 59.5 100.0) (float-vector 297.3 59.5 120.0) (float-vector 284.3 104.0 120.0)))
         (instance face :init :vertices (list (float-vector 297.3 59.5 100.0) (float-vector 301.0 0.0 100.0) (float-vector 301.0 0.0 120.0) (float-vector 297.3 59.5 120.0)))
         (instance face :init :vertices (list (float-vector 301.0 0.0 100.0) (float-vector 297.3 -59.5 100.0) (float-vector 297.3 -59.5 120.0) (float-vector 301.0 0.0 120.0)))
         (instance face :init :vertices (list (float-vector 297.3 -59.5 100.0) (float-vector 284.3 -104.0 100.0) (float-vector 284.3 -104.0 120.0) (float-vector 297.3 -59.5 120.0)))
         (instance face :init :vertices (list (float-vector 284.3 -104.0 100.0) (float-vector 275.0 -112.0 100.0) (float-vector 275.0 -112.0 120.0) (float-vector 284.3 -104.0 120.0)))
         (instance face :init :vertices (list (float-vector 275.0 -195.0 120.0) (float-vector 280.58 -195.0 120.0) (float-vector 284.3 -149.0 120.0) (float-vector 308.5 -63.2 120.0) (float-vector 312.2 0.0 120.0) (float-vector 308.5 63.2 120.0) (float-vector 284.3 149.0 120.0) (float-vector 280.58 195.0 120.0) (float-vector 275.0 195.0 120.0) (float-vector 275.0 112.0 120.0) (float-vector 284.3 104.0 120.0) (float-vector 297.3 59.5 120.0) (float-vector 301.0 0.0 120.0) (float-vector 297.3 -59.5 120.0) (float-vector 284.3 -104.0 120.0) (float-vector 275.0 -112.0 120.0)))
         (instance face :init :vertices (list (float-vector 275.0 -195.0 100.0) (float-vector 280.58 -195.0 100.0) (float-vector 280.58 -195.0 120.0) (float-vector 275.0 -195.0 120.0)))
         (instance face :init :vertices (list (float-vector 280.58 -195.0 100.0) (float-vector 275.0 -195.0 100.0) (float-vector 275.0 -112.0 100.0) (float-vector 284.3 -104.0 100.0) (float-vector 297.3 -59.5 100.0) (float-vector 301.0 0.0 100.0) (float-vector 297.3 59.5 100.0) (float-vector 284.3 104.0 100.0) (float-vector 275.0 112.0 100.0) (float-vector 275.0 195.0 100.0) (float-vector 280.58 195.0 100.0) (float-vector 284.3 149.0 100.0) (float-vector 308.5 63.2 100.0) (float-vector 312.2 0.0 100.0) (float-vector 308.5 -63.2 100.0) (float-vector 284.3 -149.0 100.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :ivory1)
     (setq blink2 (instance bodyset-link :init (make-cascoords) :bodies bc :name :room73b2-hitachi-fiesta-refrigerator-bodyset6 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :room73b2-hitachi-fiesta-refrigerator-bodyset7
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -25.0 25.0 600.0) (float-vector -25.0 25.0 0.0) (float-vector -25.0 -515.0 0.0) (float-vector -25.0 -515.0 600.0)))
         (instance face :init :vertices (list (float-vector -25.0 -515.0 0.0) (float-vector 25.0 -515.0 0.0) (float-vector 25.0 -515.0 600.0) (float-vector -25.0 -515.0 600.0)))
         (instance face :init :vertices (list (float-vector 25.0 -515.0 0.0) (float-vector 25.0 25.0 0.0) (float-vector 25.0 25.0 600.0) (float-vector 25.0 -515.0 600.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 25.0 -455.0 425.0) (float-vector 25.0 -455.0 337.699) (float-vector 25.0 -475.0 337.699) (float-vector 25.0 -475.0 425.0)))
         (instance hole :init :vertices (list (float-vector 25.0 -455.0 122.301) (float-vector 25.0 -455.0 35.0) (float-vector 25.0 -475.0 35.0) (float-vector 25.0 -475.0 122.301)))
))
         (instance face :init :vertices (list (float-vector 25.0 25.0 600.0) (float-vector -25.0 25.0 600.0) (float-vector -25.0 -515.0 600.0) (float-vector 25.0 -515.0 600.0)))
         (instance face :init :vertices (list (float-vector 25.0 25.0 0.0) (float-vector -25.0 25.0 0.0) (float-vector -25.0 25.0 600.0) (float-vector 25.0 25.0 600.0)))
         (instance face :init :vertices (list (float-vector -25.0 25.0 0.0) (float-vector 25.0 25.0 0.0) (float-vector 25.0 -515.0 0.0) (float-vector -25.0 -515.0 0.0)))
         (instance face :init :vertices (list (float-vector 25.58 -475.0 35.0) (float-vector 25.58 -455.0 35.0) (float-vector 29.3 -455.0 81.0) (float-vector 29.3 -475.0 81.0)))
         (instance face :init :vertices (list (float-vector 29.3 -455.0 81.0) (float-vector 53.5 -455.0 166.8) (float-vector 53.5 -475.0 166.8) (float-vector 29.3 -475.0 81.0)))
         (instance face :init :vertices (list (float-vector 53.5 -455.0 166.8) (float-vector 57.2 -455.0 230.0) (float-vector 57.2 -475.0 230.0) (float-vector 53.5 -475.0 166.8)))
         (instance face :init :vertices (list (float-vector 57.2 -455.0 230.0) (float-vector 53.5 -455.0 293.2) (float-vector 53.5 -475.0 293.2) (float-vector 57.2 -475.0 230.0)))
         (instance face :init :vertices (list (float-vector 53.5 -455.0 293.2) (float-vector 29.3 -455.0 379.0) (float-vector 29.3 -475.0 379.0) (float-vector 53.5 -475.0 293.2)))
         (instance face :init :vertices (list (float-vector 29.3 -455.0 379.0) (float-vector 25.58 -455.0 425.0) (float-vector 25.58 -475.0 425.0) (float-vector 29.3 -475.0 379.0)))
         (instance face :init :vertices (list (float-vector 25.58 -455.0 425.0) (float-vector 25.0 -455.0 425.0) (float-vector 25.0 -475.0 425.0) (float-vector 25.58 -475.0 425.0)))
         (instance face :init :vertices (list (float-vector 25.0 -455.0 337.699) (float-vector 29.3 -455.0 334.0) (float-vector 29.3 -475.0 334.0) (float-vector 25.0 -475.0 337.699)))
         (instance face :init :vertices (list (float-vector 29.3 -455.0 334.0) (float-vector 42.3 -455.0 289.5) (float-vector 42.3 -475.0 289.5) (float-vector 29.3 -475.0 334.0)))
         (instance face :init :vertices (list (float-vector 42.3 -455.0 289.5) (float-vector 46.0 -455.0 230.0) (float-vector 46.0 -475.0 230.0) (float-vector 42.3 -475.0 289.5)))
         (instance face :init :vertices (list (float-vector 46.0 -455.0 230.0) (float-vector 42.3 -455.0 170.5) (float-vector 42.3 -475.0 170.5) (float-vector 46.0 -475.0 230.0)))
         (instance face :init :vertices (list (float-vector 42.3 -455.0 170.5) (float-vector 29.3 -455.0 126.0) (float-vector 29.3 -475.0 126.0) (float-vector 42.3 -475.0 170.5)))
         (instance face :init :vertices (list (float-vector 29.3 -455.0 126.0) (float-vector 25.0 -455.0 122.301) (float-vector 25.0 -475.0 122.301) (float-vector 29.3 -475.0 126.0)))
         (instance face :init :vertices (list (float-vector 25.0 -475.0 35.0) (float-vector 25.58 -475.0 35.0) (float-vector 29.3 -475.0 81.0) (float-vector 53.5 -475.0 166.8) (float-vector 57.2 -475.0 230.0) (float-vector 53.5 -475.0 293.2) (float-vector 29.3 -475.0 379.0) (float-vector 25.58 -475.0 425.0) (float-vector 25.0 -475.0 425.0) (float-vector 25.0 -475.0 337.699) (float-vector 29.3 -475.0 334.0) (float-vector 42.3 -475.0 289.5) (float-vector 46.0 -475.0 230.0) (float-vector 42.3 -475.0 170.5) (float-vector 29.3 -475.0 126.0) (float-vector 25.0 -475.0 122.301)))
         (instance face :init :vertices (list (float-vector 25.0 -455.0 35.0) (float-vector 25.58 -455.0 35.0) (float-vector 25.58 -475.0 35.0) (float-vector 25.0 -475.0 35.0)))
         (instance face :init :vertices (list (float-vector 25.58 -455.0 35.0) (float-vector 25.0 -455.0 35.0) (float-vector 25.0 -455.0 122.301) (float-vector 29.3 -455.0 126.0) (float-vector 42.3 -455.0 170.5) (float-vector 46.0 -455.0 230.0) (float-vector 42.3 -455.0 289.5) (float-vector 29.3 -455.0 334.0) (float-vector 25.0 -455.0 337.699) (float-vector 25.0 -455.0 425.0) (float-vector 25.58 -455.0 425.0) (float-vector 29.3 -455.0 379.0) (float-vector 53.5 -455.0 293.2) (float-vector 57.2 -455.0 230.0) (float-vector 53.5 -455.0 166.8) (float-vector 29.3 -455.0 81.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :ivory1)
     (setq blink1 (instance bodyset-link :init (make-cascoords) :bodies bc :name :room73b2-hitachi-fiesta-refrigerator-bodyset7 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send blink1 :newcoords (make-coords :pos (float-vector 300.0 245.0 850.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink1)
     (send blink2 :newcoords (make-coords :pos (float-vector 50.0 0.0 660.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink2)
     (send blink3 :newcoords (make-coords :pos (float-vector 60.0 0.0 240.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink3)
     (send blink4 :newcoords (make-coords :pos (float-vector -95.0 0.0 1275.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink4)
     (send blink5 :newcoords (make-coords :pos (float-vector -95.0 0.0 1085.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink5)
     (send blink6 :newcoords (make-coords :pos (float-vector -95.0 0.0 935.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink6)
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     ;; definition of :door1
     (setq joint0 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink1 :name :door1     :axis :z 
			     :min    0.0 :max   90.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :drawer1
     (setq joint1 (instance linear-joint :init
			     :parent-link blink0 :child-link blink2 :name :drawer1   :axis (float-vector 1.0 0.0 0.0)
			     :min    0.0 :max  550.0 :max-joint-velocity 0.785398 :max-joint-torque 100))

     ;; definition of :drawer2
     (setq joint2 (instance linear-joint :init
			     :parent-link blink0 :child-link blink3 :name :drawer2   :axis (float-vector 1.0 0.0 0.0)
			     :min    0.0 :max  550.0 :max-joint-velocity 0.785398 :max-joint-torque 100))

     ;; definition of :shelf1
     (setq joint3 (instance linear-joint :init
			     :parent-link blink0 :child-link blink4 :name :shelf1    :axis (float-vector 1.0 0.0 0.0)
			     :min    0.0 :max  300.0 :max-joint-velocity 0.785398 :max-joint-torque 100))

     ;; definition of :shelf2
     (setq joint4 (instance linear-joint :init
			     :parent-link blink0 :child-link blink5 :name :shelf2    :axis (float-vector 1.0 0.0 0.0)
			     :min    0.0 :max  300.0 :max-joint-velocity 0.785398 :max-joint-torque 100))

     ;; definition of :shelf3
     (setq joint5 (instance linear-joint :init
			     :parent-link blink0 :child-link blink6 :name :shelf3    :axis (float-vector 1.0 0.0 0.0)
			     :min    0.0 :max  300.0 :max-joint-velocity 0.785398 :max-joint-torque 100))


     ;; definition of :handle
     (setq handle0 (make-cascoords :pos (float-vector 360.0 0.0 430.0) :rot #2f((1.0 -8.715764e-33 -8.715764e-33) (-8.715764e-33 2.220446e-16 -1.0) (8.715764e-33 1.0 2.220446e-16)) :name ":drawer2"))
     (send blink0 :assoc handle0)
     (setq handle1 (make-cascoords :pos (float-vector 350.0 0.0 770.0) :rot #2f((1.0 -8.715764e-33 -8.715764e-33) (-8.715764e-33 2.220446e-16 -1.0) (8.715764e-33 1.0 2.220446e-16)) :name ":drawer1"))
     (send blink0 :assoc handle1)
     (setq handle2 (make-cascoords :pos (float-vector 350.0 -225.0 1100.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name ":door1"))
     (send blink0 :assoc handle2)
     (setq handle3 (make-cascoords :pos (float-vector 0.0 0.0 0.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name "handle3"))
     (send blink0 :assoc handle3)

     ;; init-ending 
     (setq links (list blink0 blink1 blink2 blink3 blink4 blink5 blink6))
     (setq joint-list (list joint0 joint1 joint2 joint3 joint4 joint5))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:door1 (&rest args) (forward-message-to joint0 args))
  (:drawer1 (&rest args) (forward-message-to joint1 args))
  (:drawer2 (&rest args) (forward-message-to joint2 args))
  (:shelf1 (&rest args) (forward-message-to joint3 args))
  (:shelf2 (&rest args) (forward-message-to joint4 args))
  (:shelf3 (&rest args) (forward-message-to joint5 args))
  (:handle (&rest args) (forward-message-to-all (list  handle0 handle1 handle2 handle3) args))
  (:handle-drawer2 (&rest args) (forward-message-to handle0 args))
  (:handle-drawer1 (&rest args) (forward-message-to handle1 args))
  (:handle-door1 (&rest args) (forward-message-to handle2 args))
  (:handle-handle3 (&rest args) (forward-message-to handle3 args))
  (:attention (&rest args) (forward-message-to-all (list ) args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun room73b2-hitachi-fiesta-refrigerator (&rest args) (instance* room73b2-hitachi-fiesta-refrigerator-object :init args))
;; (format *error-output* "(instance room73b2-hitachi-fiesta-refrigerator-object :init) for generating model~%")
