;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass refrigerator-object
  :super cascaded-link
  :slots (sensors
         handle0 handle1 handle2
         joint0 joint1 joint2 joint3 joint4 joint5 ))
(defmethod refrigerator-object
  (:init
   (&rest args &key (name "refrigerator") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0 blink1 blink2 blink3 blink4 blink5 blink6
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :root
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 235.0 300.0 1770.0) (float-vector -285.0 300.0 1770.0) (float-vector -285.0 -300.0 1770.0) (float-vector 235.0 -300.0 1770.0)))
         (instance face :init :vertices (list (float-vector -285.0 300.0 1760.0) (float-vector 235.0 300.0 1760.0) (float-vector 235.0 -300.0 1760.0) (float-vector -285.0 -300.0 1760.0)))
         (instance face :init :vertices (list (float-vector 235.0 300.0 1770.0) (float-vector 235.0 300.0 1760.0) (float-vector -285.0 300.0 1760.0) (float-vector -285.0 300.0 1770.0)))
         (instance face :init :vertices (list (float-vector 235.0 -300.0 1770.0) (float-vector 235.0 -300.0 1760.0) (float-vector 235.0 300.0 1760.0) (float-vector 235.0 300.0 1770.0)))
         (instance face :init :vertices (list (float-vector -285.0 -300.0 1770.0) (float-vector -285.0 -300.0 1760.0) (float-vector 235.0 -300.0 1760.0) (float-vector 235.0 -300.0 1770.0)))
         (instance face :init :vertices (list (float-vector -285.0 300.0 1770.0) (float-vector -285.0 300.0 1760.0) (float-vector -285.0 -300.0 1760.0) (float-vector -285.0 -300.0 1770.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 235.0 300.0 50.0) (float-vector -285.0 300.0 50.0) (float-vector -285.0 -300.0 50.0) (float-vector 235.0 -300.0 50.0)))
         (instance face :init :vertices (list (float-vector -285.0 300.0 0.0) (float-vector 235.0 300.0 0.0) (float-vector 235.0 -300.0 0.0) (float-vector -285.0 -300.0 0.0)))
         (instance face :init :vertices (list (float-vector 235.0 300.0 50.0) (float-vector 235.0 300.0 0.0) (float-vector -285.0 300.0 0.0) (float-vector -285.0 300.0 50.0)))
         (instance face :init :vertices (list (float-vector 235.0 -300.0 50.0) (float-vector 235.0 -300.0 0.0) (float-vector 235.0 300.0 0.0) (float-vector 235.0 300.0 50.0)))
         (instance face :init :vertices (list (float-vector -285.0 -300.0 50.0) (float-vector -285.0 -300.0 0.0) (float-vector 235.0 -300.0 0.0) (float-vector 235.0 -300.0 50.0)))
         (instance face :init :vertices (list (float-vector -285.0 300.0 50.0) (float-vector -285.0 300.0 0.0) (float-vector -285.0 -300.0 0.0) (float-vector -285.0 -300.0 50.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -265.0 280.0 1760.0) (float-vector -285.0 280.0 1760.0) (float-vector -285.0 -280.0 1760.0) (float-vector -265.0 -280.0 1760.0)))
         (instance face :init :vertices (list (float-vector -285.0 280.0 50.0) (float-vector -265.0 280.0 50.0) (float-vector -265.0 -280.0 50.0) (float-vector -285.0 -280.0 50.0)))
         (instance face :init :vertices (list (float-vector -265.0 280.0 1760.0) (float-vector -265.0 280.0 50.0) (float-vector -285.0 280.0 50.0) (float-vector -285.0 280.0 1760.0)))
         (instance face :init :vertices (list (float-vector -265.0 -280.0 1760.0) (float-vector -265.0 -280.0 50.0) (float-vector -265.0 280.0 50.0) (float-vector -265.0 280.0 1760.0)))
         (instance face :init :vertices (list (float-vector -285.0 -280.0 1760.0) (float-vector -285.0 -280.0 50.0) (float-vector -265.0 -280.0 50.0) (float-vector -265.0 -280.0 1760.0)))
         (instance face :init :vertices (list (float-vector -285.0 280.0 1760.0) (float-vector -285.0 280.0 50.0) (float-vector -285.0 -280.0 50.0) (float-vector -285.0 -280.0 1760.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 235.0 300.0 1760.0) (float-vector -285.0 300.0 1760.0) (float-vector -285.0 280.0 1760.0) (float-vector 235.0 280.0 1760.0)))
         (instance face :init :vertices (list (float-vector -285.0 300.0 50.0) (float-vector 235.0 300.0 50.0) (float-vector 235.0 280.0 50.0) (float-vector -285.0 280.0 50.0)))
         (instance face :init :vertices (list (float-vector 235.0 300.0 1760.0) (float-vector 235.0 300.0 50.0) (float-vector -285.0 300.0 50.0) (float-vector -285.0 300.0 1760.0)))
         (instance face :init :vertices (list (float-vector 235.0 280.0 1760.0) (float-vector 235.0 280.0 50.0) (float-vector 235.0 300.0 50.0) (float-vector 235.0 300.0 1760.0)))
         (instance face :init :vertices (list (float-vector -285.0 280.0 1760.0) (float-vector -285.0 280.0 50.0) (float-vector 235.0 280.0 50.0) (float-vector 235.0 280.0 1760.0)))
         (instance face :init :vertices (list (float-vector -285.0 300.0 1760.0) (float-vector -285.0 300.0 50.0) (float-vector -285.0 280.0 50.0) (float-vector -285.0 280.0 1760.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 235.0 -280.0 1760.0) (float-vector -285.0 -280.0 1760.0) (float-vector -285.0 -300.0 1760.0) (float-vector 235.0 -300.0 1760.0)))
         (instance face :init :vertices (list (float-vector -285.0 -280.0 50.0) (float-vector 235.0 -280.0 50.0) (float-vector 235.0 -300.0 50.0) (float-vector -285.0 -300.0 50.0)))
         (instance face :init :vertices (list (float-vector 235.0 -280.0 1760.0) (float-vector 235.0 -280.0 50.0) (float-vector -285.0 -280.0 50.0) (float-vector -285.0 -280.0 1760.0)))
         (instance face :init :vertices (list (float-vector 235.0 -300.0 1760.0) (float-vector 235.0 -300.0 50.0) (float-vector 235.0 -280.0 50.0) (float-vector 235.0 -280.0 1760.0)))
         (instance face :init :vertices (list (float-vector -285.0 -300.0 1760.0) (float-vector -285.0 -300.0 50.0) (float-vector 235.0 -300.0 50.0) (float-vector 235.0 -300.0 1760.0)))
         (instance face :init :vertices (list (float-vector -285.0 -280.0 1760.0) (float-vector -285.0 -280.0 50.0) (float-vector -285.0 -300.0 50.0) (float-vector -285.0 -300.0 1760.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 235.0 280.0 1040.0) (float-vector -265.0 280.0 1040.0) (float-vector -265.0 -280.0 1040.0) (float-vector 235.0 -280.0 1040.0)))
         (instance face :init :vertices (list (float-vector -265.0 280.0 1020.0) (float-vector 235.0 280.0 1020.0) (float-vector 235.0 -280.0 1020.0) (float-vector -265.0 -280.0 1020.0)))
         (instance face :init :vertices (list (float-vector 235.0 280.0 1040.0) (float-vector 235.0 280.0 1020.0) (float-vector -265.0 280.0 1020.0) (float-vector -265.0 280.0 1040.0)))
         (instance face :init :vertices (list (float-vector 235.0 -280.0 1040.0) (float-vector 235.0 -280.0 1020.0) (float-vector 235.0 280.0 1020.0) (float-vector 235.0 280.0 1040.0)))
         (instance face :init :vertices (list (float-vector -265.0 -280.0 1040.0) (float-vector -265.0 -280.0 1020.0) (float-vector 235.0 -280.0 1020.0) (float-vector 235.0 -280.0 1040.0)))
         (instance face :init :vertices (list (float-vector -265.0 280.0 1040.0) (float-vector -265.0 280.0 1020.0) (float-vector -265.0 -280.0 1020.0) (float-vector -265.0 -280.0 1040.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 235.0 280.0 660.0) (float-vector -265.0 280.0 660.0) (float-vector -265.0 -280.0 660.0) (float-vector 235.0 -280.0 660.0)))
         (instance face :init :vertices (list (float-vector -265.0 280.0 640.0) (float-vector 235.0 280.0 640.0) (float-vector 235.0 -280.0 640.0) (float-vector -265.0 -280.0 640.0)))
         (instance face :init :vertices (list (float-vector 235.0 280.0 660.0) (float-vector 235.0 280.0 640.0) (float-vector -265.0 280.0 640.0) (float-vector -265.0 280.0 660.0)))
         (instance face :init :vertices (list (float-vector 235.0 -280.0 660.0) (float-vector 235.0 -280.0 640.0) (float-vector 235.0 280.0 640.0) (float-vector 235.0 280.0 660.0)))
         (instance face :init :vertices (list (float-vector -265.0 -280.0 660.0) (float-vector -265.0 -280.0 640.0) (float-vector 235.0 -280.0 640.0) (float-vector 235.0 -280.0 660.0)))
         (instance face :init :vertices (list (float-vector -265.0 280.0 660.0) (float-vector -265.0 280.0 640.0) (float-vector -265.0 -280.0 640.0) (float-vector -265.0 -280.0 660.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 235.0 280.0 480.0) (float-vector -265.0 280.0 480.0) (float-vector -265.0 -280.0 480.0) (float-vector 235.0 -280.0 480.0)))
         (instance face :init :vertices (list (float-vector -265.0 280.0 460.0) (float-vector 235.0 280.0 460.0) (float-vector 235.0 -280.0 460.0) (float-vector -265.0 -280.0 460.0)))
         (instance face :init :vertices (list (float-vector 235.0 280.0 480.0) (float-vector 235.0 280.0 460.0) (float-vector -265.0 280.0 460.0) (float-vector -265.0 280.0 480.0)))
         (instance face :init :vertices (list (float-vector 235.0 -280.0 480.0) (float-vector 235.0 -280.0 460.0) (float-vector 235.0 280.0 460.0) (float-vector 235.0 280.0 480.0)))
         (instance face :init :vertices (list (float-vector -265.0 -280.0 480.0) (float-vector -265.0 -280.0 460.0) (float-vector 235.0 -280.0 460.0) (float-vector 235.0 -280.0 480.0)))
         (instance face :init :vertices (list (float-vector -265.0 280.0 480.0) (float-vector -265.0 280.0 460.0) (float-vector -265.0 -280.0 460.0) (float-vector -265.0 -280.0 480.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray50)
     (send (elt bc 1) :set-color :gray50)
     (send (elt bc 2) :set-color :gray50)
     (send (elt bc 3) :set-color :gray50)
     (send (elt bc 4) :set-color :gray50)
     (send (elt bc 5) :set-color :gray50)
     (send (elt bc 6) :set-color :gray50)
     (send (elt bc 7) :set-color :gray50)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :root :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :refrigerator-bodyset2
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -200.0 250.0 -180.0) (float-vector -200.0 -250.0 -180.0) (float-vector -200.0 -250.0 180.0) (float-vector -200.0 250.0 180.0)))
         (instance face :init :vertices (list (float-vector 200.0 -250.0 -180.0) (float-vector 200.0 -250.0 180.0) (float-vector -200.0 -250.0 180.0) (float-vector -200.0 -250.0 -180.0)))
         (instance face :init :vertices (list (float-vector 200.0 250.0 -180.0) (float-vector 200.0 250.0 180.0) (float-vector 200.0 200.0 180.0) (float-vector 200.0 200.0 -130.0) (float-vector 200.0 -200.0 -130.0) (float-vector 200.0 -200.0 180.0) (float-vector 200.0 -250.0 180.0) (float-vector 200.0 -250.0 -180.0)))
         (instance face :init :vertices (list (float-vector -200.0 250.0 180.0) (float-vector -200.0 -250.0 180.0) (float-vector 200.0 -250.0 180.0) (float-vector 200.0 -200.0 180.0) (float-vector -150.0 -200.0 180.0) (float-vector -150.0 200.0 180.0) (float-vector 200.0 200.0 180.0) (float-vector 200.0 250.0 180.0)))
         (instance face :init :vertices (list (float-vector 200.0 250.0 -180.0) (float-vector 200.0 -250.0 -180.0) (float-vector -200.0 -250.0 -180.0) (float-vector -200.0 250.0 -180.0)))
         (instance face :init :vertices (list (float-vector -200.0 250.0 -180.0) (float-vector -200.0 250.0 180.0) (float-vector 200.0 250.0 180.0) (float-vector 200.0 250.0 -180.0)))
         (instance face :init :vertices (list (float-vector -150.0 200.0 180.0) (float-vector -150.0 -200.0 180.0) (float-vector -150.0 -200.0 -130.0) (float-vector -150.0 200.0 -130.0)))
         (instance face :init :vertices (list (float-vector -150.0 -200.0 -130.0) (float-vector -150.0 -200.0 180.0) (float-vector 200.0 -200.0 180.0) (float-vector 200.0 -200.0 -130.0)))
         (instance face :init :vertices (list (float-vector 200.0 200.0 -130.0) (float-vector 200.0 200.0 180.0) (float-vector -150.0 200.0 180.0) (float-vector -150.0 200.0 -130.0)))
         (instance face :init :vertices (list (float-vector -150.0 200.0 -130.0) (float-vector -150.0 -200.0 -130.0) (float-vector 200.0 -200.0 -130.0) (float-vector 200.0 200.0 -130.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 235.0 300.0 165.0) (float-vector 235.0 -300.0 165.0) (float-vector 250.0 -300.0 165.0) (float-vector 250.0 300.0 165.0)))
         (instance face :init :vertices (list (float-vector 235.0 -300.0 205.0) (float-vector 235.0 -300.0 165.0) (float-vector 235.0 300.0 165.0) (float-vector 235.0 300.0 205.0)))
         (instance face :init :vertices (list (float-vector 245.0 -300.0 205.0) (float-vector 235.0 -300.0 205.0) (float-vector 235.0 300.0 205.0) (float-vector 245.0 300.0 205.0)))
         (instance face :init :vertices (list (float-vector 250.0 300.0 -180.0) (float-vector 200.0 300.0 -180.0) (float-vector 200.0 300.0 230.0) (float-vector 250.0 300.0 230.0) (float-vector 250.0 300.0 225.0) (float-vector 255.0 300.0 225.0) (float-vector 255.0 300.0 195.0) (float-vector 245.0 300.0 195.0) (float-vector 245.0 300.0 205.0) (float-vector 235.0 300.0 205.0) (float-vector 235.0 300.0 165.0) (float-vector 250.0 300.0 165.0)))
         (instance face :init :vertices (list (float-vector 200.0 -300.0 -180.0) (float-vector 200.0 300.0 -180.0) (float-vector 250.0 300.0 -180.0) (float-vector 250.0 -300.0 -180.0)))
         (instance face :init :vertices (list (float-vector 250.0 -300.0 230.0) (float-vector 250.0 300.0 230.0) (float-vector 200.0 300.0 230.0) (float-vector 200.0 -300.0 230.0)))
         (instance face :init :vertices (list (float-vector 250.0 -300.0 165.0) (float-vector 250.0 -300.0 -180.0) (float-vector 250.0 300.0 -180.0) (float-vector 250.0 300.0 165.0)))
         (instance face :init :vertices (list (float-vector 250.0 -300.0 230.0) (float-vector 250.0 -300.0 225.0) (float-vector 250.0 300.0 225.0) (float-vector 250.0 300.0 230.0)))
         (instance face :init :vertices (list (float-vector 200.0 -300.0 230.0) (float-vector 200.0 -300.0 -180.0) (float-vector 250.0 -300.0 -180.0) (float-vector 250.0 -300.0 165.0) (float-vector 235.0 -300.0 165.0) (float-vector 235.0 -300.0 205.0) (float-vector 245.0 -300.0 205.0) (float-vector 245.0 -300.0 195.0) (float-vector 255.0 -300.0 195.0) (float-vector 255.0 -300.0 225.0) (float-vector 250.0 -300.0 225.0) (float-vector 250.0 -300.0 230.0)))
         (instance face :init :vertices (list (float-vector 200.0 -300.0 -180.0) (float-vector 200.0 -300.0 230.0) (float-vector 200.0 300.0 230.0) (float-vector 200.0 300.0 -180.0)))
         (instance face :init :vertices (list (float-vector 245.0 300.0 205.0) (float-vector 245.0 300.0 195.0) (float-vector 245.0 -300.0 195.0) (float-vector 245.0 -300.0 205.0)))
         (instance face :init :vertices (list (float-vector 255.0 -300.0 195.0) (float-vector 255.0 300.0 195.0) (float-vector 255.0 300.0 225.0) (float-vector 255.0 -300.0 225.0)))
         (instance face :init :vertices (list (float-vector 255.0 300.0 225.0) (float-vector 250.0 300.0 225.0) (float-vector 250.0 -300.0 225.0) (float-vector 255.0 -300.0 225.0)))
         (instance face :init :vertices (list (float-vector 245.0 300.0 195.0) (float-vector 255.0 300.0 195.0) (float-vector 255.0 -300.0 195.0) (float-vector 245.0 -300.0 195.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :rosybrown)
     (setq blink6 (instance bodyset-link :init (make-cascoords) :bodies bc :name :refrigerator-bodyset2 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :refrigerator-bodyset3
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -200.0 115.0 -65.0) (float-vector -200.0 -115.0 -65.0) (float-vector -200.0 -115.0 65.0) (float-vector -200.0 115.0 65.0)))
         (instance face :init :vertices (list (float-vector 200.0 -115.0 -65.0) (float-vector 200.0 -115.0 65.0) (float-vector -200.0 -115.0 65.0) (float-vector -200.0 -115.0 -65.0)))
         (instance face :init :vertices (list (float-vector 200.0 115.0 -65.0) (float-vector 200.0 115.0 65.0) (float-vector 200.0 65.0 65.0) (float-vector 200.0 65.0 -15.0) (float-vector 200.0 -65.0 -15.0) (float-vector 200.0 -65.0 65.0) (float-vector 200.0 -115.0 65.0) (float-vector 200.0 -115.0 -65.0)))
         (instance face :init :vertices (list (float-vector -200.0 115.0 65.0) (float-vector -200.0 -115.0 65.0) (float-vector 200.0 -115.0 65.0) (float-vector 200.0 -65.0 65.0) (float-vector -150.0 -65.0 65.0) (float-vector -150.0 65.0 65.0) (float-vector 200.0 65.0 65.0) (float-vector 200.0 115.0 65.0)))
         (instance face :init :vertices (list (float-vector 200.0 115.0 -65.0) (float-vector 200.0 -115.0 -65.0) (float-vector -200.0 -115.0 -65.0) (float-vector -200.0 115.0 -65.0)))
         (instance face :init :vertices (list (float-vector -200.0 115.0 -65.0) (float-vector -200.0 115.0 65.0) (float-vector 200.0 115.0 65.0) (float-vector 200.0 115.0 -65.0)))
         (instance face :init :vertices (list (float-vector -150.0 65.0 65.0) (float-vector -150.0 -65.0 65.0) (float-vector -150.0 -65.0 -15.0) (float-vector -150.0 65.0 -15.0)))
         (instance face :init :vertices (list (float-vector -150.0 -65.0 -15.0) (float-vector -150.0 -65.0 65.0) (float-vector 200.0 -65.0 65.0) (float-vector 200.0 -65.0 -15.0)))
         (instance face :init :vertices (list (float-vector 200.0 65.0 -15.0) (float-vector 200.0 65.0 65.0) (float-vector -150.0 65.0 65.0) (float-vector -150.0 65.0 -15.0)))
         (instance face :init :vertices (list (float-vector -150.0 65.0 -15.0) (float-vector -150.0 -65.0 -15.0) (float-vector 200.0 -65.0 -15.0) (float-vector 200.0 65.0 -15.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 235.0 165.0 50.0) (float-vector 235.0 -165.0 50.0) (float-vector 250.0 -165.0 50.0) (float-vector 250.0 165.0 50.0)))
         (instance face :init :vertices (list (float-vector 235.0 -165.0 90.0) (float-vector 235.0 -165.0 50.0) (float-vector 235.0 165.0 50.0) (float-vector 235.0 165.0 90.0)))
         (instance face :init :vertices (list (float-vector 245.0 -165.0 90.0) (float-vector 235.0 -165.0 90.0) (float-vector 235.0 165.0 90.0) (float-vector 245.0 165.0 90.0)))
         (instance face :init :vertices (list (float-vector 250.0 165.0 -65.0) (float-vector 200.0 165.0 -65.0) (float-vector 200.0 165.0 115.0) (float-vector 250.0 165.0 115.0) (float-vector 250.0 165.0 110.0) (float-vector 255.0 165.0 110.0) (float-vector 255.0 165.0 80.0) (float-vector 245.0 165.0 80.0) (float-vector 245.0 165.0 90.0) (float-vector 235.0 165.0 90.0) (float-vector 235.0 165.0 50.0) (float-vector 250.0 165.0 50.0)))
         (instance face :init :vertices (list (float-vector 200.0 -165.0 -65.0) (float-vector 200.0 165.0 -65.0) (float-vector 250.0 165.0 -65.0) (float-vector 250.0 -165.0 -65.0)))
         (instance face :init :vertices (list (float-vector 250.0 -165.0 115.0) (float-vector 250.0 165.0 115.0) (float-vector 200.0 165.0 115.0) (float-vector 200.0 -165.0 115.0)))
         (instance face :init :vertices (list (float-vector 250.0 -165.0 50.0) (float-vector 250.0 -165.0 -65.0) (float-vector 250.0 165.0 -65.0) (float-vector 250.0 165.0 50.0)))
         (instance face :init :vertices (list (float-vector 250.0 -165.0 115.0) (float-vector 250.0 -165.0 110.0) (float-vector 250.0 165.0 110.0) (float-vector 250.0 165.0 115.0)))
         (instance face :init :vertices (list (float-vector 200.0 -165.0 115.0) (float-vector 200.0 -165.0 -65.0) (float-vector 250.0 -165.0 -65.0) (float-vector 250.0 -165.0 50.0) (float-vector 235.0 -165.0 50.0) (float-vector 235.0 -165.0 90.0) (float-vector 245.0 -165.0 90.0) (float-vector 245.0 -165.0 80.0) (float-vector 255.0 -165.0 80.0) (float-vector 255.0 -165.0 110.0) (float-vector 250.0 -165.0 110.0) (float-vector 250.0 -165.0 115.0)))
         (instance face :init :vertices (list (float-vector 200.0 -165.0 -65.0) (float-vector 200.0 -165.0 115.0) (float-vector 200.0 165.0 115.0) (float-vector 200.0 165.0 -65.0)))
         (instance face :init :vertices (list (float-vector 245.0 165.0 90.0) (float-vector 245.0 165.0 80.0) (float-vector 245.0 -165.0 80.0) (float-vector 245.0 -165.0 90.0)))
         (instance face :init :vertices (list (float-vector 255.0 -165.0 80.0) (float-vector 255.0 165.0 80.0) (float-vector 255.0 165.0 110.0) (float-vector 255.0 -165.0 110.0)))
         (instance face :init :vertices (list (float-vector 255.0 165.0 110.0) (float-vector 250.0 165.0 110.0) (float-vector 250.0 -165.0 110.0) (float-vector 255.0 -165.0 110.0)))
         (instance face :init :vertices (list (float-vector 245.0 165.0 80.0) (float-vector 255.0 165.0 80.0) (float-vector 255.0 -165.0 80.0) (float-vector 245.0 -165.0 80.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :rosybrown)
     (setq blink5 (instance bodyset-link :init (make-cascoords) :bodies bc :name :refrigerator-bodyset3 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :refrigerator-bodyset4
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -200.0 85.0 -65.0) (float-vector -200.0 -85.0 -65.0) (float-vector -200.0 -85.0 65.0) (float-vector -200.0 85.0 65.0)))
         (instance face :init :vertices (list (float-vector 200.0 -85.0 -65.0) (float-vector 200.0 -85.0 65.0) (float-vector -200.0 -85.0 65.0) (float-vector -200.0 -85.0 -65.0)))
         (instance face :init :vertices (list (float-vector 200.0 85.0 -65.0) (float-vector 200.0 85.0 65.0) (float-vector 200.0 35.0 65.0) (float-vector 200.0 35.0 -15.0) (float-vector 200.0 -35.0 -15.0) (float-vector 200.0 -35.0 65.0) (float-vector 200.0 -85.0 65.0) (float-vector 200.0 -85.0 -65.0)))
         (instance face :init :vertices (list (float-vector -200.0 85.0 65.0) (float-vector -200.0 -85.0 65.0) (float-vector 200.0 -85.0 65.0) (float-vector 200.0 -35.0 65.0) (float-vector -150.0 -35.0 65.0) (float-vector -150.0 35.0 65.0) (float-vector 200.0 35.0 65.0) (float-vector 200.0 85.0 65.0)))
         (instance face :init :vertices (list (float-vector 200.0 85.0 -65.0) (float-vector 200.0 -85.0 -65.0) (float-vector -200.0 -85.0 -65.0) (float-vector -200.0 85.0 -65.0)))
         (instance face :init :vertices (list (float-vector -200.0 85.0 -65.0) (float-vector -200.0 85.0 65.0) (float-vector 200.0 85.0 65.0) (float-vector 200.0 85.0 -65.0)))
         (instance face :init :vertices (list (float-vector -150.0 35.0 65.0) (float-vector -150.0 -35.0 65.0) (float-vector -150.0 -35.0 -15.0) (float-vector -150.0 35.0 -15.0)))
         (instance face :init :vertices (list (float-vector -150.0 -35.0 -15.0) (float-vector -150.0 -35.0 65.0) (float-vector 200.0 -35.0 65.0) (float-vector 200.0 -35.0 -15.0)))
         (instance face :init :vertices (list (float-vector 200.0 35.0 -15.0) (float-vector 200.0 35.0 65.0) (float-vector -150.0 35.0 65.0) (float-vector -150.0 35.0 -15.0)))
         (instance face :init :vertices (list (float-vector -150.0 35.0 -15.0) (float-vector -150.0 -35.0 -15.0) (float-vector 200.0 -35.0 -15.0) (float-vector 200.0 35.0 -15.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 235.0 135.0 50.0) (float-vector 235.0 -135.0 50.0) (float-vector 250.0 -135.0 50.0) (float-vector 250.0 135.0 50.0)))
         (instance face :init :vertices (list (float-vector 235.0 -135.0 90.0) (float-vector 235.0 -135.0 50.0) (float-vector 235.0 135.0 50.0) (float-vector 235.0 135.0 90.0)))
         (instance face :init :vertices (list (float-vector 245.0 -135.0 90.0) (float-vector 235.0 -135.0 90.0) (float-vector 235.0 135.0 90.0) (float-vector 245.0 135.0 90.0)))
         (instance face :init :vertices (list (float-vector 250.0 135.0 -65.0) (float-vector 200.0 135.0 -65.0) (float-vector 200.0 135.0 115.0) (float-vector 250.0 135.0 115.0) (float-vector 250.0 135.0 110.0) (float-vector 255.0 135.0 110.0) (float-vector 255.0 135.0 80.0) (float-vector 245.0 135.0 80.0) (float-vector 245.0 135.0 90.0) (float-vector 235.0 135.0 90.0) (float-vector 235.0 135.0 50.0) (float-vector 250.0 135.0 50.0)))
         (instance face :init :vertices (list (float-vector 200.0 -135.0 -65.0) (float-vector 200.0 135.0 -65.0) (float-vector 250.0 135.0 -65.0) (float-vector 250.0 -135.0 -65.0)))
         (instance face :init :vertices (list (float-vector 250.0 -135.0 115.0) (float-vector 250.0 135.0 115.0) (float-vector 200.0 135.0 115.0) (float-vector 200.0 -135.0 115.0)))
         (instance face :init :vertices (list (float-vector 250.0 -135.0 50.0) (float-vector 250.0 -135.0 -65.0) (float-vector 250.0 135.0 -65.0) (float-vector 250.0 135.0 50.0)))
         (instance face :init :vertices (list (float-vector 250.0 -135.0 115.0) (float-vector 250.0 -135.0 110.0) (float-vector 250.0 135.0 110.0) (float-vector 250.0 135.0 115.0)))
         (instance face :init :vertices (list (float-vector 200.0 -135.0 115.0) (float-vector 200.0 -135.0 -65.0) (float-vector 250.0 -135.0 -65.0) (float-vector 250.0 -135.0 50.0) (float-vector 235.0 -135.0 50.0) (float-vector 235.0 -135.0 90.0) (float-vector 245.0 -135.0 90.0) (float-vector 245.0 -135.0 80.0) (float-vector 255.0 -135.0 80.0) (float-vector 255.0 -135.0 110.0) (float-vector 250.0 -135.0 110.0) (float-vector 250.0 -135.0 115.0)))
         (instance face :init :vertices (list (float-vector 200.0 -135.0 -65.0) (float-vector 200.0 -135.0 115.0) (float-vector 200.0 135.0 115.0) (float-vector 200.0 135.0 -65.0)))
         (instance face :init :vertices (list (float-vector 245.0 135.0 90.0) (float-vector 245.0 135.0 80.0) (float-vector 245.0 -135.0 80.0) (float-vector 245.0 -135.0 90.0)))
         (instance face :init :vertices (list (float-vector 255.0 -135.0 80.0) (float-vector 255.0 135.0 80.0) (float-vector 255.0 135.0 110.0) (float-vector 255.0 -135.0 110.0)))
         (instance face :init :vertices (list (float-vector 255.0 135.0 110.0) (float-vector 250.0 135.0 110.0) (float-vector 250.0 -135.0 110.0) (float-vector 255.0 -135.0 110.0)))
         (instance face :init :vertices (list (float-vector 245.0 135.0 80.0) (float-vector 255.0 135.0 80.0) (float-vector 255.0 -135.0 80.0) (float-vector 245.0 -135.0 80.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :rosybrown)
     (setq blink4 (instance bodyset-link :init (make-cascoords) :bodies bc :name :refrigerator-bodyset4 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :refrigerator-bodyset5
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -200.0 250.0 -165.0) (float-vector -200.0 -250.0 -165.0) (float-vector -200.0 -250.0 165.0) (float-vector -200.0 250.0 165.0)))
         (instance face :init :vertices (list (float-vector 200.0 -250.0 -165.0) (float-vector 200.0 -250.0 165.0) (float-vector -200.0 -250.0 165.0) (float-vector -200.0 -250.0 -165.0)))
         (instance face :init :vertices (list (float-vector 200.0 250.0 -165.0) (float-vector 200.0 250.0 165.0) (float-vector 200.0 200.0 165.0) (float-vector 200.0 200.0 -115.0) (float-vector 200.0 -200.0 -115.0) (float-vector 200.0 -200.0 165.0) (float-vector 200.0 -250.0 165.0) (float-vector 200.0 -250.0 -165.0)))
         (instance face :init :vertices (list (float-vector -200.0 250.0 165.0) (float-vector -200.0 -250.0 165.0) (float-vector 200.0 -250.0 165.0) (float-vector 200.0 -200.0 165.0) (float-vector -150.0 -200.0 165.0) (float-vector -150.0 200.0 165.0) (float-vector 200.0 200.0 165.0) (float-vector 200.0 250.0 165.0)))
         (instance face :init :vertices (list (float-vector 200.0 250.0 -165.0) (float-vector 200.0 -250.0 -165.0) (float-vector -200.0 -250.0 -165.0) (float-vector -200.0 250.0 -165.0)))
         (instance face :init :vertices (list (float-vector -200.0 250.0 -165.0) (float-vector -200.0 250.0 165.0) (float-vector 200.0 250.0 165.0) (float-vector 200.0 250.0 -165.0)))
         (instance face :init :vertices (list (float-vector -150.0 200.0 165.0) (float-vector -150.0 -200.0 165.0) (float-vector -150.0 -200.0 -115.0) (float-vector -150.0 200.0 -115.0)))
         (instance face :init :vertices (list (float-vector -150.0 -200.0 -115.0) (float-vector -150.0 -200.0 165.0) (float-vector 200.0 -200.0 165.0) (float-vector 200.0 -200.0 -115.0)))
         (instance face :init :vertices (list (float-vector 200.0 200.0 -115.0) (float-vector 200.0 200.0 165.0) (float-vector -150.0 200.0 165.0) (float-vector -150.0 200.0 -115.0)))
         (instance face :init :vertices (list (float-vector -150.0 200.0 -115.0) (float-vector -150.0 -200.0 -115.0) (float-vector 200.0 -200.0 -115.0) (float-vector 200.0 200.0 -115.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 235.0 300.0 150.0) (float-vector 235.0 -300.0 150.0) (float-vector 250.0 -300.0 150.0) (float-vector 250.0 300.0 150.0)))
         (instance face :init :vertices (list (float-vector 235.0 -300.0 190.0) (float-vector 235.0 -300.0 150.0) (float-vector 235.0 300.0 150.0) (float-vector 235.0 300.0 190.0)))
         (instance face :init :vertices (list (float-vector 245.0 -300.0 190.0) (float-vector 235.0 -300.0 190.0) (float-vector 235.0 300.0 190.0) (float-vector 245.0 300.0 190.0)))
         (instance face :init :vertices (list (float-vector 250.0 300.0 -165.0) (float-vector 200.0 300.0 -165.0) (float-vector 200.0 300.0 215.0) (float-vector 250.0 300.0 215.0) (float-vector 250.0 300.0 210.0) (float-vector 255.0 300.0 210.0) (float-vector 255.0 300.0 180.0) (float-vector 245.0 300.0 180.0) (float-vector 245.0 300.0 190.0) (float-vector 235.0 300.0 190.0) (float-vector 235.0 300.0 150.0) (float-vector 250.0 300.0 150.0)))
         (instance face :init :vertices (list (float-vector 200.0 -300.0 -165.0) (float-vector 200.0 300.0 -165.0) (float-vector 250.0 300.0 -165.0) (float-vector 250.0 -300.0 -165.0)))
         (instance face :init :vertices (list (float-vector 250.0 -300.0 215.0) (float-vector 250.0 300.0 215.0) (float-vector 200.0 300.0 215.0) (float-vector 200.0 -300.0 215.0)))
         (instance face :init :vertices (list (float-vector 250.0 -300.0 150.0) (float-vector 250.0 -300.0 -165.0) (float-vector 250.0 300.0 -165.0) (float-vector 250.0 300.0 150.0)))
         (instance face :init :vertices (list (float-vector 250.0 -300.0 215.0) (float-vector 250.0 -300.0 210.0) (float-vector 250.0 300.0 210.0) (float-vector 250.0 300.0 215.0)))
         (instance face :init :vertices (list (float-vector 200.0 -300.0 215.0) (float-vector 200.0 -300.0 -165.0) (float-vector 250.0 -300.0 -165.0) (float-vector 250.0 -300.0 150.0) (float-vector 235.0 -300.0 150.0) (float-vector 235.0 -300.0 190.0) (float-vector 245.0 -300.0 190.0) (float-vector 245.0 -300.0 180.0) (float-vector 255.0 -300.0 180.0) (float-vector 255.0 -300.0 210.0) (float-vector 250.0 -300.0 210.0) (float-vector 250.0 -300.0 215.0)))
         (instance face :init :vertices (list (float-vector 200.0 -300.0 -165.0) (float-vector 200.0 -300.0 215.0) (float-vector 200.0 300.0 215.0) (float-vector 200.0 300.0 -165.0)))
         (instance face :init :vertices (list (float-vector 245.0 300.0 190.0) (float-vector 245.0 300.0 180.0) (float-vector 245.0 -300.0 180.0) (float-vector 245.0 -300.0 190.0)))
         (instance face :init :vertices (list (float-vector 255.0 -300.0 180.0) (float-vector 255.0 300.0 180.0) (float-vector 255.0 300.0 210.0) (float-vector 255.0 -300.0 210.0)))
         (instance face :init :vertices (list (float-vector 255.0 300.0 210.0) (float-vector 250.0 300.0 210.0) (float-vector 250.0 -300.0 210.0) (float-vector 255.0 -300.0 210.0)))
         (instance face :init :vertices (list (float-vector 245.0 300.0 180.0) (float-vector 255.0 300.0 180.0) (float-vector 255.0 -300.0 180.0) (float-vector 245.0 -300.0 180.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :rosybrown)
     (setq blink3 (instance bodyset-link :init (make-cascoords) :bodies bc :name :refrigerator-bodyset5 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :refrigerator-bodyset6
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 15.0 -220.0 3.410605e-13) (float-vector 15.0 -220.0 750.0) (float-vector 15.0 -270.0 750.0) (float-vector 15.0 -270.0 0.0)))
         (instance face :init :vertices (list (float-vector 25.0 -220.0 750.0) (float-vector 15.0 -220.0 750.0) (float-vector 15.0 -220.0 3.410605e-13) (float-vector 25.0 -220.0 0.0)))
         (instance face :init :vertices (list (float-vector 17.5 -270.0 0.0) (float-vector 15.0 -270.0 0.0) (float-vector 15.0 -270.0 750.0) (float-vector 17.5 -270.0 750.0)))
         (instance face :init :vertices (list (float-vector 25.0 25.0 0.0) (float-vector -25.0 25.0 0.0) (float-vector -25.0 25.0 750.0) (float-vector 25.0 25.0 750.0)))
         (instance face :init :vertices (list (float-vector -25.0 -275.0 0.0) (float-vector -25.0 25.0 0.0) (float-vector 25.0 25.0 0.0) (float-vector 25.0 -220.0 0.0) (float-vector 15.0 -220.0 3.410605e-13) (float-vector 15.0 -270.0 0.0) (float-vector 17.5 -270.0 0.0) (float-vector 17.5 -245.0 0.0) (float-vector 32.5 -245.0 0.0) (float-vector 32.5 -275.0 0.0)))
         (instance face :init :vertices (list (float-vector 25.0 -220.0 750.0) (float-vector 25.0 25.0 750.0) (float-vector -25.0 25.0 750.0) (float-vector -25.0 -275.0 750.0) (float-vector 32.5 -275.0 750.0) (float-vector 32.5 -245.0 750.0) (float-vector 17.5 -245.0 750.0) (float-vector 17.5 -270.0 750.0) (float-vector 15.0 -270.0 750.0) (float-vector 15.0 -220.0 750.0)))
         (instance face :init :vertices (list (float-vector 25.0 25.0 750.0) (float-vector 25.0 -220.0 750.0) (float-vector 25.0 -220.0 0.0) (float-vector 25.0 25.0 0.0)))
         (instance face :init :vertices (list (float-vector -25.0 -275.0 750.0) (float-vector -25.0 -275.0 0.0) (float-vector 32.5 -275.0 0.0) (float-vector 32.5 -275.0 750.0)))
         (instance face :init :vertices (list (float-vector -25.0 -275.0 0.0) (float-vector -25.0 -275.0 750.0) (float-vector -25.0 25.0 750.0) (float-vector -25.0 25.0 0.0)))
         (instance face :init :vertices (list (float-vector 17.5 -245.0 750.0) (float-vector 17.5 -245.0 0.0) (float-vector 17.5 -270.0 0.0) (float-vector 17.5 -270.0 750.0)))
         (instance face :init :vertices (list (float-vector 32.5 -275.0 0.0) (float-vector 32.5 -245.0 0.0) (float-vector 32.5 -245.0 750.0) (float-vector 32.5 -275.0 750.0)))
         (instance face :init :vertices (list (float-vector 32.5 -245.0 0.0) (float-vector 17.5 -245.0 0.0) (float-vector 17.5 -245.0 750.0) (float-vector 32.5 -245.0 750.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :rosybrown)
     (setq blink2 (instance bodyset-link :init (make-cascoords) :bodies bc :name :refrigerator-bodyset6 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :refrigerator-bodyset7
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 15.0 270.0 3.410605e-13) (float-vector 15.0 270.0 750.0) (float-vector 15.0 220.0 750.0) (float-vector 15.0 220.0 0.0)))
         (instance face :init :vertices (list (float-vector 17.5 270.0 750.0) (float-vector 15.0 270.0 750.0) (float-vector 15.0 270.0 3.410605e-13) (float-vector 17.5 270.0 2.273737e-13)))
         (instance face :init :vertices (list (float-vector 25.0 220.0 0.0) (float-vector 15.0 220.0 0.0) (float-vector 15.0 220.0 750.0) (float-vector 25.0 220.0 750.0)))
         (instance face :init :vertices (list (float-vector 32.5 275.0 0.0) (float-vector -25.0 275.0 0.0) (float-vector -25.0 275.0 750.0) (float-vector 32.5 275.0 750.0)))
         (instance face :init :vertices (list (float-vector -25.0 -25.0 0.0) (float-vector -25.0 275.0 0.0) (float-vector 32.5 275.0 0.0) (float-vector 32.5 245.0 0.0) (float-vector 17.5 245.0 0.0) (float-vector 17.5 270.0 2.273737e-13) (float-vector 15.0 270.0 3.410605e-13) (float-vector 15.0 220.0 0.0) (float-vector 25.0 220.0 0.0) (float-vector 25.0 -25.0 0.0)))
         (instance face :init :vertices (list (float-vector 25.0 -25.0 750.0) (float-vector 25.0 220.0 750.0) (float-vector 15.0 220.0 750.0) (float-vector 15.0 270.0 750.0) (float-vector 17.5 270.0 750.0) (float-vector 17.5 245.0 750.0) (float-vector 32.5 245.0 750.0) (float-vector 32.5 275.0 750.0) (float-vector -25.0 275.0 750.0) (float-vector -25.0 -25.0 750.0)))
         (instance face :init :vertices (list (float-vector 25.0 -25.0 750.0) (float-vector 25.0 -25.0 0.0) (float-vector 25.0 220.0 0.0) (float-vector 25.0 220.0 750.0)))
         (instance face :init :vertices (list (float-vector -25.0 -25.0 750.0) (float-vector -25.0 -25.0 0.0) (float-vector 25.0 -25.0 0.0) (float-vector 25.0 -25.0 750.0)))
         (instance face :init :vertices (list (float-vector -25.0 -25.0 0.0) (float-vector -25.0 -25.0 750.0) (float-vector -25.0 275.0 750.0) (float-vector -25.0 275.0 0.0)))
         (instance face :init :vertices (list (float-vector 17.5 270.0 2.273737e-13) (float-vector 17.5 245.0 0.0) (float-vector 17.5 245.0 750.0) (float-vector 17.5 270.0 750.0)))
         (instance face :init :vertices (list (float-vector 17.5 245.0 0.0) (float-vector 32.5 245.0 0.0) (float-vector 32.5 245.0 750.0) (float-vector 17.5 245.0 750.0)))
         (instance face :init :vertices (list (float-vector 32.5 245.0 0.0) (float-vector 32.5 275.0 0.0) (float-vector 32.5 275.0 750.0) (float-vector 32.5 245.0 750.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :rosybrown)
     (setq blink1 (instance bodyset-link :init (make-cascoords) :bodies bc :name :refrigerator-bodyset7 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send blink1 :newcoords (make-coords :pos (float-vector 260.0 -275.0 1015.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink1)
     (send blink2 :newcoords (make-coords :pos (float-vector 260.0 275.0 1015.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink2)
     (send blink3 :newcoords (make-coords :pos (float-vector 35.0 0.0 805.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink3)
     (send blink4 :newcoords (make-coords :pos (float-vector 35.0 -165.0 525.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink4)
     (send blink5 :newcoords (make-coords :pos (float-vector 35.0 135.0 525.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink5)
     (send blink6 :newcoords (make-coords :pos (float-vector 35.0 0.0 230.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink6)
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     ;; definition of :left-door
     (setq joint0 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink1 :name :left-door :axis :-z
			     :min    0.0 :max   90.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :right-door
     (setq joint1 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink2 :name :right-door :axis :z 
			     :min    0.0 :max   90.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :vegetable-drawer
     (setq joint2 (instance linear-joint :init
			     :parent-link blink0 :child-link blink3 :name :vegetable-drawer :axis (float-vector 1.0 0.0 0.0)
			     :min    0.0 :max  500.0 :max-joint-velocity 0.785398 :max-joint-torque 100))

     ;; definition of :left-freezer
     (setq joint3 (instance linear-joint :init
			     :parent-link blink0 :child-link blink4 :name :left-freezer :axis (float-vector 1.0 0.0 0.0)
			     :min    0.0 :max  500.0 :max-joint-velocity 0.785398 :max-joint-torque 100))

     ;; definition of :right-freezer
     (setq joint4 (instance linear-joint :init
			     :parent-link blink0 :child-link blink5 :name :right-freezer :axis (float-vector 1.0 0.0 0.0)
			     :min    0.0 :max  500.0 :max-joint-velocity 0.785398 :max-joint-torque 100))

     ;; definition of :bottom-drawer
     (setq joint5 (instance linear-joint :init
			     :parent-link blink0 :child-link blink6 :name :bottom-drawer :axis (float-vector 1.0 0.0 0.0)
			     :min    0.0 :max  500.0 :max-joint-velocity 0.785398 :max-joint-torque 100))


     ;; definition of :handle
     (setq handle0 (make-cascoords :pos (float-vector 355.0 0.0 1005.0) :rot #2f((-1.0 -1.898822e-15 1.972152e-31) (-1.972152e-31 2.220446e-16 1.0) (-1.898822e-15 1.0 -2.220446e-16)) :name ":vegetable-drawer"))
     (send blink0 :assoc handle0)
     (setq handle1 (make-cascoords :pos (float-vector 340.0 75.0 1115.0) :rot #2f((-0.5 0.866025 4.482518e-17) (-0.866025 -0.5 -1.672899e-16) (-1.224647e-16 -1.224647e-16 1.0)) :name ":right-door"))
     (send blink0 :assoc handle1)
     (setq handle2 (make-cascoords :pos (float-vector 340.0 -75.0 1115.0) :rot #2f((-0.5 -0.866025 -1.672899e-16) (0.866025 -0.5 4.482518e-17) (-1.224647e-16 -1.224647e-16 1.0)) :name ":left-door"))
     (send blink0 :assoc handle2)

     ;; init-ending 
     (setq links (list blink0 blink1 blink2 blink3 blink4 blink5 blink6))
     (setq joint-list (list joint0 joint1 joint2 joint3 joint4 joint5))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:left-door (&rest args) (forward-message-to joint0 args))
  (:right-door (&rest args) (forward-message-to joint1 args))
  (:vegetable-drawer (&rest args) (forward-message-to joint2 args))
  (:left-freezer (&rest args) (forward-message-to joint3 args))
  (:right-freezer (&rest args) (forward-message-to joint4 args))
  (:bottom-drawer (&rest args) (forward-message-to joint5 args))
  (:handle (&rest args) (forward-message-to-all (list  handle0 handle1 handle2) args))
  (:handle-vegetable-drawer (&rest args) (forward-message-to handle0 args))
  (:handle-right-door (&rest args) (forward-message-to handle1 args))
  (:handle-left-door (&rest args) (forward-message-to handle2 args))
  (:attention (&rest args) (forward-message-to-all (list ) args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun refrigerator (&rest args) (instance* refrigerator-object :init args))
;; (format *error-output* "(instance refrigerator-object :init) for generating model~%")
