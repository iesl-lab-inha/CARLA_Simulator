;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass room73b2-kitchen-shelf-object
  :super cascaded-link
  :slots (sensors
         handle0
         joint0 joint1 joint2 joint3 joint4 joint5 ))
(defmethod room73b2-kitchen-shelf-object
  (:init
   (&rest args &key (name "room73b2-kitchen-shelf") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0 blink1 blink2 blink3 blink4 blink5 blink6
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :root
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 165.0 300.0 895.0) (float-vector -195.0 300.0 895.0) (float-vector -195.0 -300.0 895.0) (float-vector 165.0 -300.0 895.0)))
         (instance face :init :vertices (list (float-vector -195.0 300.0 885.0) (float-vector 165.0 300.0 885.0) (float-vector 165.0 -300.0 885.0) (float-vector -195.0 -300.0 885.0)))
         (instance face :init :vertices (list (float-vector 165.0 300.0 895.0) (float-vector 165.0 300.0 885.0) (float-vector -195.0 300.0 885.0) (float-vector -195.0 300.0 895.0)))
         (instance face :init :vertices (list (float-vector 165.0 -300.0 895.0) (float-vector 165.0 -300.0 885.0) (float-vector 165.0 300.0 885.0) (float-vector 165.0 300.0 895.0)))
         (instance face :init :vertices (list (float-vector -195.0 -300.0 895.0) (float-vector -195.0 -300.0 885.0) (float-vector 165.0 -300.0 885.0) (float-vector 165.0 -300.0 895.0)))
         (instance face :init :vertices (list (float-vector -195.0 300.0 895.0) (float-vector -195.0 300.0 885.0) (float-vector -195.0 -300.0 885.0) (float-vector -195.0 -300.0 895.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 165.0 300.0 10.0) (float-vector -195.0 300.0 10.0) (float-vector -195.0 -300.0 10.0) (float-vector 165.0 -300.0 10.0)))
         (instance face :init :vertices (list (float-vector -195.0 300.0 0.0) (float-vector 165.0 300.0 0.0) (float-vector 165.0 -300.0 0.0) (float-vector -195.0 -300.0 0.0)))
         (instance face :init :vertices (list (float-vector 165.0 300.0 10.0) (float-vector 165.0 300.0 0.0) (float-vector -195.0 300.0 0.0) (float-vector -195.0 300.0 10.0)))
         (instance face :init :vertices (list (float-vector 165.0 -300.0 10.0) (float-vector 165.0 -300.0 0.0) (float-vector 165.0 300.0 0.0) (float-vector 165.0 300.0 10.0)))
         (instance face :init :vertices (list (float-vector -195.0 -300.0 10.0) (float-vector -195.0 -300.0 0.0) (float-vector 165.0 -300.0 0.0) (float-vector 165.0 -300.0 10.0)))
         (instance face :init :vertices (list (float-vector -195.0 300.0 10.0) (float-vector -195.0 300.0 0.0) (float-vector -195.0 -300.0 0.0) (float-vector -195.0 -300.0 10.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -185.0 290.0 884.5) (float-vector -195.0 290.0 884.5) (float-vector -195.0 -290.0 884.5) (float-vector -185.0 -290.0 884.5)))
         (instance face :init :vertices (list (float-vector -195.0 290.0 9.5) (float-vector -185.0 290.0 9.5) (float-vector -185.0 -290.0 9.5) (float-vector -195.0 -290.0 9.5)))
         (instance face :init :vertices (list (float-vector -185.0 290.0 884.5) (float-vector -185.0 290.0 9.5) (float-vector -195.0 290.0 9.5) (float-vector -195.0 290.0 884.5)))
         (instance face :init :vertices (list (float-vector -185.0 -290.0 884.5) (float-vector -185.0 -290.0 9.5) (float-vector -185.0 290.0 9.5) (float-vector -185.0 290.0 884.5)))
         (instance face :init :vertices (list (float-vector -195.0 -290.0 884.5) (float-vector -195.0 -290.0 9.5) (float-vector -185.0 -290.0 9.5) (float-vector -185.0 -290.0 884.5)))
         (instance face :init :vertices (list (float-vector -195.0 290.0 884.5) (float-vector -195.0 290.0 9.5) (float-vector -195.0 -290.0 9.5) (float-vector -195.0 -290.0 884.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 165.0 300.0 884.5) (float-vector -195.0 300.0 884.5) (float-vector -195.0 290.0 884.5) (float-vector 165.0 290.0 884.5)))
         (instance face :init :vertices (list (float-vector -195.0 300.0 9.5) (float-vector 165.0 300.0 9.5) (float-vector 165.0 290.0 9.5) (float-vector -195.0 290.0 9.5)))
         (instance face :init :vertices (list (float-vector 165.0 300.0 884.5) (float-vector 165.0 300.0 9.5) (float-vector -195.0 300.0 9.5) (float-vector -195.0 300.0 884.5)))
         (instance face :init :vertices (list (float-vector 165.0 290.0 884.5) (float-vector 165.0 290.0 9.5) (float-vector 165.0 300.0 9.5) (float-vector 165.0 300.0 884.5)))
         (instance face :init :vertices (list (float-vector -195.0 290.0 884.5) (float-vector -195.0 290.0 9.5) (float-vector 165.0 290.0 9.5) (float-vector 165.0 290.0 884.5)))
         (instance face :init :vertices (list (float-vector -195.0 300.0 884.5) (float-vector -195.0 300.0 9.5) (float-vector -195.0 290.0 9.5) (float-vector -195.0 290.0 884.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 165.0 -290.0 884.5) (float-vector -195.0 -290.0 884.5) (float-vector -195.0 -300.0 884.5) (float-vector 165.0 -300.0 884.5)))
         (instance face :init :vertices (list (float-vector -195.0 -290.0 9.5) (float-vector 165.0 -290.0 9.5) (float-vector 165.0 -300.0 9.5) (float-vector -195.0 -300.0 9.5)))
         (instance face :init :vertices (list (float-vector 165.0 -290.0 884.5) (float-vector 165.0 -290.0 9.5) (float-vector -195.0 -290.0 9.5) (float-vector -195.0 -290.0 884.5)))
         (instance face :init :vertices (list (float-vector 165.0 -300.0 884.5) (float-vector 165.0 -300.0 9.5) (float-vector 165.0 -290.0 9.5) (float-vector 165.0 -290.0 884.5)))
         (instance face :init :vertices (list (float-vector -195.0 -300.0 884.5) (float-vector -195.0 -300.0 9.5) (float-vector 165.0 -300.0 9.5) (float-vector 165.0 -300.0 884.5)))
         (instance face :init :vertices (list (float-vector -195.0 -290.0 884.5) (float-vector -195.0 -290.0 9.5) (float-vector -195.0 -300.0 9.5) (float-vector -195.0 -300.0 884.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 165.0 290.0 673.0) (float-vector -185.0 290.0 673.0) (float-vector -185.0 -290.0 673.0) (float-vector 165.0 -290.0 673.0)))
         (instance face :init :vertices (list (float-vector -185.0 290.0 663.0) (float-vector 165.0 290.0 663.0) (float-vector 165.0 -290.0 663.0) (float-vector -185.0 -290.0 663.0)))
         (instance face :init :vertices (list (float-vector 165.0 290.0 673.0) (float-vector 165.0 290.0 663.0) (float-vector -185.0 290.0 663.0) (float-vector -185.0 290.0 673.0)))
         (instance face :init :vertices (list (float-vector 165.0 -290.0 673.0) (float-vector 165.0 -290.0 663.0) (float-vector 165.0 290.0 663.0) (float-vector 165.0 290.0 673.0)))
         (instance face :init :vertices (list (float-vector -185.0 -290.0 673.0) (float-vector -185.0 -290.0 663.0) (float-vector 165.0 -290.0 663.0) (float-vector 165.0 -290.0 673.0)))
         (instance face :init :vertices (list (float-vector -185.0 290.0 673.0) (float-vector -185.0 290.0 663.0) (float-vector -185.0 -290.0 663.0) (float-vector -185.0 -290.0 673.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 165.0 290.0 452.0) (float-vector -185.0 290.0 452.0) (float-vector -185.0 -290.0 452.0) (float-vector 165.0 -290.0 452.0)))
         (instance face :init :vertices (list (float-vector -185.0 290.0 442.0) (float-vector 165.0 290.0 442.0) (float-vector 165.0 -290.0 442.0) (float-vector -185.0 -290.0 442.0)))
         (instance face :init :vertices (list (float-vector 165.0 290.0 452.0) (float-vector 165.0 290.0 442.0) (float-vector -185.0 290.0 442.0) (float-vector -185.0 290.0 452.0)))
         (instance face :init :vertices (list (float-vector 165.0 -290.0 452.0) (float-vector 165.0 -290.0 442.0) (float-vector 165.0 290.0 442.0) (float-vector 165.0 290.0 452.0)))
         (instance face :init :vertices (list (float-vector -185.0 -290.0 452.0) (float-vector -185.0 -290.0 442.0) (float-vector 165.0 -290.0 442.0) (float-vector 165.0 -290.0 452.0)))
         (instance face :init :vertices (list (float-vector -185.0 290.0 452.0) (float-vector -185.0 290.0 442.0) (float-vector -185.0 -290.0 442.0) (float-vector -185.0 -290.0 452.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 165.0 290.0 231.0) (float-vector -185.0 290.0 231.0) (float-vector -185.0 -290.0 231.0) (float-vector 165.0 -290.0 231.0)))
         (instance face :init :vertices (list (float-vector -185.0 290.0 221.0) (float-vector 165.0 290.0 221.0) (float-vector 165.0 -290.0 221.0) (float-vector -185.0 -290.0 221.0)))
         (instance face :init :vertices (list (float-vector 165.0 290.0 231.0) (float-vector 165.0 290.0 221.0) (float-vector -185.0 290.0 221.0) (float-vector -185.0 290.0 231.0)))
         (instance face :init :vertices (list (float-vector 165.0 -290.0 231.0) (float-vector 165.0 -290.0 221.0) (float-vector 165.0 290.0 221.0) (float-vector 165.0 290.0 231.0)))
         (instance face :init :vertices (list (float-vector -185.0 -290.0 231.0) (float-vector -185.0 -290.0 221.0) (float-vector 165.0 -290.0 221.0) (float-vector 165.0 -290.0 231.0)))
         (instance face :init :vertices (list (float-vector -185.0 290.0 231.0) (float-vector -185.0 290.0 221.0) (float-vector -185.0 -290.0 221.0) (float-vector -185.0 -290.0 231.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 165.0 -900.0 894.5) (float-vector -195.0 -900.0 894.5) (float-vector -195.0 -1050.0 894.5) (float-vector 165.0 -1050.0 894.5)))
         (instance face :init :vertices (list (float-vector -195.0 -900.0 249.5) (float-vector 165.0 -900.0 249.5) (float-vector 165.0 -1050.0 249.5) (float-vector -195.0 -1050.0 249.5)))
         (instance face :init :vertices (list (float-vector 165.0 -900.0 894.5) (float-vector 165.0 -900.0 249.5) (float-vector -195.0 -900.0 249.5) (float-vector -195.0 -900.0 894.5)))
         (instance face :init :vertices (list (float-vector 165.0 -1050.0 894.5) (float-vector 165.0 -1050.0 249.5) (float-vector 165.0 -900.0 249.5) (float-vector 165.0 -900.0 894.5)))
         (instance face :init :vertices (list (float-vector -195.0 -1050.0 894.5) (float-vector -195.0 -1050.0 249.5) (float-vector 165.0 -1050.0 249.5) (float-vector 165.0 -1050.0 894.5)))
         (instance face :init :vertices (list (float-vector -195.0 -900.0 894.5) (float-vector -195.0 -900.0 249.5) (float-vector -195.0 -1050.0 249.5) (float-vector -195.0 -1050.0 894.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 165.0 1500.0 894.5) (float-vector -195.0 1500.0 894.5) (float-vector -195.0 300.0 894.5) (float-vector 165.0 300.0 894.5)))
         (instance face :init :vertices (list (float-vector -195.0 1500.0 249.5) (float-vector 165.0 1500.0 249.5) (float-vector 165.0 300.0 249.5) (float-vector -195.0 300.0 249.5)))
         (instance face :init :vertices (list (float-vector 165.0 1500.0 894.5) (float-vector 165.0 1500.0 249.5) (float-vector -195.0 1500.0 249.5) (float-vector -195.0 1500.0 894.5)))
         (instance face :init :vertices (list (float-vector 165.0 300.0 894.5) (float-vector 165.0 300.0 249.5) (float-vector 165.0 1500.0 249.5) (float-vector 165.0 1500.0 894.5)))
         (instance face :init :vertices (list (float-vector -195.0 300.0 894.5) (float-vector -195.0 300.0 249.5) (float-vector 165.0 300.0 249.5) (float-vector 165.0 300.0 894.5)))
         (instance face :init :vertices (list (float-vector -195.0 1500.0 894.5) (float-vector -195.0 1500.0 249.5) (float-vector -195.0 300.0 249.5) (float-vector -195.0 300.0 894.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 195.0 -900.0 894.5) (float-vector 165.0 -900.0 894.5) (float-vector 165.0 -1050.0 894.5) (float-vector 195.0 -1050.0 894.5)))
         (instance face :init :vertices (list (float-vector 165.0 -900.0 249.5) (float-vector 195.0 -900.0 249.5) (float-vector 195.0 -1050.0 249.5) (float-vector 165.0 -1050.0 249.5)))
         (instance face :init :vertices (list (float-vector 195.0 -900.0 894.5) (float-vector 195.0 -900.0 249.5) (float-vector 165.0 -900.0 249.5) (float-vector 165.0 -900.0 894.5)))
         (instance face :init :vertices (list (float-vector 195.0 -1050.0 894.5) (float-vector 195.0 -1050.0 249.5) (float-vector 195.0 -900.0 249.5) (float-vector 195.0 -900.0 894.5)))
         (instance face :init :vertices (list (float-vector 165.0 -1050.0 894.5) (float-vector 165.0 -1050.0 249.5) (float-vector 195.0 -1050.0 249.5) (float-vector 195.0 -1050.0 894.5)))
         (instance face :init :vertices (list (float-vector 165.0 -900.0 894.5) (float-vector 165.0 -900.0 249.5) (float-vector 165.0 -1050.0 249.5) (float-vector 165.0 -1050.0 894.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 194.0 1500.0 250.0) (float-vector -194.0 1500.0 250.0) (float-vector -194.0 900.0 250.0) (float-vector 194.0 900.0 250.0)))
         (instance face :init :vertices (list (float-vector -194.0 1500.0 140.0) (float-vector 194.0 1500.0 140.0) (float-vector 194.0 900.0 140.0) (float-vector -194.0 900.0 140.0)))
         (instance face :init :vertices (list (float-vector 194.0 1500.0 250.0) (float-vector 194.0 1500.0 140.0) (float-vector -194.0 1500.0 140.0) (float-vector -194.0 1500.0 250.0)))
         (instance face :init :vertices (list (float-vector 194.0 900.0 250.0) (float-vector 194.0 900.0 140.0) (float-vector 194.0 1500.0 140.0) (float-vector 194.0 1500.0 250.0)))
         (instance face :init :vertices (list (float-vector -194.0 900.0 250.0) (float-vector -194.0 900.0 140.0) (float-vector 194.0 900.0 140.0) (float-vector 194.0 900.0 250.0)))
         (instance face :init :vertices (list (float-vector -194.0 1500.0 250.0) (float-vector -194.0 1500.0 140.0) (float-vector -194.0 900.0 140.0) (float-vector -194.0 900.0 250.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -195.0 -300.0 250.0) (float-vector -195.0 -300.0 895.0) (float-vector 195.0 -300.0 895.0) (float-vector 195.0 -300.0 835.0) (float-vector 405.0 -300.0 375.0) (float-vector 405.0 -300.0 315.0) (float-vector 195.0 -300.0 250.0)))
         (instance face :init :vertices (list (float-vector -195.0 -900.0 895.0) (float-vector -195.0 -900.0 250.0) (float-vector 195.0 -900.0 250.0) (float-vector 405.0 -900.0 315.0) (float-vector 405.0 -900.0 375.0) (float-vector 195.0 -900.0 835.0) (float-vector 195.0 -900.0 895.0)))
         (instance face :init :vertices (list (float-vector -195.0 -300.0 250.0) (float-vector -195.0 -900.0 250.0) (float-vector -195.0 -900.0 895.0) (float-vector -195.0 -300.0 895.0)))
         (instance face :init :vertices (list (float-vector 195.0 -300.0 250.0) (float-vector 195.0 -900.0 250.0) (float-vector -195.0 -900.0 250.0) (float-vector -195.0 -300.0 250.0)))
         (instance face :init :vertices (list (float-vector 405.0 -300.0 315.0) (float-vector 405.0 -900.0 315.0) (float-vector 195.0 -900.0 250.0) (float-vector 195.0 -300.0 250.0)))
         (instance face :init :vertices (list (float-vector 405.0 -300.0 375.0) (float-vector 405.0 -900.0 375.0) (float-vector 405.0 -900.0 315.0) (float-vector 405.0 -300.0 315.0)))
         (instance face :init :vertices (list (float-vector 195.0 -300.0 835.0) (float-vector 195.0 -900.0 835.0) (float-vector 405.0 -900.0 375.0) (float-vector 405.0 -300.0 375.0)))
         (instance face :init :vertices (list (float-vector 195.0 -300.0 895.0) (float-vector 195.0 -900.0 895.0) (float-vector 195.0 -900.0 835.0) (float-vector 195.0 -300.0 835.0)))
         (instance face :init :vertices (list (float-vector -195.0 -300.0 895.0) (float-vector -195.0 -900.0 895.0) (float-vector 195.0 -900.0 895.0) (float-vector 195.0 -300.0 895.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :white)
     (send (elt bc 2) :set-color :white)
     (send (elt bc 3) :set-color :white)
     (send (elt bc 4) :set-color :white)
     (send (elt bc 5) :set-color :white)
     (send (elt bc 6) :set-color :white)
     (send (elt bc 7) :set-color :white)
     (send (elt bc 8) :set-color :white)
     (send (elt bc 9) :set-color :white)
     (send (elt bc 10) :set-color :mediumspringgreen)
     (send (elt bc 11) :set-color :darkgray)
     (send (elt bc 12) :set-color :white)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :root :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :room73b2-kitchen-shelf-bodyset2
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 15.0 285.0 894.5) (float-vector -15.0 285.0 894.5) (float-vector -15.0 225.0 894.5) (float-vector 15.0 225.0 894.5)))
         (instance face :init :vertices (list (float-vector -15.0 285.0 -0.5) (float-vector 15.0 285.0 -0.5) (float-vector 15.0 225.0 -0.5) (float-vector -15.0 225.0 -0.5)))
         (instance face :init :vertices (list (float-vector 15.0 285.0 894.5) (float-vector 15.0 285.0 -0.5) (float-vector -15.0 285.0 -0.5) (float-vector -15.0 285.0 894.5)))
         (instance face :init :vertices (list (float-vector 15.0 225.0 894.5) (float-vector 15.0 225.0 -0.5) (float-vector 15.0 285.0 -0.5) (float-vector 15.0 285.0 894.5)))
         (instance face :init :vertices (list (float-vector -15.0 225.0 894.5) (float-vector -15.0 225.0 -0.5) (float-vector 15.0 225.0 -0.5) (float-vector 15.0 225.0 894.5)))
         (instance face :init :vertices (list (float-vector -15.0 285.0 894.5) (float-vector -15.0 285.0 -0.5) (float-vector -15.0 225.0 -0.5) (float-vector -15.0 225.0 894.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 15.0 225.0 894.5) (float-vector -15.0 225.0 894.5) (float-vector -15.0 45.0 894.5) (float-vector 15.0 45.0 894.5)))
         (instance face :init :vertices (list (float-vector -15.0 225.0 -0.5) (float-vector 15.0 225.0 -0.5) (float-vector 15.0 45.0 -0.5) (float-vector -15.0 45.0 -0.5)))
         (instance face :init :vertices (list (float-vector 15.0 225.0 894.5) (float-vector 15.0 225.0 -0.5) (float-vector -15.0 225.0 -0.5) (float-vector -15.0 225.0 894.5)))
         (instance face :init :vertices (list (float-vector 15.0 45.0 894.5) (float-vector 15.0 45.0 -0.5) (float-vector 15.0 225.0 -0.5) (float-vector 15.0 225.0 894.5)))
         (instance face :init :vertices (list (float-vector -15.0 45.0 894.5) (float-vector -15.0 45.0 -0.5) (float-vector 15.0 45.0 -0.5) (float-vector 15.0 45.0 894.5)))
         (instance face :init :vertices (list (float-vector -15.0 225.0 894.5) (float-vector -15.0 225.0 -0.5) (float-vector -15.0 45.0 -0.5) (float-vector -15.0 45.0 894.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 15.0 45.0 894.5) (float-vector -15.0 45.0 894.5) (float-vector -15.0 -15.0 894.5) (float-vector 15.0 -15.0 894.5)))
         (instance face :init :vertices (list (float-vector -15.0 45.0 -0.5) (float-vector 15.0 45.0 -0.5) (float-vector 15.0 -15.0 -0.5) (float-vector -15.0 -15.0 -0.5)))
         (instance face :init :vertices (list (float-vector 15.0 45.0 894.5) (float-vector 15.0 45.0 -0.5) (float-vector -15.0 45.0 -0.5) (float-vector -15.0 45.0 894.5)))
         (instance face :init :vertices (list (float-vector 15.0 -15.0 894.5) (float-vector 15.0 -15.0 -0.5) (float-vector 15.0 45.0 -0.5) (float-vector 15.0 45.0 894.5)))
         (instance face :init :vertices (list (float-vector -15.0 -15.0 894.5) (float-vector -15.0 -15.0 -0.5) (float-vector 15.0 -15.0 -0.5) (float-vector 15.0 -15.0 894.5)))
         (instance face :init :vertices (list (float-vector -15.0 45.0 894.5) (float-vector -15.0 45.0 -0.5) (float-vector -15.0 -15.0 -0.5) (float-vector -15.0 -15.0 894.5)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :mediumspringgreen)
     (send (elt bc 1) :set-color :white)
     (gl::transparent (elt bc 1) 0.5)
     (send (elt bc 2) :set-color :mediumspringgreen)
     (setq blink6 (instance bodyset-link :init (make-cascoords) :bodies bc :name :room73b2-kitchen-shelf-bodyset2 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :room73b2-kitchen-shelf-bodyset3
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 15.0 15.0 894.5) (float-vector -15.0 15.0 894.5) (float-vector -15.0 -45.0 894.5) (float-vector 15.0 -45.0 894.5)))
         (instance face :init :vertices (list (float-vector -15.0 15.0 -0.5) (float-vector 15.0 15.0 -0.5) (float-vector 15.0 -45.0 -0.5) (float-vector -15.0 -45.0 -0.5)))
         (instance face :init :vertices (list (float-vector 15.0 15.0 894.5) (float-vector 15.0 15.0 -0.5) (float-vector -15.0 15.0 -0.5) (float-vector -15.0 15.0 894.5)))
         (instance face :init :vertices (list (float-vector 15.0 -45.0 894.5) (float-vector 15.0 -45.0 -0.5) (float-vector 15.0 15.0 -0.5) (float-vector 15.0 15.0 894.5)))
         (instance face :init :vertices (list (float-vector -15.0 -45.0 894.5) (float-vector -15.0 -45.0 -0.5) (float-vector 15.0 -45.0 -0.5) (float-vector 15.0 -45.0 894.5)))
         (instance face :init :vertices (list (float-vector -15.0 15.0 894.5) (float-vector -15.0 15.0 -0.5) (float-vector -15.0 -45.0 -0.5) (float-vector -15.0 -45.0 894.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 15.0 -45.0 894.5) (float-vector -15.0 -45.0 894.5) (float-vector -15.0 -225.0 894.5) (float-vector 15.0 -225.0 894.5)))
         (instance face :init :vertices (list (float-vector -15.0 -45.0 -0.5) (float-vector 15.0 -45.0 -0.5) (float-vector 15.0 -225.0 -0.5) (float-vector -15.0 -225.0 -0.5)))
         (instance face :init :vertices (list (float-vector 15.0 -45.0 894.5) (float-vector 15.0 -45.0 -0.5) (float-vector -15.0 -45.0 -0.5) (float-vector -15.0 -45.0 894.5)))
         (instance face :init :vertices (list (float-vector 15.0 -225.0 894.5) (float-vector 15.0 -225.0 -0.5) (float-vector 15.0 -45.0 -0.5) (float-vector 15.0 -45.0 894.5)))
         (instance face :init :vertices (list (float-vector -15.0 -225.0 894.5) (float-vector -15.0 -225.0 -0.5) (float-vector 15.0 -225.0 -0.5) (float-vector 15.0 -225.0 894.5)))
         (instance face :init :vertices (list (float-vector -15.0 -45.0 894.5) (float-vector -15.0 -45.0 -0.5) (float-vector -15.0 -225.0 -0.5) (float-vector -15.0 -225.0 894.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 15.0 -225.0 894.5) (float-vector -15.0 -225.0 894.5) (float-vector -15.0 -285.0 894.5) (float-vector 15.0 -285.0 894.5)))
         (instance face :init :vertices (list (float-vector -15.0 -225.0 -0.5) (float-vector 15.0 -225.0 -0.5) (float-vector 15.0 -285.0 -0.5) (float-vector -15.0 -285.0 -0.5)))
         (instance face :init :vertices (list (float-vector 15.0 -225.0 894.5) (float-vector 15.0 -225.0 -0.5) (float-vector -15.0 -225.0 -0.5) (float-vector -15.0 -225.0 894.5)))
         (instance face :init :vertices (list (float-vector 15.0 -285.0 894.5) (float-vector 15.0 -285.0 -0.5) (float-vector 15.0 -225.0 -0.5) (float-vector 15.0 -225.0 894.5)))
         (instance face :init :vertices (list (float-vector -15.0 -285.0 894.5) (float-vector -15.0 -285.0 -0.5) (float-vector 15.0 -285.0 -0.5) (float-vector 15.0 -285.0 894.5)))
         (instance face :init :vertices (list (float-vector -15.0 -225.0 894.5) (float-vector -15.0 -225.0 -0.5) (float-vector -15.0 -285.0 -0.5) (float-vector -15.0 -285.0 894.5)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :mediumspringgreen)
     (send (elt bc 1) :set-color :white)
     (gl::transparent (elt bc 1) 0.5)
     (send (elt bc 2) :set-color :mediumspringgreen)
     (setq blink5 (instance bodyset-link :init (make-cascoords) :bodies bc :name :room73b2-kitchen-shelf-bodyset3 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :room73b2-kitchen-shelf-bodyset4
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 15.0 285.0 644.5) (float-vector -15.0 285.0 644.5) (float-vector -15.0 -15.0 644.5) (float-vector 15.0 -15.0 644.5)))
         (instance face :init :vertices (list (float-vector -15.0 285.0 -0.5) (float-vector 15.0 285.0 -0.5) (float-vector 15.0 -15.0 -0.5) (float-vector -15.0 -15.0 -0.5)))
         (instance face :init :vertices (list (float-vector 15.0 285.0 644.5) (float-vector 15.0 285.0 -0.5) (float-vector -15.0 285.0 -0.5) (float-vector -15.0 285.0 644.5)))
         (instance face :init :vertices (list (float-vector 15.0 -15.0 644.5) (float-vector 15.0 -15.0 -0.5) (float-vector 15.0 285.0 -0.5) (float-vector 15.0 285.0 644.5)))
         (instance face :init :vertices (list (float-vector -15.0 -15.0 644.5) (float-vector -15.0 -15.0 -0.5) (float-vector 15.0 -15.0 -0.5) (float-vector 15.0 -15.0 644.5)))
         (instance face :init :vertices (list (float-vector -15.0 285.0 644.5) (float-vector -15.0 285.0 -0.5) (float-vector -15.0 -15.0 -0.5) (float-vector -15.0 -15.0 644.5)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :mediumspringgreen)
     (setq blink4 (instance bodyset-link :init (make-cascoords) :bodies bc :name :room73b2-kitchen-shelf-bodyset4 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :room73b2-kitchen-shelf-bodyset5
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 15.0 15.0 644.5) (float-vector -15.0 15.0 644.5) (float-vector -15.0 -285.0 644.5) (float-vector 15.0 -285.0 644.5)))
         (instance face :init :vertices (list (float-vector -15.0 15.0 -0.5) (float-vector 15.0 15.0 -0.5) (float-vector 15.0 -285.0 -0.5) (float-vector -15.0 -285.0 -0.5)))
         (instance face :init :vertices (list (float-vector 15.0 15.0 644.5) (float-vector 15.0 15.0 -0.5) (float-vector -15.0 15.0 -0.5) (float-vector -15.0 15.0 644.5)))
         (instance face :init :vertices (list (float-vector 15.0 -285.0 644.5) (float-vector 15.0 -285.0 -0.5) (float-vector 15.0 15.0 -0.5) (float-vector 15.0 15.0 644.5)))
         (instance face :init :vertices (list (float-vector -15.0 -285.0 644.5) (float-vector -15.0 -285.0 -0.5) (float-vector 15.0 -285.0 -0.5) (float-vector 15.0 -285.0 644.5)))
         (instance face :init :vertices (list (float-vector -15.0 15.0 644.5) (float-vector -15.0 15.0 -0.5) (float-vector -15.0 -285.0 -0.5) (float-vector -15.0 -285.0 644.5)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :mediumspringgreen)
     (setq blink3 (instance bodyset-link :init (make-cascoords) :bodies bc :name :room73b2-kitchen-shelf-bodyset5 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :room73b2-kitchen-shelf-bodyset6
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 15.0 285.0 644.5) (float-vector -15.0 285.0 644.5) (float-vector -15.0 -15.0 644.5) (float-vector 15.0 -15.0 644.5)))
         (instance face :init :vertices (list (float-vector -15.0 285.0 -0.5) (float-vector 15.0 285.0 -0.5) (float-vector 15.0 -15.0 -0.5) (float-vector -15.0 -15.0 -0.5)))
         (instance face :init :vertices (list (float-vector 15.0 285.0 644.5) (float-vector 15.0 285.0 -0.5) (float-vector -15.0 285.0 -0.5) (float-vector -15.0 285.0 644.5)))
         (instance face :init :vertices (list (float-vector 15.0 -15.0 644.5) (float-vector 15.0 -15.0 -0.5) (float-vector 15.0 285.0 -0.5) (float-vector 15.0 285.0 644.5)))
         (instance face :init :vertices (list (float-vector -15.0 -15.0 644.5) (float-vector -15.0 -15.0 -0.5) (float-vector 15.0 -15.0 -0.5) (float-vector 15.0 -15.0 644.5)))
         (instance face :init :vertices (list (float-vector -15.0 285.0 644.5) (float-vector -15.0 285.0 -0.5) (float-vector -15.0 -15.0 -0.5) (float-vector -15.0 -15.0 644.5)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :mediumspringgreen)
     (setq blink2 (instance bodyset-link :init (make-cascoords) :bodies bc :name :room73b2-kitchen-shelf-bodyset6 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :room73b2-kitchen-shelf-bodyset7
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 15.0 15.0 644.5) (float-vector -15.0 15.0 644.5) (float-vector -15.0 -285.0 644.5) (float-vector 15.0 -285.0 644.5)))
         (instance face :init :vertices (list (float-vector -15.0 15.0 -0.5) (float-vector 15.0 15.0 -0.5) (float-vector 15.0 -285.0 -0.5) (float-vector -15.0 -285.0 -0.5)))
         (instance face :init :vertices (list (float-vector 15.0 15.0 644.5) (float-vector 15.0 15.0 -0.5) (float-vector -15.0 15.0 -0.5) (float-vector -15.0 15.0 644.5)))
         (instance face :init :vertices (list (float-vector 15.0 -285.0 644.5) (float-vector 15.0 -285.0 -0.5) (float-vector 15.0 15.0 -0.5) (float-vector 15.0 15.0 644.5)))
         (instance face :init :vertices (list (float-vector -15.0 -285.0 644.5) (float-vector -15.0 -285.0 -0.5) (float-vector 15.0 -285.0 -0.5) (float-vector 15.0 -285.0 644.5)))
         (instance face :init :vertices (list (float-vector -15.0 15.0 644.5) (float-vector -15.0 15.0 -0.5) (float-vector -15.0 -285.0 -0.5) (float-vector -15.0 -285.0 644.5)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :mediumspringgreen)
     (setq blink1 (instance bodyset-link :init (make-cascoords) :bodies bc :name :room73b2-kitchen-shelf-bodyset7 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send blink1 :newcoords (make-coords :pos (float-vector 180.0 1485.0 250.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink1)
     (send blink2 :newcoords (make-coords :pos (float-vector 180.0 915.0 250.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink2)
     (send blink3 :newcoords (make-coords :pos (float-vector 180.0 885.0 250.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink3)
     (send blink4 :newcoords (make-coords :pos (float-vector 180.0 315.0 250.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink4)
     (send blink5 :newcoords (make-coords :pos (float-vector 180.0 285.0 0.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink5)
     (send blink6 :newcoords (make-coords :pos (float-vector 180.0 -285.0 0.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink6)
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     ;; definition of :door-0
     (setq joint0 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink1 :name :door-0    :axis :z 
			     :min    0.0 :max   90.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :door-1
     (setq joint1 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink2 :name :door-1    :axis :-z
			     :min    0.0 :max   90.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :door-2
     (setq joint2 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink3 :name :door-2    :axis :z 
			     :min    0.0 :max   90.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :door-3
     (setq joint3 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink4 :name :door-3    :axis :-z
			     :min    0.0 :max   90.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :door-4
     (setq joint4 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink5 :name :door-4    :axis :z 
			     :min    0.0 :max   90.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :door-5
     (setq joint5 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink6 :name :door-5    :axis :-z
			     :min    0.0 :max   90.0 :max-joint-velocity 5 :max-joint-torque 100))


     ;; definition of :handle
     (setq handle0 (make-cascoords :pos (float-vector 0.0 0.0 0.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name "handle0"))
     (send blink0 :assoc handle0)

     ;; init-ending 
     (setq links (list blink0 blink1 blink2 blink3 blink4 blink5 blink6))
     (setq joint-list (list joint0 joint1 joint2 joint3 joint4 joint5))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:door-0 (&rest args) (forward-message-to joint0 args))
  (:door-1 (&rest args) (forward-message-to joint1 args))
  (:door-2 (&rest args) (forward-message-to joint2 args))
  (:door-3 (&rest args) (forward-message-to joint3 args))
  (:door-4 (&rest args) (forward-message-to joint4 args))
  (:door-5 (&rest args) (forward-message-to joint5 args))
  (:handle (&rest args) (forward-message-to-all (list  handle0) args))
  (:handle-handle0 (&rest args) (forward-message-to handle0 args))
  (:attention (&rest args) (forward-message-to-all (list ) args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun room73b2-kitchen-shelf (&rest args) (instance* room73b2-kitchen-shelf-object :init args))
;; (format *error-output* "(instance room73b2-kitchen-shelf-object :init) for generating model~%")
