;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass room73b2-sharp-52-aquostv-object
  :super cascaded-link
  :slots (sensors
         ))
(defmethod room73b2-sharp-52-aquostv-object
  (:init
   (&rest args &key (name "room73b2-sharp-52-aquostv") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :room73b2-sharp-52-aquostv-bodyset2
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -45.0 660.2 484.0) (float-vector -45.0 -660.2 484.0) (float-vector -45.0 -660.2 1300.0) (float-vector -45.0 660.2 1300.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector -45.0 625.2 519.0) (float-vector -45.0 625.2 1265.0) (float-vector -45.0 -625.2 1265.0) (float-vector -45.0 -625.2 519.0)))
))
         (instance face :init :vertices (list (float-vector 45.0 -660.2 484.0) (float-vector 45.0 -660.2 1300.0) (float-vector -45.0 -660.2 1300.0) (float-vector -45.0 -660.2 484.0)))
         (instance face :init :vertices (list (float-vector 45.0 660.2 484.0) (float-vector 45.0 660.2 1300.0) (float-vector 45.0 -660.2 1300.0) (float-vector 45.0 -660.2 484.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 45.0 -625.2 519.0) (float-vector 45.0 -625.2 1265.0) (float-vector 45.0 625.2 1265.0) (float-vector 45.0 625.2 519.0)))
))
         (instance face :init :vertices (list (float-vector -45.0 660.2 1300.0) (float-vector -45.0 -660.2 1300.0) (float-vector 45.0 -660.2 1300.0) (float-vector 45.0 660.2 1300.0)))
         (instance face :init :vertices (list (float-vector 45.0 660.2 484.0) (float-vector 45.0 -660.2 484.0) (float-vector -45.0 -660.2 484.0) (float-vector -45.0 660.2 484.0)))
         (instance face :init :vertices (list (float-vector -45.0 660.2 484.0) (float-vector -45.0 660.2 1300.0) (float-vector 45.0 660.2 1300.0) (float-vector 45.0 660.2 484.0)))
         (instance face :init :vertices (list (float-vector -45.0 -625.2 519.0) (float-vector -45.0 -625.2 1265.0) (float-vector 45.0 -625.2 1265.0) (float-vector 45.0 -625.2 519.0)))
         (instance face :init :vertices (list (float-vector 45.0 625.2 1265.0) (float-vector 45.0 -625.2 1265.0) (float-vector -45.0 -625.2 1265.0) (float-vector -45.0 625.2 1265.0)))
         (instance face :init :vertices (list (float-vector 45.0 625.2 519.0) (float-vector 45.0 625.2 1265.0) (float-vector -45.0 625.2 1265.0) (float-vector -45.0 625.2 519.0)))
         (instance face :init :vertices (list (float-vector -45.0 625.2 519.0) (float-vector -45.0 -625.2 519.0) (float-vector 45.0 -625.2 519.0) (float-vector 45.0 625.2 519.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 45.0 590.2 1230.0) (float-vector 0.0 590.2 1230.0) (float-vector 0.0 -590.2 1230.0) (float-vector 45.0 -590.2 1230.0)))
         (instance face :init :vertices (list (float-vector 0.0 590.2 554.0) (float-vector 45.0 590.2 554.0) (float-vector 45.0 -590.2 554.0) (float-vector 0.0 -590.2 554.0)))
         (instance face :init :vertices (list (float-vector 45.0 590.2 1230.0) (float-vector 45.0 590.2 554.0) (float-vector 0.0 590.2 554.0) (float-vector 0.0 590.2 1230.0)))
         (instance face :init :vertices (list (float-vector 45.0 -590.2 1230.0) (float-vector 45.0 -590.2 554.0) (float-vector 45.0 590.2 554.0) (float-vector 45.0 590.2 1230.0)))
         (instance face :init :vertices (list (float-vector 0.0 -590.2 1230.0) (float-vector 0.0 -590.2 554.0) (float-vector 45.0 -590.2 554.0) (float-vector 45.0 -590.2 1230.0)))
         (instance face :init :vertices (list (float-vector 0.0 590.2 1230.0) (float-vector 0.0 590.2 554.0) (float-vector 0.0 -590.2 554.0) (float-vector 0.0 -590.2 1230.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 22.5 625.2 1265.0) (float-vector -22.5 625.2 1265.0) (float-vector -22.5 -625.2 1265.0) (float-vector 22.5 -625.2 1265.0)))
         (instance face :init :vertices (list (float-vector -22.5 625.2 519.0) (float-vector 22.5 625.2 519.0) (float-vector 22.5 -625.2 519.0) (float-vector -22.5 -625.2 519.0)))
         (instance face :init :vertices (list (float-vector 22.5 625.2 1265.0) (float-vector 22.5 625.2 519.0) (float-vector -22.5 625.2 519.0) (float-vector -22.5 625.2 1265.0)))
         (instance face :init :vertices (list (float-vector 22.5 -625.2 1265.0) (float-vector 22.5 -625.2 519.0) (float-vector 22.5 625.2 519.0) (float-vector 22.5 625.2 1265.0)))
         (instance face :init :vertices (list (float-vector -22.5 -625.2 1265.0) (float-vector -22.5 -625.2 519.0) (float-vector 22.5 -625.2 519.0) (float-vector 22.5 -625.2 1265.0)))
         (instance face :init :vertices (list (float-vector -22.5 625.2 1265.0) (float-vector -22.5 625.2 519.0) (float-vector -22.5 -625.2 519.0) (float-vector -22.5 -625.2 1265.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 0.0 625.2 1265.0) (float-vector -45.0 625.2 1265.0) (float-vector -45.0 -625.2 1265.0) (float-vector 0.0 -625.2 1265.0)))
         (instance face :init :vertices (list (float-vector -45.0 625.2 519.0) (float-vector 0.0 625.2 519.0) (float-vector 0.0 -625.2 519.0) (float-vector -45.0 -625.2 519.0)))
         (instance face :init :vertices (list (float-vector 0.0 625.2 1265.0) (float-vector 0.0 625.2 519.0) (float-vector -45.0 625.2 519.0) (float-vector -45.0 625.2 1265.0)))
         (instance face :init :vertices (list (float-vector 0.0 -625.2 1265.0) (float-vector 0.0 -625.2 519.0) (float-vector 0.0 625.2 519.0) (float-vector 0.0 625.2 1265.0)))
         (instance face :init :vertices (list (float-vector -45.0 -625.2 1265.0) (float-vector -45.0 -625.2 519.0) (float-vector 0.0 -625.2 519.0) (float-vector 0.0 -625.2 1265.0)))
         (instance face :init :vertices (list (float-vector -45.0 625.2 1265.0) (float-vector -45.0 625.2 519.0) (float-vector -45.0 -625.2 519.0) (float-vector -45.0 -625.2 1265.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 234.0 426.0 31.0) (float-vector -324.0 426.0 31.0) (float-vector -324.0 -426.0 31.0) (float-vector 234.0 -426.0 31.0)))
         (instance face :init :vertices (list (float-vector -324.0 426.0 -9.0) (float-vector 234.0 426.0 -9.0) (float-vector 234.0 -426.0 -9.0) (float-vector -324.0 -426.0 -9.0)))
         (instance face :init :vertices (list (float-vector 234.0 426.0 31.0) (float-vector 234.0 426.0 -9.0) (float-vector -324.0 426.0 -9.0) (float-vector -324.0 426.0 31.0)))
         (instance face :init :vertices (list (float-vector 234.0 -426.0 31.0) (float-vector 234.0 -426.0 -9.0) (float-vector 234.0 426.0 -9.0) (float-vector 234.0 426.0 31.0)))
         (instance face :init :vertices (list (float-vector -324.0 -426.0 31.0) (float-vector -324.0 -426.0 -9.0) (float-vector 234.0 -426.0 -9.0) (float-vector 234.0 -426.0 31.0)))
         (instance face :init :vertices (list (float-vector -324.0 426.0 31.0) (float-vector -324.0 426.0 -9.0) (float-vector -324.0 -426.0 -9.0) (float-vector -324.0 -426.0 31.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -25.0 360.0 623.5) (float-vector -65.0 360.0 623.5) (float-vector -65.0 280.0 623.5) (float-vector -25.0 280.0 623.5)))
         (instance face :init :vertices (list (float-vector -65.0 360.0 10.5) (float-vector -25.0 360.0 10.5) (float-vector -25.0 280.0 10.5) (float-vector -65.0 280.0 10.5)))
         (instance face :init :vertices (list (float-vector -25.0 360.0 623.5) (float-vector -25.0 360.0 10.5) (float-vector -65.0 360.0 10.5) (float-vector -65.0 360.0 623.5)))
         (instance face :init :vertices (list (float-vector -25.0 280.0 623.5) (float-vector -25.0 280.0 10.5) (float-vector -25.0 360.0 10.5) (float-vector -25.0 360.0 623.5)))
         (instance face :init :vertices (list (float-vector -65.0 280.0 623.5) (float-vector -65.0 280.0 10.5) (float-vector -25.0 280.0 10.5) (float-vector -25.0 280.0 623.5)))
         (instance face :init :vertices (list (float-vector -65.0 360.0 623.5) (float-vector -65.0 360.0 10.5) (float-vector -65.0 280.0 10.5) (float-vector -65.0 280.0 623.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -25.0 -280.0 623.5) (float-vector -65.0 -280.0 623.5) (float-vector -65.0 -360.0 623.5) (float-vector -25.0 -360.0 623.5)))
         (instance face :init :vertices (list (float-vector -65.0 -280.0 10.5) (float-vector -25.0 -280.0 10.5) (float-vector -25.0 -360.0 10.5) (float-vector -65.0 -360.0 10.5)))
         (instance face :init :vertices (list (float-vector -25.0 -280.0 623.5) (float-vector -25.0 -280.0 10.5) (float-vector -65.0 -280.0 10.5) (float-vector -65.0 -280.0 623.5)))
         (instance face :init :vertices (list (float-vector -25.0 -360.0 623.5) (float-vector -25.0 -360.0 10.5) (float-vector -25.0 -280.0 10.5) (float-vector -25.0 -280.0 623.5)))
         (instance face :init :vertices (list (float-vector -65.0 -360.0 623.5) (float-vector -65.0 -360.0 10.5) (float-vector -25.0 -360.0 10.5) (float-vector -25.0 -360.0 623.5)))
         (instance face :init :vertices (list (float-vector -65.0 -280.0 623.5) (float-vector -65.0 -280.0 10.5) (float-vector -65.0 -360.0 10.5) (float-vector -65.0 -360.0 623.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 134.0 280.0 221.0) (float-vector -224.0 280.0 221.0) (float-vector -224.0 -280.0 221.0) (float-vector 134.0 -280.0 221.0)))
         (instance face :init :vertices (list (float-vector -224.0 280.0 211.0) (float-vector 134.0 280.0 211.0) (float-vector 134.0 -280.0 211.0) (float-vector -224.0 -280.0 211.0)))
         (instance face :init :vertices (list (float-vector 134.0 280.0 221.0) (float-vector 134.0 280.0 211.0) (float-vector -224.0 280.0 211.0) (float-vector -224.0 280.0 221.0)))
         (instance face :init :vertices (list (float-vector 134.0 -280.0 221.0) (float-vector 134.0 -280.0 211.0) (float-vector 134.0 280.0 211.0) (float-vector 134.0 280.0 221.0)))
         (instance face :init :vertices (list (float-vector -224.0 -280.0 221.0) (float-vector -224.0 -280.0 211.0) (float-vector 134.0 -280.0 211.0) (float-vector 134.0 -280.0 221.0)))
         (instance face :init :vertices (list (float-vector -224.0 280.0 221.0) (float-vector -224.0 280.0 211.0) (float-vector -224.0 -280.0 211.0) (float-vector -224.0 -280.0 221.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 134.0 280.0 426.0) (float-vector -224.0 280.0 426.0) (float-vector -224.0 -280.0 426.0) (float-vector 134.0 -280.0 426.0)))
         (instance face :init :vertices (list (float-vector -224.0 280.0 416.0) (float-vector 134.0 280.0 416.0) (float-vector 134.0 -280.0 416.0) (float-vector -224.0 -280.0 416.0)))
         (instance face :init :vertices (list (float-vector 134.0 280.0 426.0) (float-vector 134.0 280.0 416.0) (float-vector -224.0 280.0 416.0) (float-vector -224.0 280.0 426.0)))
         (instance face :init :vertices (list (float-vector 134.0 -280.0 426.0) (float-vector 134.0 -280.0 416.0) (float-vector 134.0 280.0 416.0) (float-vector 134.0 280.0 426.0)))
         (instance face :init :vertices (list (float-vector -224.0 -280.0 426.0) (float-vector -224.0 -280.0 416.0) (float-vector 134.0 -280.0 416.0) (float-vector 134.0 -280.0 426.0)))
         (instance face :init :vertices (list (float-vector -224.0 280.0 426.0) (float-vector -224.0 280.0 416.0) (float-vector -224.0 -280.0 416.0) (float-vector -224.0 -280.0 426.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     ;; paste texture plasmatv.jpg
     (send (elt bc 1) :paste-texture-to-face (elt (send (elt bc 1) :faces)3) :file "models/plasmatv.jpg")
     (send (elt bc 0) :set-color :gray)
     (send (elt bc 1) :set-color :black)
     (send (elt bc 2) :set-color :gray20)
     (send (elt bc 3) :set-color :gray)
     (send (elt bc 4) :set-color :gray)
     (send (elt bc 5) :set-color :gray)
     (send (elt bc 6) :set-color :gray)
     (send (elt bc 7) :set-color :gray)
     (gl::transparent (elt bc 7) 0.2)
     (send (elt bc 8) :set-color :gray)
     (gl::transparent (elt bc 8) 0.2)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :room73b2-sharp-52-aquostv-bodyset2 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint


     ;; init-ending 
     (setq links (list blink0))
     (setq joint-list (list))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:handle (&rest args) (forward-message-to-all (list ) args))
  (:attention (&rest args) (forward-message-to-all (list ) args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun room73b2-sharp-52-aquostv (&rest args) (instance* room73b2-sharp-52-aquostv-object :init args))
;; (format *error-output* "(instance room73b2-sharp-52-aquostv-object :init) for generating model~%")
