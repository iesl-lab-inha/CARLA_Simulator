;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass room610-sweeper-object
  :super cascaded-link
  :slots (sensors
         handle0 handle1 handle2 handle3
         joint0 joint1 ))
(defmethod room610-sweeper-object
  (:init
   (&rest args &key (name "room610-sweeper") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0 blink1 blink2
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :box
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 75.0 150.0 40.0) (float-vector -75.0 150.0 40.0) (float-vector -75.0 -150.0 40.0) (float-vector 75.0 -150.0 40.0)))
         (instance face :init :vertices (list (float-vector -75.0 150.0 0.0) (float-vector 75.0 150.0 0.0) (float-vector 75.0 -150.0 0.0) (float-vector -75.0 -150.0 0.0)))
         (instance face :init :vertices (list (float-vector 75.0 150.0 40.0) (float-vector 75.0 150.0 0.0) (float-vector -75.0 150.0 0.0) (float-vector -75.0 150.0 40.0)))
         (instance face :init :vertices (list (float-vector 75.0 -150.0 40.0) (float-vector 75.0 -150.0 0.0) (float-vector 75.0 150.0 0.0) (float-vector 75.0 150.0 40.0)))
         (instance face :init :vertices (list (float-vector -75.0 -150.0 40.0) (float-vector -75.0 -150.0 0.0) (float-vector 75.0 -150.0 0.0) (float-vector 75.0 -150.0 40.0)))
         (instance face :init :vertices (list (float-vector -75.0 150.0 40.0) (float-vector -75.0 150.0 0.0) (float-vector -75.0 -150.0 0.0) (float-vector -75.0 -150.0 40.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 10.0 10.0 60.0) (float-vector -10.0 10.0 60.0) (float-vector -10.0 -10.0 60.0) (float-vector 10.0 -10.0 60.0)))
         (instance face :init :vertices (list (float-vector -10.0 10.0 40.0) (float-vector 10.0 10.0 40.0) (float-vector 10.0 -10.0 40.0) (float-vector -10.0 -10.0 40.0)))
         (instance face :init :vertices (list (float-vector 10.0 10.0 60.0) (float-vector 10.0 10.0 40.0) (float-vector -10.0 10.0 40.0) (float-vector -10.0 10.0 60.0)))
         (instance face :init :vertices (list (float-vector 10.0 -10.0 60.0) (float-vector 10.0 -10.0 40.0) (float-vector 10.0 10.0 40.0) (float-vector 10.0 10.0 60.0)))
         (instance face :init :vertices (list (float-vector -10.0 -10.0 60.0) (float-vector -10.0 -10.0 40.0) (float-vector 10.0 -10.0 40.0) (float-vector 10.0 -10.0 60.0)))
         (instance face :init :vertices (list (float-vector -10.0 10.0 60.0) (float-vector -10.0 10.0 40.0) (float-vector -10.0 -10.0 40.0) (float-vector -10.0 -10.0 60.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray40)
     (send (elt bc 1) :set-color :gray20)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :box :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :joint
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 5.0 5.0 5.0) (float-vector -5.0 5.0 5.0) (float-vector -5.0 -5.0 5.0) (float-vector 5.0 -5.0 5.0)))
         (instance face :init :vertices (list (float-vector -5.0 5.0 -5.0) (float-vector 5.0 5.0 -5.0) (float-vector 5.0 -5.0 -5.0) (float-vector -5.0 -5.0 -5.0)))
         (instance face :init :vertices (list (float-vector 5.0 5.0 5.0) (float-vector 5.0 5.0 -5.0) (float-vector -5.0 5.0 -5.0) (float-vector -5.0 5.0 5.0)))
         (instance face :init :vertices (list (float-vector 5.0 -5.0 5.0) (float-vector 5.0 -5.0 -5.0) (float-vector 5.0 5.0 -5.0) (float-vector 5.0 5.0 5.0)))
         (instance face :init :vertices (list (float-vector -5.0 -5.0 5.0) (float-vector -5.0 -5.0 -5.0) (float-vector 5.0 -5.0 -5.0) (float-vector 5.0 -5.0 5.0)))
         (instance face :init :vertices (list (float-vector -5.0 5.0 5.0) (float-vector -5.0 5.0 -5.0) (float-vector -5.0 -5.0 -5.0) (float-vector -5.0 -5.0 5.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray20)
     (setq blink1 (instance bodyset-link :init (make-cascoords) :bodies bc :name :joint :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :bar
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 8.66025 -5.0 140.0) (float-vector 10.0 0.0 140.0) (float-vector 8.66025 5.0 140.0) (float-vector 5.0 8.66025 140.0) (float-vector 0.0 10.0 140.0) (float-vector -5.0 8.66025 140.0) (float-vector -8.66025 5.0 140.0) (float-vector -10.0 0.0 140.0) (float-vector -8.66025 -5.0 140.0) (float-vector -5.0 -8.66025 140.0) (float-vector 0.0 -10.0 140.0) (float-vector 5.0 -8.66025 140.0)))
         (instance face :init :vertices (list (float-vector 10.0 0.0 0.0) (float-vector 8.66025 -5.0 0.0) (float-vector 5.0 -8.66025 0.0) (float-vector 0.0 -10.0 0.0) (float-vector -5.0 -8.66025 0.0) (float-vector -8.66025 -5.0 0.0) (float-vector -10.0 0.0 0.0) (float-vector -8.66025 5.0 0.0) (float-vector -5.0 8.66025 0.0) (float-vector 0.0 10.0 0.0) (float-vector 5.0 8.66025 0.0) (float-vector 8.66025 5.0 0.0)))
         (instance face :init :vertices (list (float-vector 8.66025 -5.0 140.0) (float-vector 8.66025 -5.0 0.0) (float-vector 10.0 0.0 0.0) (float-vector 10.0 0.0 140.0)))
         (instance face :init :vertices (list (float-vector 5.0 -8.66025 140.0) (float-vector 5.0 -8.66025 0.0) (float-vector 8.66025 -5.0 0.0) (float-vector 8.66025 -5.0 140.0)))
         (instance face :init :vertices (list (float-vector 0.0 -10.0 140.0) (float-vector 0.0 -10.0 0.0) (float-vector 5.0 -8.66025 0.0) (float-vector 5.0 -8.66025 140.0)))
         (instance face :init :vertices (list (float-vector -5.0 -8.66025 140.0) (float-vector -5.0 -8.66025 0.0) (float-vector 0.0 -10.0 0.0) (float-vector 0.0 -10.0 140.0)))
         (instance face :init :vertices (list (float-vector -8.66025 -5.0 140.0) (float-vector -8.66025 -5.0 0.0) (float-vector -5.0 -8.66025 0.0) (float-vector -5.0 -8.66025 140.0)))
         (instance face :init :vertices (list (float-vector -10.0 0.0 140.0) (float-vector -10.0 0.0 0.0) (float-vector -8.66025 -5.0 0.0) (float-vector -8.66025 -5.0 140.0)))
         (instance face :init :vertices (list (float-vector -8.66025 5.0 140.0) (float-vector -8.66025 5.0 0.0) (float-vector -10.0 0.0 0.0) (float-vector -10.0 0.0 140.0)))
         (instance face :init :vertices (list (float-vector -5.0 8.66025 140.0) (float-vector -5.0 8.66025 0.0) (float-vector -8.66025 5.0 0.0) (float-vector -8.66025 5.0 140.0)))
         (instance face :init :vertices (list (float-vector 0.0 10.0 140.0) (float-vector 0.0 10.0 0.0) (float-vector -5.0 8.66025 0.0) (float-vector -5.0 8.66025 140.0)))
         (instance face :init :vertices (list (float-vector 5.0 8.66025 140.0) (float-vector 5.0 8.66025 0.0) (float-vector 0.0 10.0 0.0) (float-vector 0.0 10.0 140.0)))
         (instance face :init :vertices (list (float-vector 8.66025 5.0 140.0) (float-vector 8.66025 5.0 0.0) (float-vector 5.0 8.66025 0.0) (float-vector 5.0 8.66025 140.0)))
         (instance face :init :vertices (list (float-vector 10.0 0.0 140.0) (float-vector 10.0 0.0 0.0) (float-vector 8.66025 5.0 0.0) (float-vector 8.66025 5.0 140.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 8.66025 -5.0 1000.0) (float-vector 10.0 0.0 1000.0) (float-vector 8.66025 5.0 1000.0) (float-vector 5.0 8.66025 1000.0) (float-vector 0.0 10.0 1000.0) (float-vector -5.0 8.66025 1000.0) (float-vector -8.66025 5.0 1000.0) (float-vector -10.0 0.0 1000.0) (float-vector -8.66025 -5.0 1000.0) (float-vector -5.0 -8.66025 1000.0) (float-vector 0.0 -10.0 1000.0) (float-vector 5.0 -8.66025 1000.0)))
         (instance face :init :vertices (list (float-vector 10.0 0.0 140.0) (float-vector 8.66025 -5.0 140.0) (float-vector 5.0 -8.66025 140.0) (float-vector 0.0 -10.0 140.0) (float-vector -5.0 -8.66025 140.0) (float-vector -8.66025 -5.0 140.0) (float-vector -10.0 0.0 140.0) (float-vector -8.66025 5.0 140.0) (float-vector -5.0 8.66025 140.0) (float-vector 0.0 10.0 140.0) (float-vector 5.0 8.66025 140.0) (float-vector 8.66025 5.0 140.0)))
         (instance face :init :vertices (list (float-vector 8.66025 -5.0 1000.0) (float-vector 8.66025 -5.0 140.0) (float-vector 10.0 0.0 140.0) (float-vector 10.0 0.0 1000.0)))
         (instance face :init :vertices (list (float-vector 5.0 -8.66025 1000.0) (float-vector 5.0 -8.66025 140.0) (float-vector 8.66025 -5.0 140.0) (float-vector 8.66025 -5.0 1000.0)))
         (instance face :init :vertices (list (float-vector 0.0 -10.0 1000.0) (float-vector 0.0 -10.0 140.0) (float-vector 5.0 -8.66025 140.0) (float-vector 5.0 -8.66025 1000.0)))
         (instance face :init :vertices (list (float-vector -5.0 -8.66025 1000.0) (float-vector -5.0 -8.66025 140.0) (float-vector 0.0 -10.0 140.0) (float-vector 0.0 -10.0 1000.0)))
         (instance face :init :vertices (list (float-vector -8.66025 -5.0 1000.0) (float-vector -8.66025 -5.0 140.0) (float-vector -5.0 -8.66025 140.0) (float-vector -5.0 -8.66025 1000.0)))
         (instance face :init :vertices (list (float-vector -10.0 0.0 1000.0) (float-vector -10.0 0.0 140.0) (float-vector -8.66025 -5.0 140.0) (float-vector -8.66025 -5.0 1000.0)))
         (instance face :init :vertices (list (float-vector -8.66025 5.0 1000.0) (float-vector -8.66025 5.0 140.0) (float-vector -10.0 0.0 140.0) (float-vector -10.0 0.0 1000.0)))
         (instance face :init :vertices (list (float-vector -5.0 8.66025 1000.0) (float-vector -5.0 8.66025 140.0) (float-vector -8.66025 5.0 140.0) (float-vector -8.66025 5.0 1000.0)))
         (instance face :init :vertices (list (float-vector 0.0 10.0 1000.0) (float-vector 0.0 10.0 140.0) (float-vector -5.0 8.66025 140.0) (float-vector -5.0 8.66025 1000.0)))
         (instance face :init :vertices (list (float-vector 5.0 8.66025 1000.0) (float-vector 5.0 8.66025 140.0) (float-vector 0.0 10.0 140.0) (float-vector 0.0 10.0 1000.0)))
         (instance face :init :vertices (list (float-vector 8.66025 5.0 1000.0) (float-vector 8.66025 5.0 140.0) (float-vector 5.0 8.66025 140.0) (float-vector 5.0 8.66025 1000.0)))
         (instance face :init :vertices (list (float-vector 10.0 0.0 1000.0) (float-vector 10.0 0.0 140.0) (float-vector 8.66025 5.0 140.0) (float-vector 8.66025 5.0 1000.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 8.66025 -5.0 1180.0) (float-vector 10.0 0.0 1180.0) (float-vector 8.66025 5.0 1180.0) (float-vector 5.0 8.66025 1180.0) (float-vector 0.0 10.0 1180.0) (float-vector -5.0 8.66025 1180.0) (float-vector -8.66025 5.0 1180.0) (float-vector -10.0 0.0 1180.0) (float-vector -8.66025 -5.0 1180.0) (float-vector -5.0 -8.66025 1180.0) (float-vector 0.0 -10.0 1180.0) (float-vector 5.0 -8.66025 1180.0)))
         (instance face :init :vertices (list (float-vector 10.0 0.0 1000.0) (float-vector 8.66025 -5.0 1000.0) (float-vector 5.0 -8.66025 1000.0) (float-vector 0.0 -10.0 1000.0) (float-vector -5.0 -8.66025 1000.0) (float-vector -8.66025 -5.0 1000.0) (float-vector -10.0 0.0 1000.0) (float-vector -8.66025 5.0 1000.0) (float-vector -5.0 8.66025 1000.0) (float-vector 0.0 10.0 1000.0) (float-vector 5.0 8.66025 1000.0) (float-vector 8.66025 5.0 1000.0)))
         (instance face :init :vertices (list (float-vector 8.66025 -5.0 1180.0) (float-vector 8.66025 -5.0 1000.0) (float-vector 10.0 0.0 1000.0) (float-vector 10.0 0.0 1180.0)))
         (instance face :init :vertices (list (float-vector 5.0 -8.66025 1180.0) (float-vector 5.0 -8.66025 1000.0) (float-vector 8.66025 -5.0 1000.0) (float-vector 8.66025 -5.0 1180.0)))
         (instance face :init :vertices (list (float-vector 0.0 -10.0 1180.0) (float-vector 0.0 -10.0 1000.0) (float-vector 5.0 -8.66025 1000.0) (float-vector 5.0 -8.66025 1180.0)))
         (instance face :init :vertices (list (float-vector -5.0 -8.66025 1180.0) (float-vector -5.0 -8.66025 1000.0) (float-vector 0.0 -10.0 1000.0) (float-vector 0.0 -10.0 1180.0)))
         (instance face :init :vertices (list (float-vector -8.66025 -5.0 1180.0) (float-vector -8.66025 -5.0 1000.0) (float-vector -5.0 -8.66025 1000.0) (float-vector -5.0 -8.66025 1180.0)))
         (instance face :init :vertices (list (float-vector -10.0 0.0 1180.0) (float-vector -10.0 0.0 1000.0) (float-vector -8.66025 -5.0 1000.0) (float-vector -8.66025 -5.0 1180.0)))
         (instance face :init :vertices (list (float-vector -8.66025 5.0 1180.0) (float-vector -8.66025 5.0 1000.0) (float-vector -10.0 0.0 1000.0) (float-vector -10.0 0.0 1180.0)))
         (instance face :init :vertices (list (float-vector -5.0 8.66025 1180.0) (float-vector -5.0 8.66025 1000.0) (float-vector -8.66025 5.0 1000.0) (float-vector -8.66025 5.0 1180.0)))
         (instance face :init :vertices (list (float-vector 0.0 10.0 1180.0) (float-vector 0.0 10.0 1000.0) (float-vector -5.0 8.66025 1000.0) (float-vector -5.0 8.66025 1180.0)))
         (instance face :init :vertices (list (float-vector 5.0 8.66025 1180.0) (float-vector 5.0 8.66025 1000.0) (float-vector 0.0 10.0 1000.0) (float-vector 0.0 10.0 1180.0)))
         (instance face :init :vertices (list (float-vector 8.66025 5.0 1180.0) (float-vector 8.66025 5.0 1000.0) (float-vector 5.0 8.66025 1000.0) (float-vector 5.0 8.66025 1180.0)))
         (instance face :init :vertices (list (float-vector 10.0 0.0 1180.0) (float-vector 10.0 0.0 1000.0) (float-vector 8.66025 5.0 1000.0) (float-vector 8.66025 5.0 1180.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray20)
     (send (elt bc 1) :set-color :gray80)
     (send (elt bc 2) :set-color :gray20)
     (setq blink2 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bar :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send blink2 :newcoords (make-coords :pos (float-vector 0.0 0.0 0.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink1 :assoc blink2)
     (send blink1 :newcoords (make-coords :pos (float-vector 0.0 0.0 50.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink1)
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     ;; definition of :sweeper-p
     (setq joint0 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink1 :name :sweeper-p :axis :y 
			     :min  -90.0 :max   90.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :sweeper-r
     (setq joint1 (instance rotational-joint :init
			     :parent-link blink1 :child-link blink2 :name :sweeper-r :axis :x 
			     :min  -90.0 :max   90.0 :max-joint-velocity 5 :max-joint-torque 100))


     ;; definition of :handle
     (setq handle0 (make-cascoords :pos (float-vector 0.0 0.0 1000.0) :rot #2f((0.707107 -0.707107 0.0) (0.707107 0.707107 0.0) (0.0 0.0 1.0)) :name ":rarm"))
     (send blink2 :assoc handle0)
     (setq handle1 (make-cascoords :pos (float-vector 0.0 0.0 1150.0) :rot #2f((0.707107 0.707107 0.0) (-0.707107 0.707107 0.0) (0.0 0.0 1.0)) :name ":larm"))
     (send blink2 :assoc handle1)
     (setq handle2 (make-cascoords :pos (float-vector 0.0 0.0 700.0) :rot #2f((1.0 0.0 0.0) (0.0 -1.0 -1.224647e-16) (0.0 1.224647e-16 -1.0)) :name ":side-rarm"))
     (send blink2 :assoc handle2)
     (setq handle3 (make-cascoords :pos (float-vector 0.0 0.0 1150.0) :rot #2f((-1.0 -1.224647e-16 0.0) (1.224647e-16 -1.0 0.0) (0.0 0.0 1.0)) :name ":side-larm"))
     (send blink2 :assoc handle3)

     ;; init-ending 
     (setq links (list blink0 blink1 blink2))
     (setq joint-list (list joint0 joint1))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:sweeper-p (&rest args) (forward-message-to joint0 args))
  (:sweeper-r (&rest args) (forward-message-to joint1 args))
  (:handle (&rest args) (forward-message-to-all (list  handle0 handle1 handle2 handle3) args))
  (:handle-rarm (&rest args) (forward-message-to handle0 args))
  (:handle-larm (&rest args) (forward-message-to handle1 args))
  (:handle-side-rarm (&rest args) (forward-message-to handle2 args))
  (:handle-side-larm (&rest args) (forward-message-to handle3 args))
  (:attention (&rest args) (forward-message-to-all (list ) args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun room610-sweeper (&rest args) (instance* room610-sweeper-object :init args))
;; (format *error-output* "(instance room610-sweeper-object :init) for generating model~%")
