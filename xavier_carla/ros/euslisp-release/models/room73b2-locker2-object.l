;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass room73b2-locker2-object
  :super cascaded-link
  :slots (sensors
         handle0
         joint0 ))
(defmethod room73b2-locker2-object
  (:init
   (&rest args &key (name "room73b2-locker2") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0 blink1
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :root
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 225.0 225.0 2150.0) (float-vector -225.0 225.0 2150.0) (float-vector -225.0 -225.0 2150.0) (float-vector 225.0 -225.0 2150.0)))
         (instance face :init :vertices (list (float-vector -225.0 225.0 2130.0) (float-vector 225.0 225.0 2130.0) (float-vector 225.0 -225.0 2130.0) (float-vector -225.0 -225.0 2130.0)))
         (instance face :init :vertices (list (float-vector 225.0 225.0 2150.0) (float-vector 225.0 225.0 2130.0) (float-vector -225.0 225.0 2130.0) (float-vector -225.0 225.0 2150.0)))
         (instance face :init :vertices (list (float-vector 225.0 -225.0 2150.0) (float-vector 225.0 -225.0 2130.0) (float-vector 225.0 225.0 2130.0) (float-vector 225.0 225.0 2150.0)))
         (instance face :init :vertices (list (float-vector -225.0 -225.0 2150.0) (float-vector -225.0 -225.0 2130.0) (float-vector 225.0 -225.0 2130.0) (float-vector 225.0 -225.0 2150.0)))
         (instance face :init :vertices (list (float-vector -225.0 225.0 2150.0) (float-vector -225.0 225.0 2130.0) (float-vector -225.0 -225.0 2130.0) (float-vector -225.0 -225.0 2150.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 225.0 225.0 60.0) (float-vector -225.0 225.0 60.0) (float-vector -225.0 -225.0 60.0) (float-vector 225.0 -225.0 60.0)))
         (instance face :init :vertices (list (float-vector -225.0 225.0 0.0) (float-vector 225.0 225.0 0.0) (float-vector 225.0 -225.0 0.0) (float-vector -225.0 -225.0 0.0)))
         (instance face :init :vertices (list (float-vector 225.0 225.0 60.0) (float-vector 225.0 225.0 0.0) (float-vector -225.0 225.0 0.0) (float-vector -225.0 225.0 60.0)))
         (instance face :init :vertices (list (float-vector 225.0 -225.0 60.0) (float-vector 225.0 -225.0 0.0) (float-vector 225.0 225.0 0.0) (float-vector 225.0 225.0 60.0)))
         (instance face :init :vertices (list (float-vector -225.0 -225.0 60.0) (float-vector -225.0 -225.0 0.0) (float-vector 225.0 -225.0 0.0) (float-vector 225.0 -225.0 60.0)))
         (instance face :init :vertices (list (float-vector -225.0 225.0 60.0) (float-vector -225.0 225.0 0.0) (float-vector -225.0 -225.0 0.0) (float-vector -225.0 -225.0 60.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -210.5 210.0 2130.0) (float-vector -225.5 210.0 2130.0) (float-vector -225.5 -210.0 2130.0) (float-vector -210.5 -210.0 2130.0)))
         (instance face :init :vertices (list (float-vector -225.5 210.0 60.0) (float-vector -210.5 210.0 60.0) (float-vector -210.5 -210.0 60.0) (float-vector -225.5 -210.0 60.0)))
         (instance face :init :vertices (list (float-vector -210.5 210.0 2130.0) (float-vector -210.5 210.0 60.0) (float-vector -225.5 210.0 60.0) (float-vector -225.5 210.0 2130.0)))
         (instance face :init :vertices (list (float-vector -210.5 -210.0 2130.0) (float-vector -210.5 -210.0 60.0) (float-vector -210.5 210.0 60.0) (float-vector -210.5 210.0 2130.0)))
         (instance face :init :vertices (list (float-vector -225.5 -210.0 2130.0) (float-vector -225.5 -210.0 60.0) (float-vector -210.5 -210.0 60.0) (float-vector -210.5 -210.0 2130.0)))
         (instance face :init :vertices (list (float-vector -225.5 210.0 2130.0) (float-vector -225.5 210.0 60.0) (float-vector -225.5 -210.0 60.0) (float-vector -225.5 -210.0 2130.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 205.0 225.5 2130.0) (float-vector -225.0 225.5 2130.0) (float-vector -225.0 210.5 2130.0) (float-vector 205.0 210.5 2130.0)))
         (instance face :init :vertices (list (float-vector -225.0 225.5 60.0) (float-vector 205.0 225.5 60.0) (float-vector 205.0 210.5 60.0) (float-vector -225.0 210.5 60.0)))
         (instance face :init :vertices (list (float-vector 205.0 225.5 2130.0) (float-vector 205.0 225.5 60.0) (float-vector -225.0 225.5 60.0) (float-vector -225.0 225.5 2130.0)))
         (instance face :init :vertices (list (float-vector 205.0 210.5 2130.0) (float-vector 205.0 210.5 60.0) (float-vector 205.0 225.5 60.0) (float-vector 205.0 225.5 2130.0)))
         (instance face :init :vertices (list (float-vector -225.0 210.5 2130.0) (float-vector -225.0 210.5 60.0) (float-vector 205.0 210.5 60.0) (float-vector 205.0 210.5 2130.0)))
         (instance face :init :vertices (list (float-vector -225.0 225.5 2130.0) (float-vector -225.0 225.5 60.0) (float-vector -225.0 210.5 60.0) (float-vector -225.0 210.5 2130.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 205.0 -210.5 2130.0) (float-vector -225.0 -210.5 2130.0) (float-vector -225.0 -225.5 2130.0) (float-vector 205.0 -225.5 2130.0)))
         (instance face :init :vertices (list (float-vector -225.0 -210.5 60.0) (float-vector 205.0 -210.5 60.0) (float-vector 205.0 -225.5 60.0) (float-vector -225.0 -225.5 60.0)))
         (instance face :init :vertices (list (float-vector 205.0 -210.5 2130.0) (float-vector 205.0 -210.5 60.0) (float-vector -225.0 -210.5 60.0) (float-vector -225.0 -210.5 2130.0)))
         (instance face :init :vertices (list (float-vector 205.0 -225.5 2130.0) (float-vector 205.0 -225.5 60.0) (float-vector 205.0 -210.5 60.0) (float-vector 205.0 -210.5 2130.0)))
         (instance face :init :vertices (list (float-vector -225.0 -225.5 2130.0) (float-vector -225.0 -225.5 60.0) (float-vector 205.0 -225.5 60.0) (float-vector 205.0 -225.5 2130.0)))
         (instance face :init :vertices (list (float-vector -225.0 -210.5 2130.0) (float-vector -225.0 -210.5 60.0) (float-vector -225.0 -225.5 60.0) (float-vector -225.0 -225.5 2130.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 204.5 210.0 1794.5) (float-vector -210.5 210.0 1794.5) (float-vector -210.5 -210.0 1794.5) (float-vector 204.5 -210.0 1794.5)))
         (instance face :init :vertices (list (float-vector -210.5 210.0 1779.5) (float-vector 204.5 210.0 1779.5) (float-vector 204.5 -210.0 1779.5) (float-vector -210.5 -210.0 1779.5)))
         (instance face :init :vertices (list (float-vector 204.5 210.0 1794.5) (float-vector 204.5 210.0 1779.5) (float-vector -210.5 210.0 1779.5) (float-vector -210.5 210.0 1794.5)))
         (instance face :init :vertices (list (float-vector 204.5 -210.0 1794.5) (float-vector 204.5 -210.0 1779.5) (float-vector 204.5 210.0 1779.5) (float-vector 204.5 210.0 1794.5)))
         (instance face :init :vertices (list (float-vector -210.5 -210.0 1794.5) (float-vector -210.5 -210.0 1779.5) (float-vector 204.5 -210.0 1779.5) (float-vector 204.5 -210.0 1794.5)))
         (instance face :init :vertices (list (float-vector -210.5 210.0 1794.5) (float-vector -210.5 210.0 1779.5) (float-vector -210.5 -210.0 1779.5) (float-vector -210.5 -210.0 1794.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 204.5 210.0 1447.5) (float-vector -210.5 210.0 1447.5) (float-vector -210.5 -210.0 1447.5) (float-vector 204.5 -210.0 1447.5)))
         (instance face :init :vertices (list (float-vector -210.5 210.0 1432.5) (float-vector 204.5 210.0 1432.5) (float-vector 204.5 -210.0 1432.5) (float-vector -210.5 -210.0 1432.5)))
         (instance face :init :vertices (list (float-vector 204.5 210.0 1447.5) (float-vector 204.5 210.0 1432.5) (float-vector -210.5 210.0 1432.5) (float-vector -210.5 210.0 1447.5)))
         (instance face :init :vertices (list (float-vector 204.5 -210.0 1447.5) (float-vector 204.5 -210.0 1432.5) (float-vector 204.5 210.0 1432.5) (float-vector 204.5 210.0 1447.5)))
         (instance face :init :vertices (list (float-vector -210.5 -210.0 1447.5) (float-vector -210.5 -210.0 1432.5) (float-vector 204.5 -210.0 1432.5) (float-vector 204.5 -210.0 1447.5)))
         (instance face :init :vertices (list (float-vector -210.5 210.0 1447.5) (float-vector -210.5 210.0 1432.5) (float-vector -210.5 -210.0 1432.5) (float-vector -210.5 -210.0 1447.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 204.5 210.0 1100.5) (float-vector -210.5 210.0 1100.5) (float-vector -210.5 -210.0 1100.5) (float-vector 204.5 -210.0 1100.5)))
         (instance face :init :vertices (list (float-vector -210.5 210.0 1085.5) (float-vector 204.5 210.0 1085.5) (float-vector 204.5 -210.0 1085.5) (float-vector -210.5 -210.0 1085.5)))
         (instance face :init :vertices (list (float-vector 204.5 210.0 1100.5) (float-vector 204.5 210.0 1085.5) (float-vector -210.5 210.0 1085.5) (float-vector -210.5 210.0 1100.5)))
         (instance face :init :vertices (list (float-vector 204.5 -210.0 1100.5) (float-vector 204.5 -210.0 1085.5) (float-vector 204.5 210.0 1085.5) (float-vector 204.5 210.0 1100.5)))
         (instance face :init :vertices (list (float-vector -210.5 -210.0 1100.5) (float-vector -210.5 -210.0 1085.5) (float-vector 204.5 -210.0 1085.5) (float-vector 204.5 -210.0 1100.5)))
         (instance face :init :vertices (list (float-vector -210.5 210.0 1100.5) (float-vector -210.5 210.0 1085.5) (float-vector -210.5 -210.0 1085.5) (float-vector -210.5 -210.0 1100.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 204.5 210.0 753.5) (float-vector -210.5 210.0 753.5) (float-vector -210.5 -210.0 753.5) (float-vector 204.5 -210.0 753.5)))
         (instance face :init :vertices (list (float-vector -210.5 210.0 738.5) (float-vector 204.5 210.0 738.5) (float-vector 204.5 -210.0 738.5) (float-vector -210.5 -210.0 738.5)))
         (instance face :init :vertices (list (float-vector 204.5 210.0 753.5) (float-vector 204.5 210.0 738.5) (float-vector -210.5 210.0 738.5) (float-vector -210.5 210.0 753.5)))
         (instance face :init :vertices (list (float-vector 204.5 -210.0 753.5) (float-vector 204.5 -210.0 738.5) (float-vector 204.5 210.0 738.5) (float-vector 204.5 210.0 753.5)))
         (instance face :init :vertices (list (float-vector -210.5 -210.0 753.5) (float-vector -210.5 -210.0 738.5) (float-vector 204.5 -210.0 738.5) (float-vector 204.5 -210.0 753.5)))
         (instance face :init :vertices (list (float-vector -210.5 210.0 753.5) (float-vector -210.5 210.0 738.5) (float-vector -210.5 -210.0 738.5) (float-vector -210.5 -210.0 753.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 204.5 210.0 406.5) (float-vector -210.5 210.0 406.5) (float-vector -210.5 -210.0 406.5) (float-vector 204.5 -210.0 406.5)))
         (instance face :init :vertices (list (float-vector -210.5 210.0 391.5) (float-vector 204.5 210.0 391.5) (float-vector 204.5 -210.0 391.5) (float-vector -210.5 -210.0 391.5)))
         (instance face :init :vertices (list (float-vector 204.5 210.0 406.5) (float-vector 204.5 210.0 391.5) (float-vector -210.5 210.0 391.5) (float-vector -210.5 210.0 406.5)))
         (instance face :init :vertices (list (float-vector 204.5 -210.0 406.5) (float-vector 204.5 -210.0 391.5) (float-vector 204.5 210.0 391.5) (float-vector 204.5 210.0 406.5)))
         (instance face :init :vertices (list (float-vector -210.5 -210.0 406.5) (float-vector -210.5 -210.0 391.5) (float-vector 204.5 -210.0 391.5) (float-vector 204.5 -210.0 406.5)))
         (instance face :init :vertices (list (float-vector -210.5 210.0 406.5) (float-vector -210.5 210.0 391.5) (float-vector -210.5 -210.0 391.5) (float-vector -210.5 -210.0 406.5)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :beige)
     (send (elt bc 1) :set-color :beige)
     (send (elt bc 2) :set-color :beige)
     (send (elt bc 3) :set-color :beige)
     (send (elt bc 4) :set-color :beige)
     (send (elt bc 5) :set-color :beige)
     (send (elt bc 6) :set-color :beige)
     (send (elt bc 7) :set-color :beige)
     (send (elt bc 8) :set-color :beige)
     (send (elt bc 9) :set-color :beige)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :root :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :room73b2-locker2-bodyset2
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -10.0 10.0 0.0) (float-vector -10.0 -440.0 0.0) (float-vector -10.0 -440.0 2070.0) (float-vector -10.0 10.0 2070.0)))
         (instance face :init :vertices (list (float-vector 10.0 -440.0 0.0) (float-vector 10.0 -440.0 2070.0) (float-vector -10.0 -440.0 2070.0) (float-vector -10.0 -440.0 0.0)))
         (instance face :init :vertices (list (float-vector 10.0 10.0 0.0) (float-vector 10.0 10.0 2070.0) (float-vector 10.0 -440.0 2070.0) (float-vector 10.0 -440.0 0.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 10.0 -410.0 890.0) (float-vector 10.0 -410.0 970.0) (float-vector 10.0 -360.0 970.0) (float-vector 10.0 -360.0 890.0)))
))
         (instance face :init :vertices (list (float-vector -10.0 10.0 2070.0) (float-vector -10.0 -440.0 2070.0) (float-vector 10.0 -440.0 2070.0) (float-vector 10.0 10.0 2070.0)))
         (instance face :init :vertices (list (float-vector 10.0 10.0 0.0) (float-vector 10.0 -440.0 0.0) (float-vector -10.0 -440.0 0.0) (float-vector -10.0 10.0 0.0)))
         (instance face :init :vertices (list (float-vector -10.0 10.0 0.0) (float-vector -10.0 10.0 2070.0) (float-vector 10.0 10.0 2070.0) (float-vector 10.0 10.0 0.0)))
         (instance face :init :vertices (list (float-vector 2.273737e-13 -360.0 970.0) (float-vector 2.273737e-13 -410.0 970.0) (float-vector 2.273737e-13 -410.0 890.0) (float-vector 2.273737e-13 -360.0 890.0)))
         (instance face :init :vertices (list (float-vector 2.273737e-13 -410.0 890.0) (float-vector 2.273737e-13 -410.0 970.0) (float-vector 10.0 -410.0 970.0) (float-vector 10.0 -410.0 890.0)))
         (instance face :init :vertices (list (float-vector 10.0 -360.0 970.0) (float-vector 10.0 -410.0 970.0) (float-vector 2.273737e-13 -410.0 970.0) (float-vector 2.273737e-13 -360.0 970.0)))
         (instance face :init :vertices (list (float-vector 10.0 -360.0 890.0) (float-vector 10.0 -360.0 970.0) (float-vector 2.273737e-13 -360.0 970.0) (float-vector 2.273737e-13 -360.0 890.0)))
         (instance face :init :vertices (list (float-vector 2.273737e-13 -360.0 890.0) (float-vector 2.273737e-13 -410.0 890.0) (float-vector 10.0 -410.0 890.0) (float-vector 10.0 -360.0 890.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :beige)
     (setq blink1 (instance bodyset-link :init (make-cascoords) :bodies bc :name :room73b2-locker2-bodyset2 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send blink1 :newcoords (make-coords :pos (float-vector 215.0 215.0 60.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink1)
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     ;; definition of :door
     (setq joint0 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink1 :name :door      :axis :z 
			     :min    0.0 :max   90.0 :max-joint-velocity 5 :max-joint-torque 100))


     ;; definition of :handle
     (setq handle0 (make-cascoords :pos (float-vector 225.0 -187.5 1007.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name "door-handle"))
     (send blink1 :assoc handle0)

     ;; init-ending 
     (setq links (list blink0 blink1))
     (setq joint-list (list joint0))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:door (&rest args) (forward-message-to joint0 args))
  (:handle (&rest args) (forward-message-to-all (list  handle0) args))
  (:handle-door-handle (&rest args) (forward-message-to handle0 args))
  (:attention (&rest args) (forward-message-to-all (list ) args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun room73b2-locker2 (&rest args) (instance* room73b2-locker2-object :init args))
;; (format *error-output* "(instance room73b2-locker2-object :init) for generating model~%")
