;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass akiba-desk-object
  :super cascaded-link
  :slots (sensors
         ))
(defmethod akiba-desk-object
  (:init
   (&rest args &key (name "akiba-desk") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :akiba-desk-bodyset2
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 350.0 700.0 730.0) (float-vector -350.0 700.0 730.0) (float-vector -350.0 -700.0 730.0) (float-vector 350.0 -700.0 730.0)))
         (instance face :init :vertices (list (float-vector -350.0 700.0 700.0) (float-vector 350.0 700.0 700.0) (float-vector 350.0 -700.0 700.0) (float-vector -350.0 -700.0 700.0)))
         (instance face :init :vertices (list (float-vector 350.0 700.0 730.0) (float-vector 350.0 700.0 700.0) (float-vector -350.0 700.0 700.0) (float-vector -350.0 700.0 730.0)))
         (instance face :init :vertices (list (float-vector 350.0 -700.0 730.0) (float-vector 350.0 -700.0 700.0) (float-vector 350.0 700.0 700.0) (float-vector 350.0 700.0 730.0)))
         (instance face :init :vertices (list (float-vector -350.0 -700.0 730.0) (float-vector -350.0 -700.0 700.0) (float-vector 350.0 -700.0 700.0) (float-vector 350.0 -700.0 730.0)))
         (instance face :init :vertices (list (float-vector -350.0 700.0 730.0) (float-vector -350.0 700.0 700.0) (float-vector -350.0 -700.0 700.0) (float-vector -350.0 -700.0 730.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -315.0 670.0 695.0) (float-vector 315.0 670.0 695.0) (float-vector 315.0 670.0 1145.0) (float-vector -315.0 670.0 1145.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector -280.0 670.0 725.0) (float-vector -280.0 670.0 1115.0) (float-vector 280.0 670.0 1115.0) (float-vector 280.0 670.0 725.0)))
))
         (instance face :init :vertices (list (float-vector 315.0 710.0 695.0) (float-vector 315.0 710.0 1145.0) (float-vector 315.0 670.0 1145.0) (float-vector 315.0 670.0 695.0)))
         (instance face :init :vertices (list (float-vector -315.0 710.0 695.0) (float-vector -315.0 710.0 1145.0) (float-vector 315.0 710.0 1145.0) (float-vector 315.0 710.0 695.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 280.0 710.0 725.0) (float-vector 280.0 710.0 1115.0) (float-vector -280.0 710.0 1115.0) (float-vector -280.0 710.0 725.0)))
))
         (instance face :init :vertices (list (float-vector -315.0 670.0 1145.0) (float-vector 315.0 670.0 1145.0) (float-vector 315.0 710.0 1145.0) (float-vector -315.0 710.0 1145.0)))
         (instance face :init :vertices (list (float-vector -315.0 710.0 695.0) (float-vector 315.0 710.0 695.0) (float-vector 315.0 670.0 695.0) (float-vector -315.0 670.0 695.0)))
         (instance face :init :vertices (list (float-vector -315.0 670.0 695.0) (float-vector -315.0 670.0 1145.0) (float-vector -315.0 710.0 1145.0) (float-vector -315.0 710.0 695.0)))
         (instance face :init :vertices (list (float-vector 280.0 670.0 725.0) (float-vector 280.0 670.0 1115.0) (float-vector 280.0 710.0 1115.0) (float-vector 280.0 710.0 725.0)))
         (instance face :init :vertices (list (float-vector -280.0 710.0 1115.0) (float-vector 280.0 710.0 1115.0) (float-vector 280.0 670.0 1115.0) (float-vector -280.0 670.0 1115.0)))
         (instance face :init :vertices (list (float-vector -280.0 710.0 725.0) (float-vector -280.0 710.0 1115.0) (float-vector -280.0 670.0 1115.0) (float-vector -280.0 670.0 725.0)))
         (instance face :init :vertices (list (float-vector -280.0 670.0 725.0) (float-vector 280.0 670.0 725.0) (float-vector 280.0 710.0 725.0) (float-vector -280.0 710.0 725.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -280.0 708.0 1115.0) (float-vector -280.0 672.0 1115.0) (float-vector 280.0 672.0 1115.0) (float-vector 280.0 708.0 1115.0)))
         (instance face :init :vertices (list (float-vector -280.0 672.0 725.0) (float-vector -280.0 708.0 725.0) (float-vector 280.0 708.0 725.0) (float-vector 280.0 672.0 725.0)))
         (instance face :init :vertices (list (float-vector -280.0 708.0 1115.0) (float-vector -280.0 708.0 725.0) (float-vector -280.0 672.0 725.0) (float-vector -280.0 672.0 1115.0)))
         (instance face :init :vertices (list (float-vector 280.0 708.0 1115.0) (float-vector 280.0 708.0 725.0) (float-vector -280.0 708.0 725.0) (float-vector -280.0 708.0 1115.0)))
         (instance face :init :vertices (list (float-vector 280.0 672.0 1115.0) (float-vector 280.0 672.0 725.0) (float-vector 280.0 708.0 725.0) (float-vector 280.0 708.0 1115.0)))
         (instance face :init :vertices (list (float-vector -280.0 672.0 1115.0) (float-vector -280.0 672.0 725.0) (float-vector 280.0 672.0 725.0) (float-vector 280.0 672.0 1115.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -315.0 -710.0 695.0) (float-vector 315.0 -710.0 695.0) (float-vector 315.0 -710.0 1145.0) (float-vector -315.0 -710.0 1145.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector -280.0 -710.0 725.0) (float-vector -280.0 -710.0 1115.0) (float-vector 280.0 -710.0 1115.0) (float-vector 280.0 -710.0 725.0)))
))
         (instance face :init :vertices (list (float-vector 315.0 -670.0 695.0) (float-vector 315.0 -670.0 1145.0) (float-vector 315.0 -710.0 1145.0) (float-vector 315.0 -710.0 695.0)))
         (instance face :init :vertices (list (float-vector -315.0 -670.0 695.0) (float-vector -315.0 -670.0 1145.0) (float-vector 315.0 -670.0 1145.0) (float-vector 315.0 -670.0 695.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 280.0 -670.0 725.0) (float-vector 280.0 -670.0 1115.0) (float-vector -280.0 -670.0 1115.0) (float-vector -280.0 -670.0 725.0)))
))
         (instance face :init :vertices (list (float-vector -315.0 -710.0 1145.0) (float-vector 315.0 -710.0 1145.0) (float-vector 315.0 -670.0 1145.0) (float-vector -315.0 -670.0 1145.0)))
         (instance face :init :vertices (list (float-vector -315.0 -670.0 695.0) (float-vector 315.0 -670.0 695.0) (float-vector 315.0 -710.0 695.0) (float-vector -315.0 -710.0 695.0)))
         (instance face :init :vertices (list (float-vector -315.0 -710.0 695.0) (float-vector -315.0 -710.0 1145.0) (float-vector -315.0 -670.0 1145.0) (float-vector -315.0 -670.0 695.0)))
         (instance face :init :vertices (list (float-vector 280.0 -710.0 725.0) (float-vector 280.0 -710.0 1115.0) (float-vector 280.0 -670.0 1115.0) (float-vector 280.0 -670.0 725.0)))
         (instance face :init :vertices (list (float-vector -280.0 -670.0 1115.0) (float-vector 280.0 -670.0 1115.0) (float-vector 280.0 -710.0 1115.0) (float-vector -280.0 -710.0 1115.0)))
         (instance face :init :vertices (list (float-vector -280.0 -670.0 725.0) (float-vector -280.0 -670.0 1115.0) (float-vector -280.0 -710.0 1115.0) (float-vector -280.0 -710.0 725.0)))
         (instance face :init :vertices (list (float-vector -280.0 -710.0 725.0) (float-vector 280.0 -710.0 725.0) (float-vector 280.0 -670.0 725.0) (float-vector -280.0 -670.0 725.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -280.0 -672.0 1115.0) (float-vector -280.0 -708.0 1115.0) (float-vector 280.0 -708.0 1115.0) (float-vector 280.0 -672.0 1115.0)))
         (instance face :init :vertices (list (float-vector -280.0 -708.0 725.0) (float-vector -280.0 -672.0 725.0) (float-vector 280.0 -672.0 725.0) (float-vector 280.0 -708.0 725.0)))
         (instance face :init :vertices (list (float-vector -280.0 -672.0 1115.0) (float-vector -280.0 -672.0 725.0) (float-vector -280.0 -708.0 725.0) (float-vector -280.0 -708.0 1115.0)))
         (instance face :init :vertices (list (float-vector 280.0 -672.0 1115.0) (float-vector 280.0 -672.0 725.0) (float-vector -280.0 -672.0 725.0) (float-vector -280.0 -672.0 1115.0)))
         (instance face :init :vertices (list (float-vector 280.0 -708.0 1115.0) (float-vector 280.0 -708.0 725.0) (float-vector 280.0 -672.0 725.0) (float-vector 280.0 -672.0 1115.0)))
         (instance face :init :vertices (list (float-vector -280.0 -708.0 1115.0) (float-vector -280.0 -708.0 725.0) (float-vector 280.0 -708.0 725.0) (float-vector 280.0 -708.0 1115.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -360.0 690.0 690.0) (float-vector -360.0 -690.0 690.0) (float-vector -360.0 -690.0 1290.0) (float-vector -360.0 690.0 1290.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector -360.0 655.0 720.0) (float-vector -360.0 655.0 1260.0) (float-vector -360.0 -655.0 1260.0) (float-vector -360.0 -655.0 720.0)))
))
         (instance face :init :vertices (list (float-vector -320.0 -690.0 690.0) (float-vector -320.0 -690.0 1290.0) (float-vector -360.0 -690.0 1290.0) (float-vector -360.0 -690.0 690.0)))
         (instance face :init :vertices (list (float-vector -320.0 690.0 690.0) (float-vector -320.0 690.0 1290.0) (float-vector -320.0 -690.0 1290.0) (float-vector -320.0 -690.0 690.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector -320.0 -655.0 720.0) (float-vector -320.0 -655.0 1260.0) (float-vector -320.0 655.0 1260.0) (float-vector -320.0 655.0 720.0)))
))
         (instance face :init :vertices (list (float-vector -360.0 690.0 1290.0) (float-vector -360.0 -690.0 1290.0) (float-vector -320.0 -690.0 1290.0) (float-vector -320.0 690.0 1290.0)))
         (instance face :init :vertices (list (float-vector -320.0 690.0 690.0) (float-vector -320.0 -690.0 690.0) (float-vector -360.0 -690.0 690.0) (float-vector -360.0 690.0 690.0)))
         (instance face :init :vertices (list (float-vector -360.0 690.0 690.0) (float-vector -360.0 690.0 1290.0) (float-vector -320.0 690.0 1290.0) (float-vector -320.0 690.0 690.0)))
         (instance face :init :vertices (list (float-vector -360.0 -655.0 720.0) (float-vector -360.0 -655.0 1260.0) (float-vector -320.0 -655.0 1260.0) (float-vector -320.0 -655.0 720.0)))
         (instance face :init :vertices (list (float-vector -320.0 655.0 1260.0) (float-vector -320.0 -655.0 1260.0) (float-vector -360.0 -655.0 1260.0) (float-vector -360.0 655.0 1260.0)))
         (instance face :init :vertices (list (float-vector -320.0 655.0 720.0) (float-vector -320.0 655.0 1260.0) (float-vector -360.0 655.0 1260.0) (float-vector -360.0 655.0 720.0)))
         (instance face :init :vertices (list (float-vector -360.0 655.0 720.0) (float-vector -360.0 -655.0 720.0) (float-vector -320.0 -655.0 720.0) (float-vector -320.0 655.0 720.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -322.0 655.0 1260.0) (float-vector -358.0 655.0 1260.0) (float-vector -358.0 -655.0 1260.0) (float-vector -322.0 -655.0 1260.0)))
         (instance face :init :vertices (list (float-vector -358.0 655.0 720.0) (float-vector -322.0 655.0 720.0) (float-vector -322.0 -655.0 720.0) (float-vector -358.0 -655.0 720.0)))
         (instance face :init :vertices (list (float-vector -322.0 655.0 1260.0) (float-vector -322.0 655.0 720.0) (float-vector -358.0 655.0 720.0) (float-vector -358.0 655.0 1260.0)))
         (instance face :init :vertices (list (float-vector -322.0 -655.0 1260.0) (float-vector -322.0 -655.0 720.0) (float-vector -322.0 655.0 720.0) (float-vector -322.0 655.0 1260.0)))
         (instance face :init :vertices (list (float-vector -358.0 -655.0 1260.0) (float-vector -358.0 -655.0 720.0) (float-vector -322.0 -655.0 720.0) (float-vector -322.0 -655.0 1260.0)))
         (instance face :init :vertices (list (float-vector -358.0 655.0 1260.0) (float-vector -358.0 655.0 720.0) (float-vector -358.0 -655.0 720.0) (float-vector -358.0 -655.0 1260.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 325.0 665.0 680.0) (float-vector -325.0 665.0 680.0) (float-vector -325.0 275.0 680.0) (float-vector 325.0 275.0 680.0)))
         (instance face :init :vertices (list (float-vector -325.0 665.0 0.0) (float-vector 325.0 665.0 0.0) (float-vector 325.0 275.0 0.0) (float-vector -325.0 275.0 0.0)))
         (instance face :init :vertices (list (float-vector 325.0 665.0 680.0) (float-vector 325.0 665.0 0.0) (float-vector -325.0 665.0 0.0) (float-vector -325.0 665.0 680.0)))
         (instance face :init :vertices (list (float-vector 325.0 275.0 680.0) (float-vector 325.0 275.0 0.0) (float-vector 325.0 665.0 0.0) (float-vector 325.0 665.0 680.0)))
         (instance face :init :vertices (list (float-vector -325.0 275.0 680.0) (float-vector -325.0 275.0 0.0) (float-vector 325.0 275.0 0.0) (float-vector 325.0 275.0 680.0)))
         (instance face :init :vertices (list (float-vector -325.0 665.0 680.0) (float-vector -325.0 665.0 0.0) (float-vector -325.0 275.0 0.0) (float-vector -325.0 275.0 680.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -325.0 690.0 680.0) (float-vector -355.0 690.0 680.0) (float-vector -355.0 -690.0 680.0) (float-vector -325.0 -690.0 680.0)))
         (instance face :init :vertices (list (float-vector -355.0 690.0 100.0) (float-vector -325.0 690.0 100.0) (float-vector -325.0 -690.0 100.0) (float-vector -355.0 -690.0 100.0)))
         (instance face :init :vertices (list (float-vector -325.0 690.0 680.0) (float-vector -325.0 690.0 100.0) (float-vector -355.0 690.0 100.0) (float-vector -355.0 690.0 680.0)))
         (instance face :init :vertices (list (float-vector -325.0 -690.0 680.0) (float-vector -325.0 -690.0 100.0) (float-vector -325.0 690.0 100.0) (float-vector -325.0 690.0 680.0)))
         (instance face :init :vertices (list (float-vector -355.0 -690.0 680.0) (float-vector -355.0 -690.0 100.0) (float-vector -325.0 -690.0 100.0) (float-vector -325.0 -690.0 680.0)))
         (instance face :init :vertices (list (float-vector -355.0 690.0 680.0) (float-vector -355.0 690.0 100.0) (float-vector -355.0 -690.0 100.0) (float-vector -355.0 -690.0 680.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -50.0 -660.0 700.0) (float-vector -50.0 -660.0 100.0) (float-vector 350.0 -660.0 70.0) (float-vector 350.0 -660.0 0.0) (float-vector -350.0 -660.0 0.0) (float-vector -350.0 -660.0 700.0)))
         (instance face :init :vertices (list (float-vector -50.0 -690.0 100.0) (float-vector -50.0 -690.0 700.0) (float-vector -350.0 -690.0 700.0) (float-vector -350.0 -690.0 0.0) (float-vector 350.0 -690.0 0.0) (float-vector 350.0 -690.0 70.0)))
         (instance face :init :vertices (list (float-vector -50.0 -660.0 700.0) (float-vector -50.0 -690.0 700.0) (float-vector -50.0 -690.0 100.0) (float-vector -50.0 -660.0 100.0)))
         (instance face :init :vertices (list (float-vector -350.0 -660.0 700.0) (float-vector -350.0 -690.0 700.0) (float-vector -50.0 -690.0 700.0) (float-vector -50.0 -660.0 700.0)))
         (instance face :init :vertices (list (float-vector -350.0 -660.0 0.0) (float-vector -350.0 -690.0 0.0) (float-vector -350.0 -690.0 700.0) (float-vector -350.0 -660.0 700.0)))
         (instance face :init :vertices (list (float-vector 350.0 -660.0 0.0) (float-vector 350.0 -690.0 0.0) (float-vector -350.0 -690.0 0.0) (float-vector -350.0 -660.0 0.0)))
         (instance face :init :vertices (list (float-vector 350.0 -660.0 70.0) (float-vector 350.0 -690.0 70.0) (float-vector 350.0 -690.0 0.0) (float-vector 350.0 -660.0 0.0)))
         (instance face :init :vertices (list (float-vector -50.0 -660.0 100.0) (float-vector -50.0 -690.0 100.0) (float-vector 350.0 -690.0 70.0) (float-vector 350.0 -660.0 70.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :orange)
     (send (elt bc 1) :set-color :gray60)
     (send (elt bc 2) :set-color :mediumseagreen)
     (send (elt bc 3) :set-color :gray60)
     (send (elt bc 4) :set-color :mediumseagreen)
     (send (elt bc 5) :set-color :gray60)
     (send (elt bc 6) :set-color :mediumseagreen)
     (send (elt bc 7) :set-color :gray60)
     (send (elt bc 8) :set-color :gray60)
     (send (elt bc 9) :set-color :gray60)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :akiba-desk-bodyset2 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint


     ;; init-ending 
     (setq links (list blink0))
     (setq joint-list (list))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:handle (&rest args) (forward-message-to-all (list ) args))
  (:attention (&rest args) (forward-message-to-all (list ) args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun akiba-desk (&rest args) (instance* akiba-desk-object :init args))
;; (format *error-output* "(instance akiba-desk-object :init) for generating model~%")
