;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass multibox-shelf-object
  :super cascaded-link
  :slots (sensors
         handle0
         joint0 joint1 joint2 joint3 joint4 joint5 joint6 joint7 ))
(defmethod multibox-shelf-object
  (:init
   (&rest args &key (name "multibox-shelf") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0 blink1 blink2 blink3 blink4 blink5 blink6 blink7 blink8
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :root
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 150.0 300.0 1050.0) (float-vector -150.0 300.0 1050.0) (float-vector -150.0 -300.0 1050.0) (float-vector 150.0 -300.0 1050.0)))
         (instance face :init :vertices (list (float-vector -150.0 300.0 1030.0) (float-vector 150.0 300.0 1030.0) (float-vector 150.0 -300.0 1030.0) (float-vector -150.0 -300.0 1030.0)))
         (instance face :init :vertices (list (float-vector 150.0 300.0 1050.0) (float-vector 150.0 300.0 1030.0) (float-vector -150.0 300.0 1030.0) (float-vector -150.0 300.0 1050.0)))
         (instance face :init :vertices (list (float-vector 150.0 -300.0 1050.0) (float-vector 150.0 -300.0 1030.0) (float-vector 150.0 300.0 1030.0) (float-vector 150.0 300.0 1050.0)))
         (instance face :init :vertices (list (float-vector -150.0 -300.0 1050.0) (float-vector -150.0 -300.0 1030.0) (float-vector 150.0 -300.0 1030.0) (float-vector 150.0 -300.0 1050.0)))
         (instance face :init :vertices (list (float-vector -150.0 300.0 1050.0) (float-vector -150.0 300.0 1030.0) (float-vector -150.0 -300.0 1030.0) (float-vector -150.0 -300.0 1050.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 140.0 300.0 84.5) (float-vector -150.0 300.0 84.5) (float-vector -150.0 -300.0 84.5) (float-vector 140.0 -300.0 84.5)))
         (instance face :init :vertices (list (float-vector -150.0 300.0 -0.5) (float-vector 140.0 300.0 -0.5) (float-vector 140.0 -300.0 -0.5) (float-vector -150.0 -300.0 -0.5)))
         (instance face :init :vertices (list (float-vector 140.0 300.0 84.5) (float-vector 140.0 300.0 -0.5) (float-vector -150.0 300.0 -0.5) (float-vector -150.0 300.0 84.5)))
         (instance face :init :vertices (list (float-vector 140.0 -300.0 84.5) (float-vector 140.0 -300.0 -0.5) (float-vector 140.0 300.0 -0.5) (float-vector 140.0 300.0 84.5)))
         (instance face :init :vertices (list (float-vector -150.0 -300.0 84.5) (float-vector -150.0 -300.0 -0.5) (float-vector 140.0 -300.0 -0.5) (float-vector 140.0 -300.0 84.5)))
         (instance face :init :vertices (list (float-vector -150.0 300.0 84.5) (float-vector -150.0 300.0 -0.5) (float-vector -150.0 -300.0 -0.5) (float-vector -150.0 -300.0 84.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -120.0 270.0 1029.5) (float-vector -150.0 270.0 1029.5) (float-vector -150.0 -270.0 1029.5) (float-vector -120.0 -270.0 1029.5)))
         (instance face :init :vertices (list (float-vector -150.0 270.0 84.5) (float-vector -120.0 270.0 84.5) (float-vector -120.0 -270.0 84.5) (float-vector -150.0 -270.0 84.5)))
         (instance face :init :vertices (list (float-vector -120.0 270.0 1029.5) (float-vector -120.0 270.0 84.5) (float-vector -150.0 270.0 84.5) (float-vector -150.0 270.0 1029.5)))
         (instance face :init :vertices (list (float-vector -120.0 -270.0 1029.5) (float-vector -120.0 -270.0 84.5) (float-vector -120.0 270.0 84.5) (float-vector -120.0 270.0 1029.5)))
         (instance face :init :vertices (list (float-vector -150.0 -270.0 1029.5) (float-vector -150.0 -270.0 84.5) (float-vector -120.0 -270.0 84.5) (float-vector -120.0 -270.0 1029.5)))
         (instance face :init :vertices (list (float-vector -150.0 270.0 1029.5) (float-vector -150.0 270.0 84.5) (float-vector -150.0 -270.0 84.5) (float-vector -150.0 -270.0 1029.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 140.0 300.0 1029.5) (float-vector -150.0 300.0 1029.5) (float-vector -150.0 270.0 1029.5) (float-vector 140.0 270.0 1029.5)))
         (instance face :init :vertices (list (float-vector -150.0 300.0 84.5) (float-vector 140.0 300.0 84.5) (float-vector 140.0 270.0 84.5) (float-vector -150.0 270.0 84.5)))
         (instance face :init :vertices (list (float-vector 140.0 300.0 1029.5) (float-vector 140.0 300.0 84.5) (float-vector -150.0 300.0 84.5) (float-vector -150.0 300.0 1029.5)))
         (instance face :init :vertices (list (float-vector 140.0 270.0 1029.5) (float-vector 140.0 270.0 84.5) (float-vector 140.0 300.0 84.5) (float-vector 140.0 300.0 1029.5)))
         (instance face :init :vertices (list (float-vector -150.0 270.0 1029.5) (float-vector -150.0 270.0 84.5) (float-vector 140.0 270.0 84.5) (float-vector 140.0 270.0 1029.5)))
         (instance face :init :vertices (list (float-vector -150.0 300.0 1029.5) (float-vector -150.0 300.0 84.5) (float-vector -150.0 270.0 84.5) (float-vector -150.0 270.0 1029.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 140.0 -270.0 1029.5) (float-vector -150.0 -270.0 1029.5) (float-vector -150.0 -300.0 1029.5) (float-vector 140.0 -300.0 1029.5)))
         (instance face :init :vertices (list (float-vector -150.0 -270.0 84.5) (float-vector 140.0 -270.0 84.5) (float-vector 140.0 -300.0 84.5) (float-vector -150.0 -300.0 84.5)))
         (instance face :init :vertices (list (float-vector 140.0 -270.0 1029.5) (float-vector 140.0 -270.0 84.5) (float-vector -150.0 -270.0 84.5) (float-vector -150.0 -270.0 1029.5)))
         (instance face :init :vertices (list (float-vector 140.0 -300.0 1029.5) (float-vector 140.0 -300.0 84.5) (float-vector 140.0 -270.0 84.5) (float-vector 140.0 -270.0 1029.5)))
         (instance face :init :vertices (list (float-vector -150.0 -300.0 1029.5) (float-vector -150.0 -300.0 84.5) (float-vector 140.0 -300.0 84.5) (float-vector 140.0 -300.0 1029.5)))
         (instance face :init :vertices (list (float-vector -150.0 -270.0 1029.5) (float-vector -150.0 -270.0 84.5) (float-vector -150.0 -300.0 84.5) (float-vector -150.0 -300.0 1029.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 140.0 270.0 80.0) (float-vector -120.0 270.0 80.0) (float-vector -120.0 -270.0 80.0) (float-vector 140.0 -270.0 80.0)))
         (instance face :init :vertices (list (float-vector -120.0 270.0 50.0) (float-vector 140.0 270.0 50.0) (float-vector 140.0 -270.0 50.0) (float-vector -120.0 -270.0 50.0)))
         (instance face :init :vertices (list (float-vector 140.0 270.0 80.0) (float-vector 140.0 270.0 50.0) (float-vector -120.0 270.0 50.0) (float-vector -120.0 270.0 80.0)))
         (instance face :init :vertices (list (float-vector 140.0 -270.0 80.0) (float-vector 140.0 -270.0 50.0) (float-vector 140.0 270.0 50.0) (float-vector 140.0 270.0 80.0)))
         (instance face :init :vertices (list (float-vector -120.0 -270.0 80.0) (float-vector -120.0 -270.0 50.0) (float-vector 140.0 -270.0 50.0) (float-vector 140.0 -270.0 80.0)))
         (instance face :init :vertices (list (float-vector -120.0 270.0 80.0) (float-vector -120.0 270.0 50.0) (float-vector -120.0 -270.0 50.0) (float-vector -120.0 -270.0 80.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 140.0 270.0 330.0) (float-vector -120.0 270.0 330.0) (float-vector -120.0 -270.0 330.0) (float-vector 140.0 -270.0 330.0)))
         (instance face :init :vertices (list (float-vector -120.0 270.0 300.0) (float-vector 140.0 270.0 300.0) (float-vector 140.0 -270.0 300.0) (float-vector -120.0 -270.0 300.0)))
         (instance face :init :vertices (list (float-vector 140.0 270.0 330.0) (float-vector 140.0 270.0 300.0) (float-vector -120.0 270.0 300.0) (float-vector -120.0 270.0 330.0)))
         (instance face :init :vertices (list (float-vector 140.0 -270.0 330.0) (float-vector 140.0 -270.0 300.0) (float-vector 140.0 270.0 300.0) (float-vector 140.0 270.0 330.0)))
         (instance face :init :vertices (list (float-vector -120.0 -270.0 330.0) (float-vector -120.0 -270.0 300.0) (float-vector 140.0 -270.0 300.0) (float-vector 140.0 -270.0 330.0)))
         (instance face :init :vertices (list (float-vector -120.0 270.0 330.0) (float-vector -120.0 270.0 300.0) (float-vector -120.0 -270.0 300.0) (float-vector -120.0 -270.0 330.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 140.0 270.0 580.0) (float-vector -120.0 270.0 580.0) (float-vector -120.0 -270.0 580.0) (float-vector 140.0 -270.0 580.0)))
         (instance face :init :vertices (list (float-vector -120.0 270.0 550.0) (float-vector 140.0 270.0 550.0) (float-vector 140.0 -270.0 550.0) (float-vector -120.0 -270.0 550.0)))
         (instance face :init :vertices (list (float-vector 140.0 270.0 580.0) (float-vector 140.0 270.0 550.0) (float-vector -120.0 270.0 550.0) (float-vector -120.0 270.0 580.0)))
         (instance face :init :vertices (list (float-vector 140.0 -270.0 580.0) (float-vector 140.0 -270.0 550.0) (float-vector 140.0 270.0 550.0) (float-vector 140.0 270.0 580.0)))
         (instance face :init :vertices (list (float-vector -120.0 -270.0 580.0) (float-vector -120.0 -270.0 550.0) (float-vector 140.0 -270.0 550.0) (float-vector 140.0 -270.0 580.0)))
         (instance face :init :vertices (list (float-vector -120.0 270.0 580.0) (float-vector -120.0 270.0 550.0) (float-vector -120.0 -270.0 550.0) (float-vector -120.0 -270.0 580.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 140.0 270.0 830.0) (float-vector -120.0 270.0 830.0) (float-vector -120.0 -270.0 830.0) (float-vector 140.0 -270.0 830.0)))
         (instance face :init :vertices (list (float-vector -120.0 270.0 800.0) (float-vector 140.0 270.0 800.0) (float-vector 140.0 -270.0 800.0) (float-vector -120.0 -270.0 800.0)))
         (instance face :init :vertices (list (float-vector 140.0 270.0 830.0) (float-vector 140.0 270.0 800.0) (float-vector -120.0 270.0 800.0) (float-vector -120.0 270.0 830.0)))
         (instance face :init :vertices (list (float-vector 140.0 -270.0 830.0) (float-vector 140.0 -270.0 800.0) (float-vector 140.0 270.0 800.0) (float-vector 140.0 270.0 830.0)))
         (instance face :init :vertices (list (float-vector -120.0 -270.0 830.0) (float-vector -120.0 -270.0 800.0) (float-vector 140.0 -270.0 800.0) (float-vector 140.0 -270.0 830.0)))
         (instance face :init :vertices (list (float-vector -120.0 270.0 830.0) (float-vector -120.0 270.0 800.0) (float-vector -120.0 -270.0 800.0) (float-vector -120.0 -270.0 830.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :white)
     (send (elt bc 2) :set-color :white)
     (send (elt bc 3) :set-color :white)
     (send (elt bc 4) :set-color :white)
     (send (elt bc 5) :set-color :white)
     (send (elt bc 6) :set-color :white)
     (send (elt bc 7) :set-color :white)
     (send (elt bc 8) :set-color :white)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :root :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :multibox-shelf-bodyset2
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -140.0 115.0 -120.0) (float-vector -140.0 -115.0 -120.0) (float-vector -140.0 -115.0 120.0) (float-vector -140.0 115.0 120.0)))
         (instance face :init :vertices (list (float-vector 140.0 -115.0 -120.0) (float-vector 140.0 -115.0 120.0) (float-vector -140.0 -115.0 120.0) (float-vector -140.0 -115.0 -120.0)))
         (instance face :init :vertices (list (float-vector 140.0 115.0 -120.0) (float-vector 140.0 115.0 120.0) (float-vector 140.0 105.0 120.0) (float-vector 140.0 105.0 -110.0) (float-vector 140.0 -105.0 -110.0) (float-vector 140.0 -105.0 120.0) (float-vector 140.0 -115.0 120.0) (float-vector 140.0 -115.0 -120.0)))
         (instance face :init :vertices (list (float-vector -140.0 115.0 120.0) (float-vector -140.0 -115.0 120.0) (float-vector 140.0 -115.0 120.0) (float-vector 140.0 -105.0 120.0) (float-vector -130.0 -105.0 120.0) (float-vector -130.0 105.0 120.0) (float-vector 140.0 105.0 120.0) (float-vector 140.0 115.0 120.0)))
         (instance face :init :vertices (list (float-vector 140.0 115.0 -120.0) (float-vector 140.0 -115.0 -120.0) (float-vector -140.0 -115.0 -120.0) (float-vector -140.0 115.0 -120.0)))
         (instance face :init :vertices (list (float-vector -140.0 115.0 -120.0) (float-vector -140.0 115.0 120.0) (float-vector 140.0 115.0 120.0) (float-vector 140.0 115.0 -120.0)))
         (instance face :init :vertices (list (float-vector -130.0 105.0 120.0) (float-vector -130.0 -105.0 120.0) (float-vector -130.0 -105.0 -110.0) (float-vector -130.0 105.0 -110.0)))
         (instance face :init :vertices (list (float-vector -130.0 -105.0 -110.0) (float-vector -130.0 -105.0 120.0) (float-vector 140.0 -105.0 120.0) (float-vector 140.0 -105.0 -110.0)))
         (instance face :init :vertices (list (float-vector 140.0 105.0 -110.0) (float-vector 140.0 105.0 120.0) (float-vector -130.0 105.0 120.0) (float-vector -130.0 105.0 -110.0)))
         (instance face :init :vertices (list (float-vector -130.0 105.0 -110.0) (float-vector -130.0 -105.0 -110.0) (float-vector 140.0 -105.0 -110.0) (float-vector 140.0 105.0 -110.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 150.0 125.0 130.0) (float-vector 140.0 125.0 130.0) (float-vector 140.0 -125.0 130.0) (float-vector 150.0 -125.0 130.0)))
         (instance face :init :vertices (list (float-vector 140.0 125.0 -120.0) (float-vector 150.0 125.0 -120.0) (float-vector 150.0 -125.0 -120.0) (float-vector 140.0 -125.0 -120.0)))
         (instance face :init :vertices (list (float-vector 150.0 125.0 130.0) (float-vector 150.0 125.0 -120.0) (float-vector 140.0 125.0 -120.0) (float-vector 140.0 125.0 130.0)))
         (instance face :init :vertices (list (float-vector 150.0 -125.0 130.0) (float-vector 150.0 -125.0 -120.0) (float-vector 150.0 125.0 -120.0) (float-vector 150.0 125.0 130.0)))
         (instance face :init :vertices (list (float-vector 140.0 -125.0 130.0) (float-vector 140.0 -125.0 -120.0) (float-vector 150.0 -125.0 -120.0) (float-vector 150.0 -125.0 130.0)))
         (instance face :init :vertices (list (float-vector 140.0 125.0 130.0) (float-vector 140.0 125.0 -120.0) (float-vector 140.0 -125.0 -120.0) (float-vector 140.0 -125.0 130.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :white)
     (setq blink8 (instance bodyset-link :init (make-cascoords) :bodies bc :name :multibox-shelf-bodyset2 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :multibox-shelf-bodyset3
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -140.0 115.0 -120.0) (float-vector -140.0 -115.0 -120.0) (float-vector -140.0 -115.0 120.0) (float-vector -140.0 115.0 120.0)))
         (instance face :init :vertices (list (float-vector 140.0 -115.0 -120.0) (float-vector 140.0 -115.0 120.0) (float-vector -140.0 -115.0 120.0) (float-vector -140.0 -115.0 -120.0)))
         (instance face :init :vertices (list (float-vector 140.0 115.0 -120.0) (float-vector 140.0 115.0 120.0) (float-vector 140.0 105.0 120.0) (float-vector 140.0 105.0 -110.0) (float-vector 140.0 -105.0 -110.0) (float-vector 140.0 -105.0 120.0) (float-vector 140.0 -115.0 120.0) (float-vector 140.0 -115.0 -120.0)))
         (instance face :init :vertices (list (float-vector -140.0 115.0 120.0) (float-vector -140.0 -115.0 120.0) (float-vector 140.0 -115.0 120.0) (float-vector 140.0 -105.0 120.0) (float-vector -130.0 -105.0 120.0) (float-vector -130.0 105.0 120.0) (float-vector 140.0 105.0 120.0) (float-vector 140.0 115.0 120.0)))
         (instance face :init :vertices (list (float-vector 140.0 115.0 -120.0) (float-vector 140.0 -115.0 -120.0) (float-vector -140.0 -115.0 -120.0) (float-vector -140.0 115.0 -120.0)))
         (instance face :init :vertices (list (float-vector -140.0 115.0 -120.0) (float-vector -140.0 115.0 120.0) (float-vector 140.0 115.0 120.0) (float-vector 140.0 115.0 -120.0)))
         (instance face :init :vertices (list (float-vector -130.0 105.0 120.0) (float-vector -130.0 -105.0 120.0) (float-vector -130.0 -105.0 -110.0) (float-vector -130.0 105.0 -110.0)))
         (instance face :init :vertices (list (float-vector -130.0 -105.0 -110.0) (float-vector -130.0 -105.0 120.0) (float-vector 140.0 -105.0 120.0) (float-vector 140.0 -105.0 -110.0)))
         (instance face :init :vertices (list (float-vector 140.0 105.0 -110.0) (float-vector 140.0 105.0 120.0) (float-vector -130.0 105.0 120.0) (float-vector -130.0 105.0 -110.0)))
         (instance face :init :vertices (list (float-vector -130.0 105.0 -110.0) (float-vector -130.0 -105.0 -110.0) (float-vector 140.0 -105.0 -110.0) (float-vector 140.0 105.0 -110.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 150.0 125.0 130.0) (float-vector 140.0 125.0 130.0) (float-vector 140.0 -125.0 130.0) (float-vector 150.0 -125.0 130.0)))
         (instance face :init :vertices (list (float-vector 140.0 125.0 -120.0) (float-vector 150.0 125.0 -120.0) (float-vector 150.0 -125.0 -120.0) (float-vector 140.0 -125.0 -120.0)))
         (instance face :init :vertices (list (float-vector 150.0 125.0 130.0) (float-vector 150.0 125.0 -120.0) (float-vector 140.0 125.0 -120.0) (float-vector 140.0 125.0 130.0)))
         (instance face :init :vertices (list (float-vector 150.0 -125.0 130.0) (float-vector 150.0 -125.0 -120.0) (float-vector 150.0 125.0 -120.0) (float-vector 150.0 125.0 130.0)))
         (instance face :init :vertices (list (float-vector 140.0 -125.0 130.0) (float-vector 140.0 -125.0 -120.0) (float-vector 150.0 -125.0 -120.0) (float-vector 150.0 -125.0 130.0)))
         (instance face :init :vertices (list (float-vector 140.0 125.0 130.0) (float-vector 140.0 125.0 -120.0) (float-vector 140.0 -125.0 -120.0) (float-vector 140.0 -125.0 130.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :brown)
     (setq blink7 (instance bodyset-link :init (make-cascoords) :bodies bc :name :multibox-shelf-bodyset3 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :multibox-shelf-bodyset4
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -140.0 115.0 -120.0) (float-vector -140.0 -115.0 -120.0) (float-vector -140.0 -115.0 120.0) (float-vector -140.0 115.0 120.0)))
         (instance face :init :vertices (list (float-vector 140.0 -115.0 -120.0) (float-vector 140.0 -115.0 120.0) (float-vector -140.0 -115.0 120.0) (float-vector -140.0 -115.0 -120.0)))
         (instance face :init :vertices (list (float-vector 140.0 115.0 -120.0) (float-vector 140.0 115.0 120.0) (float-vector 140.0 105.0 120.0) (float-vector 140.0 105.0 -110.0) (float-vector 140.0 -105.0 -110.0) (float-vector 140.0 -105.0 120.0) (float-vector 140.0 -115.0 120.0) (float-vector 140.0 -115.0 -120.0)))
         (instance face :init :vertices (list (float-vector -140.0 115.0 120.0) (float-vector -140.0 -115.0 120.0) (float-vector 140.0 -115.0 120.0) (float-vector 140.0 -105.0 120.0) (float-vector -130.0 -105.0 120.0) (float-vector -130.0 105.0 120.0) (float-vector 140.0 105.0 120.0) (float-vector 140.0 115.0 120.0)))
         (instance face :init :vertices (list (float-vector 140.0 115.0 -120.0) (float-vector 140.0 -115.0 -120.0) (float-vector -140.0 -115.0 -120.0) (float-vector -140.0 115.0 -120.0)))
         (instance face :init :vertices (list (float-vector -140.0 115.0 -120.0) (float-vector -140.0 115.0 120.0) (float-vector 140.0 115.0 120.0) (float-vector 140.0 115.0 -120.0)))
         (instance face :init :vertices (list (float-vector -130.0 105.0 120.0) (float-vector -130.0 -105.0 120.0) (float-vector -130.0 -105.0 -110.0) (float-vector -130.0 105.0 -110.0)))
         (instance face :init :vertices (list (float-vector -130.0 -105.0 -110.0) (float-vector -130.0 -105.0 120.0) (float-vector 140.0 -105.0 120.0) (float-vector 140.0 -105.0 -110.0)))
         (instance face :init :vertices (list (float-vector 140.0 105.0 -110.0) (float-vector 140.0 105.0 120.0) (float-vector -130.0 105.0 120.0) (float-vector -130.0 105.0 -110.0)))
         (instance face :init :vertices (list (float-vector -130.0 105.0 -110.0) (float-vector -130.0 -105.0 -110.0) (float-vector 140.0 -105.0 -110.0) (float-vector 140.0 105.0 -110.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 150.0 125.0 130.0) (float-vector 140.0 125.0 130.0) (float-vector 140.0 -125.0 130.0) (float-vector 150.0 -125.0 130.0)))
         (instance face :init :vertices (list (float-vector 140.0 125.0 -120.0) (float-vector 150.0 125.0 -120.0) (float-vector 150.0 -125.0 -120.0) (float-vector 140.0 -125.0 -120.0)))
         (instance face :init :vertices (list (float-vector 150.0 125.0 130.0) (float-vector 150.0 125.0 -120.0) (float-vector 140.0 125.0 -120.0) (float-vector 140.0 125.0 130.0)))
         (instance face :init :vertices (list (float-vector 150.0 -125.0 130.0) (float-vector 150.0 -125.0 -120.0) (float-vector 150.0 125.0 -120.0) (float-vector 150.0 125.0 130.0)))
         (instance face :init :vertices (list (float-vector 140.0 -125.0 130.0) (float-vector 140.0 -125.0 -120.0) (float-vector 150.0 -125.0 -120.0) (float-vector 150.0 -125.0 130.0)))
         (instance face :init :vertices (list (float-vector 140.0 125.0 130.0) (float-vector 140.0 125.0 -120.0) (float-vector 140.0 -125.0 -120.0) (float-vector 140.0 -125.0 130.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :white)
     (setq blink6 (instance bodyset-link :init (make-cascoords) :bodies bc :name :multibox-shelf-bodyset4 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :multibox-shelf-bodyset5
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -140.0 115.0 -120.0) (float-vector -140.0 -115.0 -120.0) (float-vector -140.0 -115.0 120.0) (float-vector -140.0 115.0 120.0)))
         (instance face :init :vertices (list (float-vector 140.0 -115.0 -120.0) (float-vector 140.0 -115.0 120.0) (float-vector -140.0 -115.0 120.0) (float-vector -140.0 -115.0 -120.0)))
         (instance face :init :vertices (list (float-vector 140.0 115.0 -120.0) (float-vector 140.0 115.0 120.0) (float-vector 140.0 105.0 120.0) (float-vector 140.0 105.0 -110.0) (float-vector 140.0 -105.0 -110.0) (float-vector 140.0 -105.0 120.0) (float-vector 140.0 -115.0 120.0) (float-vector 140.0 -115.0 -120.0)))
         (instance face :init :vertices (list (float-vector -140.0 115.0 120.0) (float-vector -140.0 -115.0 120.0) (float-vector 140.0 -115.0 120.0) (float-vector 140.0 -105.0 120.0) (float-vector -130.0 -105.0 120.0) (float-vector -130.0 105.0 120.0) (float-vector 140.0 105.0 120.0) (float-vector 140.0 115.0 120.0)))
         (instance face :init :vertices (list (float-vector 140.0 115.0 -120.0) (float-vector 140.0 -115.0 -120.0) (float-vector -140.0 -115.0 -120.0) (float-vector -140.0 115.0 -120.0)))
         (instance face :init :vertices (list (float-vector -140.0 115.0 -120.0) (float-vector -140.0 115.0 120.0) (float-vector 140.0 115.0 120.0) (float-vector 140.0 115.0 -120.0)))
         (instance face :init :vertices (list (float-vector -130.0 105.0 120.0) (float-vector -130.0 -105.0 120.0) (float-vector -130.0 -105.0 -110.0) (float-vector -130.0 105.0 -110.0)))
         (instance face :init :vertices (list (float-vector -130.0 -105.0 -110.0) (float-vector -130.0 -105.0 120.0) (float-vector 140.0 -105.0 120.0) (float-vector 140.0 -105.0 -110.0)))
         (instance face :init :vertices (list (float-vector 140.0 105.0 -110.0) (float-vector 140.0 105.0 120.0) (float-vector -130.0 105.0 120.0) (float-vector -130.0 105.0 -110.0)))
         (instance face :init :vertices (list (float-vector -130.0 105.0 -110.0) (float-vector -130.0 -105.0 -110.0) (float-vector 140.0 -105.0 -110.0) (float-vector 140.0 105.0 -110.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 150.0 125.0 130.0) (float-vector 140.0 125.0 130.0) (float-vector 140.0 -125.0 130.0) (float-vector 150.0 -125.0 130.0)))
         (instance face :init :vertices (list (float-vector 140.0 125.0 -120.0) (float-vector 150.0 125.0 -120.0) (float-vector 150.0 -125.0 -120.0) (float-vector 140.0 -125.0 -120.0)))
         (instance face :init :vertices (list (float-vector 150.0 125.0 130.0) (float-vector 150.0 125.0 -120.0) (float-vector 140.0 125.0 -120.0) (float-vector 140.0 125.0 130.0)))
         (instance face :init :vertices (list (float-vector 150.0 -125.0 130.0) (float-vector 150.0 -125.0 -120.0) (float-vector 150.0 125.0 -120.0) (float-vector 150.0 125.0 130.0)))
         (instance face :init :vertices (list (float-vector 140.0 -125.0 130.0) (float-vector 140.0 -125.0 -120.0) (float-vector 150.0 -125.0 -120.0) (float-vector 150.0 -125.0 130.0)))
         (instance face :init :vertices (list (float-vector 140.0 125.0 130.0) (float-vector 140.0 125.0 -120.0) (float-vector 140.0 -125.0 -120.0) (float-vector 140.0 -125.0 130.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :brown)
     (setq blink5 (instance bodyset-link :init (make-cascoords) :bodies bc :name :multibox-shelf-bodyset5 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :multibox-shelf-bodyset6
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -140.0 115.0 -120.0) (float-vector -140.0 -115.0 -120.0) (float-vector -140.0 -115.0 120.0) (float-vector -140.0 115.0 120.0)))
         (instance face :init :vertices (list (float-vector 140.0 -115.0 -120.0) (float-vector 140.0 -115.0 120.0) (float-vector -140.0 -115.0 120.0) (float-vector -140.0 -115.0 -120.0)))
         (instance face :init :vertices (list (float-vector 140.0 115.0 -120.0) (float-vector 140.0 115.0 120.0) (float-vector 140.0 105.0 120.0) (float-vector 140.0 105.0 -110.0) (float-vector 140.0 -105.0 -110.0) (float-vector 140.0 -105.0 120.0) (float-vector 140.0 -115.0 120.0) (float-vector 140.0 -115.0 -120.0)))
         (instance face :init :vertices (list (float-vector -140.0 115.0 120.0) (float-vector -140.0 -115.0 120.0) (float-vector 140.0 -115.0 120.0) (float-vector 140.0 -105.0 120.0) (float-vector -130.0 -105.0 120.0) (float-vector -130.0 105.0 120.0) (float-vector 140.0 105.0 120.0) (float-vector 140.0 115.0 120.0)))
         (instance face :init :vertices (list (float-vector 140.0 115.0 -120.0) (float-vector 140.0 -115.0 -120.0) (float-vector -140.0 -115.0 -120.0) (float-vector -140.0 115.0 -120.0)))
         (instance face :init :vertices (list (float-vector -140.0 115.0 -120.0) (float-vector -140.0 115.0 120.0) (float-vector 140.0 115.0 120.0) (float-vector 140.0 115.0 -120.0)))
         (instance face :init :vertices (list (float-vector -130.0 105.0 120.0) (float-vector -130.0 -105.0 120.0) (float-vector -130.0 -105.0 -110.0) (float-vector -130.0 105.0 -110.0)))
         (instance face :init :vertices (list (float-vector -130.0 -105.0 -110.0) (float-vector -130.0 -105.0 120.0) (float-vector 140.0 -105.0 120.0) (float-vector 140.0 -105.0 -110.0)))
         (instance face :init :vertices (list (float-vector 140.0 105.0 -110.0) (float-vector 140.0 105.0 120.0) (float-vector -130.0 105.0 120.0) (float-vector -130.0 105.0 -110.0)))
         (instance face :init :vertices (list (float-vector -130.0 105.0 -110.0) (float-vector -130.0 -105.0 -110.0) (float-vector 140.0 -105.0 -110.0) (float-vector 140.0 105.0 -110.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 150.0 125.0 130.0) (float-vector 140.0 125.0 130.0) (float-vector 140.0 -125.0 130.0) (float-vector 150.0 -125.0 130.0)))
         (instance face :init :vertices (list (float-vector 140.0 125.0 -120.0) (float-vector 150.0 125.0 -120.0) (float-vector 150.0 -125.0 -120.0) (float-vector 140.0 -125.0 -120.0)))
         (instance face :init :vertices (list (float-vector 150.0 125.0 130.0) (float-vector 150.0 125.0 -120.0) (float-vector 140.0 125.0 -120.0) (float-vector 140.0 125.0 130.0)))
         (instance face :init :vertices (list (float-vector 150.0 -125.0 130.0) (float-vector 150.0 -125.0 -120.0) (float-vector 150.0 125.0 -120.0) (float-vector 150.0 125.0 130.0)))
         (instance face :init :vertices (list (float-vector 140.0 -125.0 130.0) (float-vector 140.0 -125.0 -120.0) (float-vector 150.0 -125.0 -120.0) (float-vector 150.0 -125.0 130.0)))
         (instance face :init :vertices (list (float-vector 140.0 125.0 130.0) (float-vector 140.0 125.0 -120.0) (float-vector 140.0 -125.0 -120.0) (float-vector 140.0 -125.0 130.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :brown)
     (setq blink4 (instance bodyset-link :init (make-cascoords) :bodies bc :name :multibox-shelf-bodyset6 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :multibox-shelf-bodyset7
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -140.0 115.0 -120.0) (float-vector -140.0 -115.0 -120.0) (float-vector -140.0 -115.0 120.0) (float-vector -140.0 115.0 120.0)))
         (instance face :init :vertices (list (float-vector 140.0 -115.0 -120.0) (float-vector 140.0 -115.0 120.0) (float-vector -140.0 -115.0 120.0) (float-vector -140.0 -115.0 -120.0)))
         (instance face :init :vertices (list (float-vector 140.0 115.0 -120.0) (float-vector 140.0 115.0 120.0) (float-vector 140.0 105.0 120.0) (float-vector 140.0 105.0 -110.0) (float-vector 140.0 -105.0 -110.0) (float-vector 140.0 -105.0 120.0) (float-vector 140.0 -115.0 120.0) (float-vector 140.0 -115.0 -120.0)))
         (instance face :init :vertices (list (float-vector -140.0 115.0 120.0) (float-vector -140.0 -115.0 120.0) (float-vector 140.0 -115.0 120.0) (float-vector 140.0 -105.0 120.0) (float-vector -130.0 -105.0 120.0) (float-vector -130.0 105.0 120.0) (float-vector 140.0 105.0 120.0) (float-vector 140.0 115.0 120.0)))
         (instance face :init :vertices (list (float-vector 140.0 115.0 -120.0) (float-vector 140.0 -115.0 -120.0) (float-vector -140.0 -115.0 -120.0) (float-vector -140.0 115.0 -120.0)))
         (instance face :init :vertices (list (float-vector -140.0 115.0 -120.0) (float-vector -140.0 115.0 120.0) (float-vector 140.0 115.0 120.0) (float-vector 140.0 115.0 -120.0)))
         (instance face :init :vertices (list (float-vector -130.0 105.0 120.0) (float-vector -130.0 -105.0 120.0) (float-vector -130.0 -105.0 -110.0) (float-vector -130.0 105.0 -110.0)))
         (instance face :init :vertices (list (float-vector -130.0 -105.0 -110.0) (float-vector -130.0 -105.0 120.0) (float-vector 140.0 -105.0 120.0) (float-vector 140.0 -105.0 -110.0)))
         (instance face :init :vertices (list (float-vector 140.0 105.0 -110.0) (float-vector 140.0 105.0 120.0) (float-vector -130.0 105.0 120.0) (float-vector -130.0 105.0 -110.0)))
         (instance face :init :vertices (list (float-vector -130.0 105.0 -110.0) (float-vector -130.0 -105.0 -110.0) (float-vector 140.0 -105.0 -110.0) (float-vector 140.0 105.0 -110.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 150.0 125.0 130.0) (float-vector 140.0 125.0 130.0) (float-vector 140.0 -125.0 130.0) (float-vector 150.0 -125.0 130.0)))
         (instance face :init :vertices (list (float-vector 140.0 125.0 -120.0) (float-vector 150.0 125.0 -120.0) (float-vector 150.0 -125.0 -120.0) (float-vector 140.0 -125.0 -120.0)))
         (instance face :init :vertices (list (float-vector 150.0 125.0 130.0) (float-vector 150.0 125.0 -120.0) (float-vector 140.0 125.0 -120.0) (float-vector 140.0 125.0 130.0)))
         (instance face :init :vertices (list (float-vector 150.0 -125.0 130.0) (float-vector 150.0 -125.0 -120.0) (float-vector 150.0 125.0 -120.0) (float-vector 150.0 125.0 130.0)))
         (instance face :init :vertices (list (float-vector 140.0 -125.0 130.0) (float-vector 140.0 -125.0 -120.0) (float-vector 150.0 -125.0 -120.0) (float-vector 150.0 -125.0 130.0)))
         (instance face :init :vertices (list (float-vector 140.0 125.0 130.0) (float-vector 140.0 125.0 -120.0) (float-vector 140.0 -125.0 -120.0) (float-vector 140.0 -125.0 130.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :white)
     (setq blink3 (instance bodyset-link :init (make-cascoords) :bodies bc :name :multibox-shelf-bodyset7 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :multibox-shelf-bodyset8
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -140.0 115.0 -120.0) (float-vector -140.0 -115.0 -120.0) (float-vector -140.0 -115.0 120.0) (float-vector -140.0 115.0 120.0)))
         (instance face :init :vertices (list (float-vector 140.0 -115.0 -120.0) (float-vector 140.0 -115.0 120.0) (float-vector -140.0 -115.0 120.0) (float-vector -140.0 -115.0 -120.0)))
         (instance face :init :vertices (list (float-vector 140.0 115.0 -120.0) (float-vector 140.0 115.0 120.0) (float-vector 140.0 105.0 120.0) (float-vector 140.0 105.0 -110.0) (float-vector 140.0 -105.0 -110.0) (float-vector 140.0 -105.0 120.0) (float-vector 140.0 -115.0 120.0) (float-vector 140.0 -115.0 -120.0)))
         (instance face :init :vertices (list (float-vector -140.0 115.0 120.0) (float-vector -140.0 -115.0 120.0) (float-vector 140.0 -115.0 120.0) (float-vector 140.0 -105.0 120.0) (float-vector -130.0 -105.0 120.0) (float-vector -130.0 105.0 120.0) (float-vector 140.0 105.0 120.0) (float-vector 140.0 115.0 120.0)))
         (instance face :init :vertices (list (float-vector 140.0 115.0 -120.0) (float-vector 140.0 -115.0 -120.0) (float-vector -140.0 -115.0 -120.0) (float-vector -140.0 115.0 -120.0)))
         (instance face :init :vertices (list (float-vector -140.0 115.0 -120.0) (float-vector -140.0 115.0 120.0) (float-vector 140.0 115.0 120.0) (float-vector 140.0 115.0 -120.0)))
         (instance face :init :vertices (list (float-vector -130.0 105.0 120.0) (float-vector -130.0 -105.0 120.0) (float-vector -130.0 -105.0 -110.0) (float-vector -130.0 105.0 -110.0)))
         (instance face :init :vertices (list (float-vector -130.0 -105.0 -110.0) (float-vector -130.0 -105.0 120.0) (float-vector 140.0 -105.0 120.0) (float-vector 140.0 -105.0 -110.0)))
         (instance face :init :vertices (list (float-vector 140.0 105.0 -110.0) (float-vector 140.0 105.0 120.0) (float-vector -130.0 105.0 120.0) (float-vector -130.0 105.0 -110.0)))
         (instance face :init :vertices (list (float-vector -130.0 105.0 -110.0) (float-vector -130.0 -105.0 -110.0) (float-vector 140.0 -105.0 -110.0) (float-vector 140.0 105.0 -110.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 150.0 125.0 130.0) (float-vector 140.0 125.0 130.0) (float-vector 140.0 -125.0 130.0) (float-vector 150.0 -125.0 130.0)))
         (instance face :init :vertices (list (float-vector 140.0 125.0 -120.0) (float-vector 150.0 125.0 -120.0) (float-vector 150.0 -125.0 -120.0) (float-vector 140.0 -125.0 -120.0)))
         (instance face :init :vertices (list (float-vector 150.0 125.0 130.0) (float-vector 150.0 125.0 -120.0) (float-vector 140.0 125.0 -120.0) (float-vector 140.0 125.0 130.0)))
         (instance face :init :vertices (list (float-vector 150.0 -125.0 130.0) (float-vector 150.0 -125.0 -120.0) (float-vector 150.0 125.0 -120.0) (float-vector 150.0 125.0 130.0)))
         (instance face :init :vertices (list (float-vector 140.0 -125.0 130.0) (float-vector 140.0 -125.0 -120.0) (float-vector 150.0 -125.0 -120.0) (float-vector 150.0 -125.0 130.0)))
         (instance face :init :vertices (list (float-vector 140.0 125.0 130.0) (float-vector 140.0 125.0 -120.0) (float-vector 140.0 -125.0 -120.0) (float-vector 140.0 -125.0 130.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :brown)
     (setq blink2 (instance bodyset-link :init (make-cascoords) :bodies bc :name :multibox-shelf-bodyset8 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :multibox-shelf-bodyset9
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -140.0 115.0 -120.0) (float-vector -140.0 -115.0 -120.0) (float-vector -140.0 -115.0 120.0) (float-vector -140.0 115.0 120.0)))
         (instance face :init :vertices (list (float-vector 140.0 -115.0 -120.0) (float-vector 140.0 -115.0 120.0) (float-vector -140.0 -115.0 120.0) (float-vector -140.0 -115.0 -120.0)))
         (instance face :init :vertices (list (float-vector 140.0 115.0 -120.0) (float-vector 140.0 115.0 120.0) (float-vector 140.0 105.0 120.0) (float-vector 140.0 105.0 -110.0) (float-vector 140.0 -105.0 -110.0) (float-vector 140.0 -105.0 120.0) (float-vector 140.0 -115.0 120.0) (float-vector 140.0 -115.0 -120.0)))
         (instance face :init :vertices (list (float-vector -140.0 115.0 120.0) (float-vector -140.0 -115.0 120.0) (float-vector 140.0 -115.0 120.0) (float-vector 140.0 -105.0 120.0) (float-vector -130.0 -105.0 120.0) (float-vector -130.0 105.0 120.0) (float-vector 140.0 105.0 120.0) (float-vector 140.0 115.0 120.0)))
         (instance face :init :vertices (list (float-vector 140.0 115.0 -120.0) (float-vector 140.0 -115.0 -120.0) (float-vector -140.0 -115.0 -120.0) (float-vector -140.0 115.0 -120.0)))
         (instance face :init :vertices (list (float-vector -140.0 115.0 -120.0) (float-vector -140.0 115.0 120.0) (float-vector 140.0 115.0 120.0) (float-vector 140.0 115.0 -120.0)))
         (instance face :init :vertices (list (float-vector -130.0 105.0 120.0) (float-vector -130.0 -105.0 120.0) (float-vector -130.0 -105.0 -110.0) (float-vector -130.0 105.0 -110.0)))
         (instance face :init :vertices (list (float-vector -130.0 -105.0 -110.0) (float-vector -130.0 -105.0 120.0) (float-vector 140.0 -105.0 120.0) (float-vector 140.0 -105.0 -110.0)))
         (instance face :init :vertices (list (float-vector 140.0 105.0 -110.0) (float-vector 140.0 105.0 120.0) (float-vector -130.0 105.0 120.0) (float-vector -130.0 105.0 -110.0)))
         (instance face :init :vertices (list (float-vector -130.0 105.0 -110.0) (float-vector -130.0 -105.0 -110.0) (float-vector 140.0 -105.0 -110.0) (float-vector 140.0 105.0 -110.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 150.0 125.0 130.0) (float-vector 140.0 125.0 130.0) (float-vector 140.0 -125.0 130.0) (float-vector 150.0 -125.0 130.0)))
         (instance face :init :vertices (list (float-vector 140.0 125.0 -120.0) (float-vector 150.0 125.0 -120.0) (float-vector 150.0 -125.0 -120.0) (float-vector 140.0 -125.0 -120.0)))
         (instance face :init :vertices (list (float-vector 150.0 125.0 130.0) (float-vector 150.0 125.0 -120.0) (float-vector 140.0 125.0 -120.0) (float-vector 140.0 125.0 130.0)))
         (instance face :init :vertices (list (float-vector 150.0 -125.0 130.0) (float-vector 150.0 -125.0 -120.0) (float-vector 150.0 125.0 -120.0) (float-vector 150.0 125.0 130.0)))
         (instance face :init :vertices (list (float-vector 140.0 -125.0 130.0) (float-vector 140.0 -125.0 -120.0) (float-vector 150.0 -125.0 -120.0) (float-vector 150.0 -125.0 130.0)))
         (instance face :init :vertices (list (float-vector 140.0 125.0 130.0) (float-vector 140.0 125.0 -120.0) (float-vector 140.0 -125.0 -120.0) (float-vector 140.0 -125.0 130.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :white)
     (setq blink1 (instance bodyset-link :init (make-cascoords) :bodies bc :name :multibox-shelf-bodyset9 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send blink1 :newcoords (make-coords :pos (float-vector 0.0 -140.0 170.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink1)
     (send blink2 :newcoords (make-coords :pos (float-vector 0.0 -140.0 420.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink2)
     (send blink3 :newcoords (make-coords :pos (float-vector 0.0 -140.0 670.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink3)
     (send blink4 :newcoords (make-coords :pos (float-vector 0.0 -140.0 920.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink4)
     (send blink5 :newcoords (make-coords :pos (float-vector 0.0 140.0 170.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink5)
     (send blink6 :newcoords (make-coords :pos (float-vector 0.0 140.0 420.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink6)
     (send blink7 :newcoords (make-coords :pos (float-vector 0.0 140.0 670.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink7)
     (send blink8 :newcoords (make-coords :pos (float-vector 0.0 140.0 920.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink8)
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     ;; definition of :drawer0
     (setq joint0 (instance linear-joint :init
			     :parent-link blink0 :child-link blink1 :name :drawer0   :axis (float-vector 1.0 0.0 0.0)
			     :min    0.0 :max  300.0 :max-joint-velocity 0.785398 :max-joint-torque 100))

     ;; definition of :drawer1
     (setq joint1 (instance linear-joint :init
			     :parent-link blink0 :child-link blink2 :name :drawer1   :axis (float-vector 1.0 0.0 0.0)
			     :min    0.0 :max  300.0 :max-joint-velocity 0.785398 :max-joint-torque 100))

     ;; definition of :drawer2
     (setq joint2 (instance linear-joint :init
			     :parent-link blink0 :child-link blink3 :name :drawer2   :axis (float-vector 1.0 0.0 0.0)
			     :min    0.0 :max  300.0 :max-joint-velocity 0.785398 :max-joint-torque 100))

     ;; definition of :drawer3
     (setq joint3 (instance linear-joint :init
			     :parent-link blink0 :child-link blink4 :name :drawer3   :axis (float-vector 1.0 0.0 0.0)
			     :min    0.0 :max  300.0 :max-joint-velocity 0.785398 :max-joint-torque 100))

     ;; definition of :drawer4
     (setq joint4 (instance linear-joint :init
			     :parent-link blink0 :child-link blink5 :name :drawer4   :axis (float-vector 1.0 0.0 0.0)
			     :min    0.0 :max  300.0 :max-joint-velocity 0.785398 :max-joint-torque 100))

     ;; definition of :drawer5
     (setq joint5 (instance linear-joint :init
			     :parent-link blink0 :child-link blink6 :name :drawer5   :axis (float-vector 1.0 0.0 0.0)
			     :min    0.0 :max  300.0 :max-joint-velocity 0.785398 :max-joint-torque 100))

     ;; definition of :drawer6
     (setq joint6 (instance linear-joint :init
			     :parent-link blink0 :child-link blink7 :name :drawer6   :axis (float-vector 1.0 0.0 0.0)
			     :min    0.0 :max  300.0 :max-joint-velocity 0.785398 :max-joint-torque 100))

     ;; definition of :drawer7
     (setq joint7 (instance linear-joint :init
			     :parent-link blink0 :child-link blink8 :name :drawer7   :axis (float-vector 1.0 0.0 0.0)
			     :min    0.0 :max  300.0 :max-joint-velocity 0.785398 :max-joint-torque 100))


     ;; definition of :handle
     (setq handle0 (make-cascoords :pos (float-vector 0.0 0.0 0.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name "handle0"))
     (send blink0 :assoc handle0)

     ;; init-ending 
     (setq links (list blink0 blink1 blink2 blink3 blink4 blink5 blink6 blink7 blink8))
     (setq joint-list (list joint0 joint1 joint2 joint3 joint4 joint5 joint6 joint7))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:drawer0 (&rest args) (forward-message-to joint0 args))
  (:drawer1 (&rest args) (forward-message-to joint1 args))
  (:drawer2 (&rest args) (forward-message-to joint2 args))
  (:drawer3 (&rest args) (forward-message-to joint3 args))
  (:drawer4 (&rest args) (forward-message-to joint4 args))
  (:drawer5 (&rest args) (forward-message-to joint5 args))
  (:drawer6 (&rest args) (forward-message-to joint6 args))
  (:drawer7 (&rest args) (forward-message-to joint7 args))
  (:handle (&rest args) (forward-message-to-all (list  handle0) args))
  (:handle-handle0 (&rest args) (forward-message-to handle0 args))
  (:attention (&rest args) (forward-message-to-all (list ) args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun multibox-shelf (&rest args) (instance* multibox-shelf-object :init args))
;; (format *error-output* "(instance multibox-shelf-object :init) for generating model~%")
