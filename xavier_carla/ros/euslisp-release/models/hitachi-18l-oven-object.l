;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass hitachi-18l-oven-object
  :super cascaded-link
  :slots (sensors
         handle0
         joint0 ))
(defmethod hitachi-18l-oven-object
  (:init
   (&rest args &key (name "hitachi-18l-oven") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0 blink1
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :root
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 170.0 285.0 270.0) (float-vector -170.0 285.0 270.0) (float-vector -170.0 185.0 270.0) (float-vector 170.0 185.0 270.0)))
         (instance face :init :vertices (list (float-vector -170.0 285.0 0.0) (float-vector 170.0 285.0 0.0) (float-vector 170.0 185.0 0.0) (float-vector -170.0 185.0 0.0)))
         (instance face :init :vertices (list (float-vector 170.0 285.0 270.0) (float-vector 170.0 285.0 0.0) (float-vector -170.0 285.0 0.0) (float-vector -170.0 285.0 270.0)))
         (instance face :init :vertices (list (float-vector 170.0 185.0 270.0) (float-vector 170.0 185.0 0.0) (float-vector 170.0 285.0 0.0) (float-vector 170.0 285.0 270.0)))
         (instance face :init :vertices (list (float-vector -170.0 185.0 270.0) (float-vector -170.0 185.0 0.0) (float-vector 170.0 185.0 0.0) (float-vector 170.0 185.0 270.0)))
         (instance face :init :vertices (list (float-vector -170.0 285.0 270.0) (float-vector -170.0 285.0 0.0) (float-vector -170.0 185.0 0.0) (float-vector -170.0 185.0 270.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 170.0 285.0 0.0) (float-vector -170.0 285.0 0.0) (float-vector -170.0 -185.0 0.0) (float-vector 170.0 -185.0 0.0)))
         (instance face :init :vertices (list (float-vector -170.0 285.0 -35.0) (float-vector 170.0 285.0 -35.0) (float-vector 170.0 -185.0 -35.0) (float-vector -170.0 -185.0 -35.0)))
         (instance face :init :vertices (list (float-vector 170.0 285.0 0.0) (float-vector 170.0 285.0 -35.0) (float-vector -170.0 285.0 -35.0) (float-vector -170.0 285.0 0.0)))
         (instance face :init :vertices (list (float-vector 170.0 -185.0 0.0) (float-vector 170.0 -185.0 -35.0) (float-vector 170.0 285.0 -35.0) (float-vector 170.0 285.0 0.0)))
         (instance face :init :vertices (list (float-vector -170.0 -185.0 0.0) (float-vector -170.0 -185.0 -35.0) (float-vector 170.0 -185.0 -35.0) (float-vector 170.0 -185.0 0.0)))
         (instance face :init :vertices (list (float-vector -170.0 285.0 0.0) (float-vector -170.0 285.0 -35.0) (float-vector -170.0 -185.0 -35.0) (float-vector -170.0 -185.0 0.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 140.0 185.0 270.0) (float-vector -170.0 185.0 270.0) (float-vector -170.0 -185.0 270.0) (float-vector 140.0 -185.0 270.0)))
         (instance face :init :vertices (list (float-vector -170.0 185.0 235.0) (float-vector 140.0 185.0 235.0) (float-vector 140.0 -185.0 235.0) (float-vector -170.0 -185.0 235.0)))
         (instance face :init :vertices (list (float-vector 140.0 185.0 270.0) (float-vector 140.0 185.0 235.0) (float-vector -170.0 185.0 235.0) (float-vector -170.0 185.0 270.0)))
         (instance face :init :vertices (list (float-vector 140.0 -185.0 270.0) (float-vector 140.0 -185.0 235.0) (float-vector 140.0 185.0 235.0) (float-vector 140.0 185.0 270.0)))
         (instance face :init :vertices (list (float-vector -170.0 -185.0 270.0) (float-vector -170.0 -185.0 235.0) (float-vector 140.0 -185.0 235.0) (float-vector 140.0 -185.0 270.0)))
         (instance face :init :vertices (list (float-vector -170.0 185.0 270.0) (float-vector -170.0 185.0 235.0) (float-vector -170.0 -185.0 235.0) (float-vector -170.0 -185.0 270.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 140.0 185.0 50.0) (float-vector -170.0 185.0 50.0) (float-vector -170.0 -185.0 50.0) (float-vector 140.0 -185.0 50.0)))
         (instance face :init :vertices (list (float-vector -170.0 185.0 0.0) (float-vector 140.0 185.0 0.0) (float-vector 140.0 -185.0 0.0) (float-vector -170.0 -185.0 0.0)))
         (instance face :init :vertices (list (float-vector 140.0 185.0 50.0) (float-vector 140.0 185.0 0.0) (float-vector -170.0 185.0 0.0) (float-vector -170.0 185.0 50.0)))
         (instance face :init :vertices (list (float-vector 140.0 -185.0 50.0) (float-vector 140.0 -185.0 0.0) (float-vector 140.0 185.0 0.0) (float-vector 140.0 185.0 50.0)))
         (instance face :init :vertices (list (float-vector -170.0 -185.0 50.0) (float-vector -170.0 -185.0 0.0) (float-vector 140.0 -185.0 0.0) (float-vector 140.0 -185.0 50.0)))
         (instance face :init :vertices (list (float-vector -170.0 185.0 50.0) (float-vector -170.0 185.0 0.0) (float-vector -170.0 -185.0 0.0) (float-vector -170.0 -185.0 50.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -130.0 145.0 235.5) (float-vector -170.0 145.0 235.5) (float-vector -170.0 -145.0 235.5) (float-vector -130.0 -145.0 235.5)))
         (instance face :init :vertices (list (float-vector -170.0 145.0 50.5) (float-vector -130.0 145.0 50.5) (float-vector -130.0 -145.0 50.5) (float-vector -170.0 -145.0 50.5)))
         (instance face :init :vertices (list (float-vector -130.0 145.0 235.5) (float-vector -130.0 145.0 50.5) (float-vector -170.0 145.0 50.5) (float-vector -170.0 145.0 235.5)))
         (instance face :init :vertices (list (float-vector -130.0 -145.0 235.5) (float-vector -130.0 -145.0 50.5) (float-vector -130.0 145.0 50.5) (float-vector -130.0 145.0 235.5)))
         (instance face :init :vertices (list (float-vector -170.0 -145.0 235.5) (float-vector -170.0 -145.0 50.5) (float-vector -130.0 -145.0 50.5) (float-vector -130.0 -145.0 235.5)))
         (instance face :init :vertices (list (float-vector -170.0 145.0 235.5) (float-vector -170.0 145.0 50.5) (float-vector -170.0 -145.0 50.5) (float-vector -170.0 -145.0 235.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 140.0 185.0 235.5) (float-vector -170.0 185.0 235.5) (float-vector -170.0 145.0 235.5) (float-vector 140.0 145.0 235.5)))
         (instance face :init :vertices (list (float-vector -170.0 185.0 50.5) (float-vector 140.0 185.0 50.5) (float-vector 140.0 145.0 50.5) (float-vector -170.0 145.0 50.5)))
         (instance face :init :vertices (list (float-vector 140.0 185.0 235.5) (float-vector 140.0 185.0 50.5) (float-vector -170.0 185.0 50.5) (float-vector -170.0 185.0 235.5)))
         (instance face :init :vertices (list (float-vector 140.0 145.0 235.5) (float-vector 140.0 145.0 50.5) (float-vector 140.0 185.0 50.5) (float-vector 140.0 185.0 235.5)))
         (instance face :init :vertices (list (float-vector -170.0 145.0 235.5) (float-vector -170.0 145.0 50.5) (float-vector 140.0 145.0 50.5) (float-vector 140.0 145.0 235.5)))
         (instance face :init :vertices (list (float-vector -170.0 185.0 235.5) (float-vector -170.0 185.0 50.5) (float-vector -170.0 145.0 50.5) (float-vector -170.0 145.0 235.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 140.0 -145.0 235.5) (float-vector -170.0 -145.0 235.5) (float-vector -170.0 -185.0 235.5) (float-vector 140.0 -185.0 235.5)))
         (instance face :init :vertices (list (float-vector -170.0 -145.0 50.5) (float-vector 140.0 -145.0 50.5) (float-vector 140.0 -185.0 50.5) (float-vector -170.0 -185.0 50.5)))
         (instance face :init :vertices (list (float-vector 140.0 -145.0 235.5) (float-vector 140.0 -145.0 50.5) (float-vector -170.0 -145.0 50.5) (float-vector -170.0 -145.0 235.5)))
         (instance face :init :vertices (list (float-vector 140.0 -185.0 235.5) (float-vector 140.0 -185.0 50.5) (float-vector 140.0 -145.0 50.5) (float-vector 140.0 -145.0 235.5)))
         (instance face :init :vertices (list (float-vector -170.0 -185.0 235.5) (float-vector -170.0 -185.0 50.5) (float-vector 140.0 -185.0 50.5) (float-vector 140.0 -185.0 235.5)))
         (instance face :init :vertices (list (float-vector -170.0 -145.0 235.5) (float-vector -170.0 -145.0 50.5) (float-vector -170.0 -185.0 50.5) (float-vector -170.0 -185.0 235.5)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray60)
     (send (elt bc 1) :set-color :gray10)
     (send (elt bc 2) :set-color :gray60)
     (send (elt bc 3) :set-color :gray60)
     (send (elt bc 4) :set-color :gray60)
     (send (elt bc 5) :set-color :gray60)
     (send (elt bc 6) :set-color :gray60)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :root :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :hitachi-18l-oven-bodyset2
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -7.5 355.0 -7.5) (float-vector -7.5 -15.0 -7.5) (float-vector -7.5 -15.0 262.5) (float-vector -7.5 355.0 262.5))
                              :holes (list
         (instance hole :init :vertices (list (float-vector -7.5 295.0 52.5) (float-vector -7.5 295.0 202.5) (float-vector -7.5 45.0 202.5) (float-vector -7.5 45.0 52.5)))
))
         (instance face :init :vertices (list (float-vector 22.5 -15.0 -7.5) (float-vector 22.5 -15.0 262.5) (float-vector -7.5 -15.0 262.5) (float-vector -7.5 -15.0 -7.5)))
         (instance face :init :vertices (list (float-vector 22.5 355.0 -7.5) (float-vector 22.5 355.0 262.5) (float-vector 22.5 -15.0 262.5) (float-vector 22.5 -15.0 -7.5))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 22.5 45.0 52.5) (float-vector 22.5 45.0 202.5) (float-vector 22.5 295.0 202.5) (float-vector 22.5 295.0 52.5)))
))
         (instance face :init :vertices (list (float-vector -7.5 355.0 262.5) (float-vector -7.5 -15.0 262.5) (float-vector 22.5 -15.0 262.5) (float-vector 22.5 355.0 262.5)))
         (instance face :init :vertices (list (float-vector 22.5 355.0 -7.5) (float-vector 22.5 -15.0 -7.5) (float-vector -7.5 -15.0 -7.5) (float-vector -7.5 355.0 -7.5)))
         (instance face :init :vertices (list (float-vector -7.5 355.0 -7.5) (float-vector -7.5 355.0 262.5) (float-vector 22.5 355.0 262.5) (float-vector 22.5 355.0 -7.5)))
         (instance face :init :vertices (list (float-vector -7.5 45.0 52.5) (float-vector -7.5 45.0 202.5) (float-vector 22.5 45.0 202.5) (float-vector 22.5 45.0 52.5)))
         (instance face :init :vertices (list (float-vector 22.5 295.0 202.5) (float-vector 22.5 45.0 202.5) (float-vector -7.5 45.0 202.5) (float-vector -7.5 295.0 202.5)))
         (instance face :init :vertices (list (float-vector 22.5 295.0 52.5) (float-vector 22.5 295.0 202.5) (float-vector -7.5 295.0 202.5) (float-vector -7.5 295.0 52.5)))
         (instance face :init :vertices (list (float-vector -7.5 295.0 52.5) (float-vector -7.5 45.0 52.5) (float-vector 22.5 45.0 52.5) (float-vector 22.5 295.0 52.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 22.0 300.0 207.5) (float-vector -7.0 300.0 207.5) (float-vector -7.0 40.0 207.5) (float-vector 22.0 40.0 207.5)))
         (instance face :init :vertices (list (float-vector -7.0 300.0 47.5) (float-vector 22.0 300.0 47.5) (float-vector 22.0 40.0 47.5) (float-vector -7.0 40.0 47.5)))
         (instance face :init :vertices (list (float-vector 22.0 300.0 207.5) (float-vector 22.0 300.0 47.5) (float-vector -7.0 300.0 47.5) (float-vector -7.0 300.0 207.5)))
         (instance face :init :vertices (list (float-vector 22.0 40.0 207.5) (float-vector 22.0 40.0 47.5) (float-vector 22.0 300.0 47.5) (float-vector 22.0 300.0 207.5)))
         (instance face :init :vertices (list (float-vector -7.0 40.0 207.5) (float-vector -7.0 40.0 47.5) (float-vector 22.0 40.0 47.5) (float-vector 22.0 40.0 207.5)))
         (instance face :init :vertices (list (float-vector -7.0 300.0 207.5) (float-vector -7.0 300.0 47.5) (float-vector -7.0 40.0 47.5) (float-vector -7.0 40.0 207.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 22.5 -5.0 237.5) (float-vector 22.5 -5.0 257.5) (float-vector 22.5 110.0 257.5) (float-vector 22.5 110.0 237.5)))
         (instance face :init :vertices (list (float-vector 22.5 445.0 237.5) (float-vector 22.5 330.0 237.5) (float-vector 22.5 330.0 257.5) (float-vector 22.5 445.0 257.5)))
         (instance face :init :vertices (list (float-vector 62.5 -5.0 237.5) (float-vector 62.5 -5.0 257.5) (float-vector 22.5 -5.0 257.5) (float-vector 22.5 -5.0 237.5)))
         (instance face :init :vertices (list (float-vector 62.5 445.0 237.5) (float-vector 62.5 445.0 257.5) (float-vector 62.5 -5.0 257.5) (float-vector 62.5 -5.0 237.5)))
         (instance face :init :vertices (list (float-vector 22.5 445.0 257.5) (float-vector 22.5 330.0 257.5) (float-vector 52.5 330.0 257.5) (float-vector 52.5 110.0 257.5) (float-vector 22.5 110.0 257.5) (float-vector 22.5 -5.0 257.5) (float-vector 62.5 -5.0 257.5) (float-vector 62.5 445.0 257.5)))
         (instance face :init :vertices (list (float-vector 62.5 445.0 237.5) (float-vector 62.5 -5.0 237.5) (float-vector 22.5 -5.0 237.5) (float-vector 22.5 110.0 237.5) (float-vector 52.5 110.0 237.5) (float-vector 52.5 330.0 237.5) (float-vector 22.5 330.0 237.5) (float-vector 22.5 445.0 237.5)))
         (instance face :init :vertices (list (float-vector 22.5 445.0 237.5) (float-vector 22.5 445.0 257.5) (float-vector 62.5 445.0 257.5) (float-vector 62.5 445.0 237.5)))
         (instance face :init :vertices (list (float-vector 52.5 110.0 237.5) (float-vector 22.5 110.0 237.5) (float-vector 22.5 110.0 257.5) (float-vector 52.5 110.0 257.5)))
         (instance face :init :vertices (list (float-vector 52.5 330.0 257.5) (float-vector 22.5 330.0 257.5) (float-vector 22.5 330.0 237.5) (float-vector 52.5 330.0 237.5)))
         (instance face :init :vertices (list (float-vector 52.5 330.0 237.5) (float-vector 52.5 110.0 237.5) (float-vector 52.5 110.0 257.5) (float-vector 52.5 330.0 257.5)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray60)
     (send (elt bc 1) :set-color :black)
     (gl::transparent (elt bc 1) 0.8)
     (send (elt bc 2) :set-color :gray60)
     (setq blink1 (instance bodyset-link :init (make-cascoords) :bodies bc :name :hitachi-18l-oven-bodyset2 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send blink1 :newcoords (make-coords :pos (float-vector 147.5 -170.0 7.5) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink1)
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     ;; definition of :door
     (setq joint0 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink1 :name :door      :axis :y 
			     :min    0.0 :max   90.0 :max-joint-velocity 5 :max-joint-torque 100))


     ;; definition of :handle
     (setq handle0 (make-cascoords :pos (float-vector 185.0 0.0 295.0) :rot #2f((0.0 1.0 0.0) (0.0 0.0 -1.0) (-1.0 0.0 0.0)) :name "door"))
     (send blink1 :assoc handle0)

     ;; init-ending 
     (setq links (list blink0 blink1))
     (setq joint-list (list joint0))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:door (&rest args) (forward-message-to joint0 args))
  (:handle (&rest args) (forward-message-to-all (list  handle0) args))
  (:handle-door (&rest args) (forward-message-to handle0 args))
  (:attention (&rest args) (forward-message-to-all (list ) args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun hitachi-18l-oven (&rest args) (instance* hitachi-18l-oven-object :init args))
;; (format *error-output* "(instance hitachi-18l-oven-object :init) for generating model~%")
