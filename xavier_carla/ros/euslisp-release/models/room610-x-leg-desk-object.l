;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass room610-x-leg-desk-object
  :super cascaded-link
  :slots (sensors
         ))
(defmethod room610-x-leg-desk-object
  (:init
   (&rest args &key (name "room610-x-leg-desk") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :room610-x-leg-desk-bodyset2
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 300.0 600.0 188.573) (float-vector -300.0 600.0 188.573) (float-vector -300.0 -600.0 188.573) (float-vector 300.0 -600.0 188.573)))
         (instance face :init :vertices (list (float-vector -300.0 600.0 148.573) (float-vector 300.0 600.0 148.573) (float-vector 300.0 -600.0 148.573) (float-vector -300.0 -600.0 148.573)))
         (instance face :init :vertices (list (float-vector 300.0 600.0 188.573) (float-vector 300.0 600.0 148.573) (float-vector -300.0 600.0 148.573) (float-vector -300.0 600.0 188.573)))
         (instance face :init :vertices (list (float-vector 300.0 -600.0 188.573) (float-vector 300.0 -600.0 148.573) (float-vector 300.0 600.0 148.573) (float-vector 300.0 600.0 188.573)))
         (instance face :init :vertices (list (float-vector -300.0 -600.0 188.573) (float-vector -300.0 -600.0 148.573) (float-vector 300.0 -600.0 148.573) (float-vector 300.0 -600.0 188.573)))
         (instance face :init :vertices (list (float-vector -300.0 600.0 188.573) (float-vector -300.0 600.0 148.573) (float-vector -300.0 -600.0 148.573) (float-vector -300.0 -600.0 188.573)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 67.5 -412.55 180.163) (float-vector 42.5 -412.55 180.163) (float-vector 42.5 -421.915 156.983) (float-vector 67.5 -421.915 156.983)))
         (instance face :init :vertices (list (float-vector 42.5 421.915 -156.983) (float-vector 67.5 421.915 -156.983) (float-vector 67.5 412.55 -180.163) (float-vector 42.5 412.55 -180.163)))
         (instance face :init :vertices (list (float-vector 67.5 -412.55 180.163) (float-vector 67.5 421.915 -156.983) (float-vector 42.5 421.915 -156.983) (float-vector 42.5 -412.55 180.163)))
         (instance face :init :vertices (list (float-vector 67.5 -421.915 156.983) (float-vector 67.5 412.55 -180.163) (float-vector 67.5 421.915 -156.983) (float-vector 67.5 -412.55 180.163)))
         (instance face :init :vertices (list (float-vector 42.5 -421.915 156.983) (float-vector 42.5 412.55 -180.163) (float-vector 67.5 412.55 -180.163) (float-vector 67.5 -421.915 156.983)))
         (instance face :init :vertices (list (float-vector 42.5 -412.55 180.163) (float-vector 42.5 421.915 -156.983) (float-vector 42.5 412.55 -180.163) (float-vector 42.5 -421.915 156.983)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 67.5 421.915 156.983) (float-vector 42.5 421.915 156.983) (float-vector 42.5 412.55 180.163) (float-vector 67.5 412.55 180.163)))
         (instance face :init :vertices (list (float-vector 42.5 -412.55 -180.163) (float-vector 67.5 -412.55 -180.163) (float-vector 67.5 -421.915 -156.983) (float-vector 42.5 -421.915 -156.983)))
         (instance face :init :vertices (list (float-vector 67.5 421.915 156.983) (float-vector 67.5 -412.55 -180.163) (float-vector 42.5 -412.55 -180.163) (float-vector 42.5 421.915 156.983)))
         (instance face :init :vertices (list (float-vector 67.5 412.55 180.163) (float-vector 67.5 -421.915 -156.983) (float-vector 67.5 -412.55 -180.163) (float-vector 67.5 421.915 156.983)))
         (instance face :init :vertices (list (float-vector 42.5 412.55 180.163) (float-vector 42.5 -421.915 -156.983) (float-vector 67.5 -421.915 -156.983) (float-vector 67.5 412.55 180.163)))
         (instance face :init :vertices (list (float-vector 42.5 421.915 156.983) (float-vector 42.5 -412.55 -180.163) (float-vector 42.5 -421.915 -156.983) (float-vector 42.5 412.55 180.163)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -42.5 -412.55 180.163) (float-vector -67.5 -412.55 180.163) (float-vector -67.5 -421.915 156.983) (float-vector -42.5 -421.915 156.983)))
         (instance face :init :vertices (list (float-vector -67.5 421.915 -156.983) (float-vector -42.5 421.915 -156.983) (float-vector -42.5 412.55 -180.163) (float-vector -67.5 412.55 -180.163)))
         (instance face :init :vertices (list (float-vector -42.5 -412.55 180.163) (float-vector -42.5 421.915 -156.983) (float-vector -67.5 421.915 -156.983) (float-vector -67.5 -412.55 180.163)))
         (instance face :init :vertices (list (float-vector -42.5 -421.915 156.983) (float-vector -42.5 412.55 -180.163) (float-vector -42.5 421.915 -156.983) (float-vector -42.5 -412.55 180.163)))
         (instance face :init :vertices (list (float-vector -67.5 -421.915 156.983) (float-vector -67.5 412.55 -180.163) (float-vector -42.5 412.55 -180.163) (float-vector -42.5 -421.915 156.983)))
         (instance face :init :vertices (list (float-vector -67.5 -412.55 180.163) (float-vector -67.5 421.915 -156.983) (float-vector -67.5 412.55 -180.163) (float-vector -67.5 -421.915 156.983)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -42.5 421.915 156.983) (float-vector -67.5 421.915 156.983) (float-vector -67.5 412.55 180.163) (float-vector -42.5 412.55 180.163)))
         (instance face :init :vertices (list (float-vector -67.5 -412.55 -180.163) (float-vector -42.5 -412.55 -180.163) (float-vector -42.5 -421.915 -156.983) (float-vector -67.5 -421.915 -156.983)))
         (instance face :init :vertices (list (float-vector -42.5 421.915 156.983) (float-vector -42.5 -412.55 -180.163) (float-vector -67.5 -412.55 -180.163) (float-vector -67.5 421.915 156.983)))
         (instance face :init :vertices (list (float-vector -42.5 412.55 180.163) (float-vector -42.5 -421.915 -156.983) (float-vector -42.5 -412.55 -180.163) (float-vector -42.5 421.915 156.983)))
         (instance face :init :vertices (list (float-vector -67.5 412.55 180.163) (float-vector -67.5 -421.915 -156.983) (float-vector -42.5 -421.915 -156.983) (float-vector -42.5 412.55 180.163)))
         (instance face :init :vertices (list (float-vector -67.5 421.915 156.983) (float-vector -67.5 -412.55 -180.163) (float-vector -67.5 -421.915 -156.983) (float-vector -67.5 412.55 180.163)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 320.0 429.546 -184.333) (float-vector 320.0 435.776 -176.065) (float-vector 320.0 437.038 -165.79) (float-vector 320.0 432.993 -156.26) (float-vector 320.0 424.725 -150.029) (float-vector 320.0 414.449 -148.768) (float-vector 320.0 404.92 -152.813) (float-vector 320.0 398.689 -161.081) (float-vector 320.0 397.427 -171.356) (float-vector 320.0 401.473 -180.886) (float-vector 320.0 409.741 -187.117) (float-vector 320.0 420.016 -188.378)))
         (instance face :init :vertices (list (float-vector -320.0 435.776 -176.065) (float-vector -320.0 429.546 -184.333) (float-vector -320.0 420.016 -188.378) (float-vector -320.0 409.741 -187.117) (float-vector -320.0 401.473 -180.886) (float-vector -320.0 397.427 -171.356) (float-vector -320.0 398.689 -161.081) (float-vector -320.0 404.92 -152.813) (float-vector -320.0 414.449 -148.768) (float-vector -320.0 424.725 -150.029) (float-vector -320.0 432.993 -156.26) (float-vector -320.0 437.038 -165.79)))
         (instance face :init :vertices (list (float-vector 320.0 429.546 -184.333) (float-vector -320.0 429.546 -184.333) (float-vector -320.0 435.776 -176.065) (float-vector 320.0 435.776 -176.065)))
         (instance face :init :vertices (list (float-vector 320.0 420.016 -188.378) (float-vector -320.0 420.016 -188.378) (float-vector -320.0 429.546 -184.333) (float-vector 320.0 429.546 -184.333)))
         (instance face :init :vertices (list (float-vector 320.0 409.741 -187.117) (float-vector -320.0 409.741 -187.117) (float-vector -320.0 420.016 -188.378) (float-vector 320.0 420.016 -188.378)))
         (instance face :init :vertices (list (float-vector 320.0 401.473 -180.886) (float-vector -320.0 401.473 -180.886) (float-vector -320.0 409.741 -187.117) (float-vector 320.0 409.741 -187.117)))
         (instance face :init :vertices (list (float-vector 320.0 397.427 -171.356) (float-vector -320.0 397.427 -171.356) (float-vector -320.0 401.473 -180.886) (float-vector 320.0 401.473 -180.886)))
         (instance face :init :vertices (list (float-vector 320.0 398.689 -161.081) (float-vector -320.0 398.689 -161.081) (float-vector -320.0 397.427 -171.356) (float-vector 320.0 397.427 -171.356)))
         (instance face :init :vertices (list (float-vector 320.0 404.92 -152.813) (float-vector -320.0 404.92 -152.813) (float-vector -320.0 398.689 -161.081) (float-vector 320.0 398.689 -161.081)))
         (instance face :init :vertices (list (float-vector 320.0 414.449 -148.768) (float-vector -320.0 414.449 -148.768) (float-vector -320.0 404.92 -152.813) (float-vector 320.0 404.92 -152.813)))
         (instance face :init :vertices (list (float-vector 320.0 424.725 -150.029) (float-vector -320.0 424.725 -150.029) (float-vector -320.0 414.449 -148.768) (float-vector 320.0 414.449 -148.768)))
         (instance face :init :vertices (list (float-vector 320.0 432.993 -156.26) (float-vector -320.0 432.993 -156.26) (float-vector -320.0 424.725 -150.029) (float-vector 320.0 424.725 -150.029)))
         (instance face :init :vertices (list (float-vector 320.0 437.038 -165.79) (float-vector -320.0 437.038 -165.79) (float-vector -320.0 432.993 -156.26) (float-vector 320.0 432.993 -156.26)))
         (instance face :init :vertices (list (float-vector 320.0 435.776 -176.065) (float-vector -320.0 435.776 -176.065) (float-vector -320.0 437.038 -165.79) (float-vector 320.0 437.038 -165.79)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 320.0 -437.038 -165.79) (float-vector 320.0 -435.776 -176.065) (float-vector 320.0 -429.546 -184.333) (float-vector 320.0 -420.016 -188.378) (float-vector 320.0 -409.741 -187.117) (float-vector 320.0 -401.473 -180.886) (float-vector 320.0 -397.427 -171.356) (float-vector 320.0 -398.689 -161.081) (float-vector 320.0 -404.92 -152.813) (float-vector 320.0 -414.449 -148.768) (float-vector 320.0 -424.725 -150.029) (float-vector 320.0 -432.993 -156.26)))
         (instance face :init :vertices (list (float-vector -320.0 -435.776 -176.065) (float-vector -320.0 -437.038 -165.79) (float-vector -320.0 -432.993 -156.26) (float-vector -320.0 -424.725 -150.029) (float-vector -320.0 -414.449 -148.768) (float-vector -320.0 -404.92 -152.813) (float-vector -320.0 -398.689 -161.081) (float-vector -320.0 -397.427 -171.356) (float-vector -320.0 -401.473 -180.886) (float-vector -320.0 -409.741 -187.117) (float-vector -320.0 -420.016 -188.378) (float-vector -320.0 -429.546 -184.333)))
         (instance face :init :vertices (list (float-vector 320.0 -437.038 -165.79) (float-vector -320.0 -437.038 -165.79) (float-vector -320.0 -435.776 -176.065) (float-vector 320.0 -435.776 -176.065)))
         (instance face :init :vertices (list (float-vector 320.0 -432.993 -156.26) (float-vector -320.0 -432.993 -156.26) (float-vector -320.0 -437.038 -165.79) (float-vector 320.0 -437.038 -165.79)))
         (instance face :init :vertices (list (float-vector 320.0 -424.725 -150.029) (float-vector -320.0 -424.725 -150.029) (float-vector -320.0 -432.993 -156.26) (float-vector 320.0 -432.993 -156.26)))
         (instance face :init :vertices (list (float-vector 320.0 -414.449 -148.768) (float-vector -320.0 -414.449 -148.768) (float-vector -320.0 -424.725 -150.029) (float-vector 320.0 -424.725 -150.029)))
         (instance face :init :vertices (list (float-vector 320.0 -404.92 -152.813) (float-vector -320.0 -404.92 -152.813) (float-vector -320.0 -414.449 -148.768) (float-vector 320.0 -414.449 -148.768)))
         (instance face :init :vertices (list (float-vector 320.0 -398.689 -161.081) (float-vector -320.0 -398.689 -161.081) (float-vector -320.0 -404.92 -152.813) (float-vector 320.0 -404.92 -152.813)))
         (instance face :init :vertices (list (float-vector 320.0 -397.427 -171.356) (float-vector -320.0 -397.427 -171.356) (float-vector -320.0 -398.689 -161.081) (float-vector 320.0 -398.689 -161.081)))
         (instance face :init :vertices (list (float-vector 320.0 -401.473 -180.886) (float-vector -320.0 -401.473 -180.886) (float-vector -320.0 -397.427 -171.356) (float-vector 320.0 -397.427 -171.356)))
         (instance face :init :vertices (list (float-vector 320.0 -409.741 -187.117) (float-vector -320.0 -409.741 -187.117) (float-vector -320.0 -401.473 -180.886) (float-vector 320.0 -401.473 -180.886)))
         (instance face :init :vertices (list (float-vector 320.0 -420.016 -188.378) (float-vector -320.0 -420.016 -188.378) (float-vector -320.0 -409.741 -187.117) (float-vector 320.0 -409.741 -187.117)))
         (instance face :init :vertices (list (float-vector 320.0 -429.546 -184.333) (float-vector -320.0 -429.546 -184.333) (float-vector -320.0 -420.016 -188.378) (float-vector 320.0 -420.016 -188.378)))
         (instance face :init :vertices (list (float-vector 320.0 -435.776 -176.065) (float-vector -320.0 -435.776 -176.065) (float-vector -320.0 -429.546 -184.333) (float-vector 320.0 -429.546 -184.333)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :darkgoldenrod2)
     (send (elt bc 1) :set-color :gray20)
     (send (elt bc 2) :set-color :gray20)
     (send (elt bc 3) :set-color :gray20)
     (send (elt bc 4) :set-color :gray20)
     (send (elt bc 5) :set-color :gray20)
     (send (elt bc 6) :set-color :gray20)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :room610-x-leg-desk-bodyset2 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint


     ;; init-ending 
     (setq links (list blink0))
     (setq joint-list (list))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:handle (&rest args) (forward-message-to-all (list ) args))
  (:attention (&rest args) (forward-message-to-all (list ) args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun room610-x-leg-desk (&rest args) (instance* room610-x-leg-desk-object :init args))
;; (format *error-output* "(instance room610-x-leg-desk-object :init) for generating model~%")
