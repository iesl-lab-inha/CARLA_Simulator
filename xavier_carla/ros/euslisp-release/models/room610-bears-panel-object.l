;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass room610-bears-panel-object
  :super cascaded-link
  :slots (sensors
         ))
(defmethod room610-bears-panel-object
  (:init
   (&rest args &key (name "room610-bears-panel") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :room610-bears-panel-bodyset2
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -15.0 -167.321 530.0) (float-vector -15.0 -170.0 540.0) (float-vector -15.0 -160.622 575.0) (float-vector -15.0 -135.0 600.622) (float-vector -15.0 -100.0 610.0) (float-vector -15.0 -65.0 600.622) (float-vector -15.0 -39.3782 575.0) (float-vector -15.0 -30.0 540.0) (float-vector -15.0 -32.6795 530.0)))
         (instance face :init :vertices (list (float-vector -15.0 -167.321 530.0) (float-vector 15.0 -167.321 530.0) (float-vector 15.0 -170.0 540.0) (float-vector -15.0 -170.0 540.0)))
         (instance face :init :vertices (list (float-vector 15.0 -167.321 530.0) (float-vector 15.0 -32.6795 530.0) (float-vector 15.0 -30.0 540.0) (float-vector 15.0 -39.3782 575.0) (float-vector 15.0 -65.0 600.622) (float-vector 15.0 -100.0 610.0) (float-vector 15.0 -135.0 600.622) (float-vector 15.0 -160.622 575.0) (float-vector 15.0 -170.0 540.0)))
         (instance face :init :vertices (list (float-vector 15.0 -160.622 575.0) (float-vector -15.0 -160.622 575.0) (float-vector -15.0 -170.0 540.0) (float-vector 15.0 -170.0 540.0)))
         (instance face :init :vertices (list (float-vector 15.0 -135.0 600.622) (float-vector -15.0 -135.0 600.622) (float-vector -15.0 -160.622 575.0) (float-vector 15.0 -160.622 575.0)))
         (instance face :init :vertices (list (float-vector 15.0 -100.0 610.0) (float-vector -15.0 -100.0 610.0) (float-vector -15.0 -135.0 600.622) (float-vector 15.0 -135.0 600.622)))
         (instance face :init :vertices (list (float-vector 15.0 -65.0 600.622) (float-vector -15.0 -65.0 600.622) (float-vector -15.0 -100.0 610.0) (float-vector 15.0 -100.0 610.0)))
         (instance face :init :vertices (list (float-vector 15.0 -39.3782 575.0) (float-vector -15.0 -39.3782 575.0) (float-vector -15.0 -65.0 600.622) (float-vector 15.0 -65.0 600.622)))
         (instance face :init :vertices (list (float-vector 15.0 -30.0 540.0) (float-vector -15.0 -30.0 540.0) (float-vector -15.0 -39.3782 575.0) (float-vector 15.0 -39.3782 575.0)))
         (instance face :init :vertices (list (float-vector 15.0 -32.6795 530.0) (float-vector -15.0 -32.6795 530.0) (float-vector -15.0 -30.0 540.0) (float-vector 15.0 -30.0 540.0)))
         (instance face :init :vertices (list (float-vector -15.0 232.679 530.0) (float-vector -15.0 239.378 555.0) (float-vector -15.0 265.0 580.622) (float-vector -15.0 300.0 590.0) (float-vector -15.0 335.0 580.622) (float-vector -15.0 360.622 555.0) (float-vector -15.0 367.321 530.0)))
         (instance face :init :vertices (list (float-vector -15.0 232.679 530.0) (float-vector 15.0 232.679 530.0) (float-vector 15.0 239.378 555.0) (float-vector -15.0 239.378 555.0)))
         (instance face :init :vertices (list (float-vector 15.0 232.679 530.0) (float-vector 15.0 367.321 530.0) (float-vector 15.0 360.622 555.0) (float-vector 15.0 335.0 580.622) (float-vector 15.0 300.0 590.0) (float-vector 15.0 265.0 580.622) (float-vector 15.0 239.378 555.0)))
         (instance face :init :vertices (list (float-vector 15.0 265.0 580.622) (float-vector -15.0 265.0 580.622) (float-vector -15.0 239.378 555.0) (float-vector 15.0 239.378 555.0)))
         (instance face :init :vertices (list (float-vector 15.0 300.0 590.0) (float-vector -15.0 300.0 590.0) (float-vector -15.0 265.0 580.622) (float-vector 15.0 265.0 580.622)))
         (instance face :init :vertices (list (float-vector 15.0 335.0 580.622) (float-vector -15.0 335.0 580.622) (float-vector -15.0 300.0 590.0) (float-vector 15.0 300.0 590.0)))
         (instance face :init :vertices (list (float-vector 15.0 360.622 555.0) (float-vector -15.0 360.622 555.0) (float-vector -15.0 335.0 580.622) (float-vector 15.0 335.0 580.622)))
         (instance face :init :vertices (list (float-vector 15.0 367.321 530.0) (float-vector -15.0 367.321 530.0) (float-vector -15.0 360.622 555.0) (float-vector 15.0 360.622 555.0)))
         (instance face :init :vertices (list (float-vector 15.0 -230.0 200.0) (float-vector 15.0 -230.0 430.0) (float-vector 15.0 -370.0 430.0) (float-vector 15.0 -370.0 200.0)))
         (instance face :init :vertices (list (float-vector 15.0 -230.0 200.0) (float-vector -15.0 -230.0 200.0) (float-vector -15.0 -230.0 430.0) (float-vector 15.0 -230.0 430.0)))
         (instance face :init :vertices (list (float-vector 15.0 -370.0 430.0) (float-vector -15.0 -370.0 430.0) (float-vector -15.0 -370.0 200.0) (float-vector 15.0 -370.0 200.0)))
         (instance face :init :vertices (list (float-vector -15.0 -230.0 200.0) (float-vector -15.0 -370.0 200.0) (float-vector -15.0 -370.0 430.0) (float-vector -15.0 -230.0 430.0)))
         (instance face :init :vertices (list (float-vector 15.0 170.0 200.0) (float-vector 15.0 170.0 430.0) (float-vector 15.0 30.0 430.0) (float-vector 15.0 30.0 200.0)))
         (instance face :init :vertices (list (float-vector 15.0 170.0 200.0) (float-vector -15.0 170.0 200.0) (float-vector -15.0 170.0 430.0) (float-vector 15.0 170.0 430.0)))
         (instance face :init :vertices (list (float-vector 15.0 30.0 430.0) (float-vector -15.0 30.0 430.0) (float-vector -15.0 30.0 200.0) (float-vector 15.0 30.0 200.0)))
         (instance face :init :vertices (list (float-vector -15.0 170.0 200.0) (float-vector -15.0 30.0 200.0) (float-vector -15.0 30.0 430.0) (float-vector -15.0 170.0 430.0)))
         (instance face :init :vertices (list (float-vector -25.0 -400.0 0.0) (float-vector -25.0 -400.0 200.0) (float-vector -25.0 400.0 200.0) (float-vector -25.0 400.0 0.0)))
         (instance face :init :vertices (list (float-vector -25.0 -400.0 0.0) (float-vector 25.0 -400.0 0.0) (float-vector 25.0 -400.0 200.0) (float-vector -25.0 -400.0 200.0)))
         (instance face :init :vertices (list (float-vector 25.0 -400.0 0.0) (float-vector 25.0 400.0 0.0) (float-vector 25.0 400.0 200.0) (float-vector 25.0 -400.0 200.0)))
         (instance face :init :vertices (list (float-vector 25.0 400.0 200.0) (float-vector -25.0 400.0 200.0) (float-vector -25.0 -400.0 200.0) (float-vector 25.0 -400.0 200.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector -15.0 230.0 200.0) (float-vector -15.0 370.0 200.0) (float-vector 15.0 370.0 200.0) (float-vector 15.0 230.0 200.0)))
         (instance hole :init :vertices (list (float-vector -15.0 -170.0 200.0) (float-vector -15.0 -30.0 200.0) (float-vector 15.0 -30.0 200.0) (float-vector 15.0 -170.0 200.0)))
         (instance hole :init :vertices (list (float-vector -15.0 30.0 200.0) (float-vector -15.0 170.0 200.0) (float-vector 15.0 170.0 200.0) (float-vector 15.0 30.0 200.0)))
         (instance hole :init :vertices (list (float-vector -15.0 -370.0 200.0) (float-vector -15.0 -230.0 200.0) (float-vector 15.0 -230.0 200.0) (float-vector 15.0 -370.0 200.0)))
))
         (instance face :init :vertices (list (float-vector 25.0 400.0 0.0) (float-vector -25.0 400.0 0.0) (float-vector -25.0 400.0 200.0) (float-vector 25.0 400.0 200.0)))
         (instance face :init :vertices (list (float-vector -25.0 400.0 0.0) (float-vector 25.0 400.0 0.0) (float-vector 25.0 -400.0 0.0) (float-vector -25.0 -400.0 0.0)))
         (instance face :init :vertices (list (float-vector -15.0 230.0 200.0) (float-vector -15.0 230.0 430.0) (float-vector -15.0 370.0 430.0) (float-vector -15.0 370.0 200.0)))
         (instance face :init :vertices (list (float-vector 15.0 230.0 200.0) (float-vector 15.0 230.0 430.0) (float-vector -15.0 230.0 430.0) (float-vector -15.0 230.0 200.0)))
         (instance face :init :vertices (list (float-vector -15.0 370.0 430.0) (float-vector 15.0 370.0 430.0) (float-vector 15.0 370.0 200.0) (float-vector -15.0 370.0 200.0)))
         (instance face :init :vertices (list (float-vector 15.0 370.0 430.0) (float-vector 15.0 230.0 430.0) (float-vector 15.0 230.0 200.0) (float-vector 15.0 370.0 200.0)))
         (instance face :init :vertices (list (float-vector -15.0 -170.0 200.0) (float-vector -15.0 -170.0 430.0) (float-vector -15.0 -30.0 430.0) (float-vector -15.0 -30.0 200.0)))
         (instance face :init :vertices (list (float-vector 15.0 -170.0 200.0) (float-vector 15.0 -170.0 430.0) (float-vector -15.0 -170.0 430.0) (float-vector -15.0 -170.0 200.0)))
         (instance face :init :vertices (list (float-vector -15.0 -30.0 430.0) (float-vector 15.0 -30.0 430.0) (float-vector 15.0 -30.0 200.0) (float-vector -15.0 -30.0 200.0)))
         (instance face :init :vertices (list (float-vector 15.0 -30.0 430.0) (float-vector 15.0 -170.0 430.0) (float-vector 15.0 -170.0 200.0) (float-vector 15.0 -30.0 200.0)))
         (instance face :init :vertices (list (float-vector -25.0 -400.0 430.0) (float-vector -25.0 -400.0 530.0) (float-vector -25.0 400.0 530.0) (float-vector -25.0 400.0 430.0)))
         (instance face :init :vertices (list (float-vector -25.0 -400.0 430.0) (float-vector 25.0 -400.0 430.0) (float-vector 25.0 -400.0 530.0) (float-vector -25.0 -400.0 530.0)))
         (instance face :init :vertices (list (float-vector 25.0 -400.0 430.0) (float-vector 25.0 400.0 430.0) (float-vector 25.0 400.0 530.0) (float-vector 25.0 -400.0 530.0)))
         (instance face :init :vertices (list (float-vector 25.0 400.0 530.0) (float-vector -25.0 400.0 530.0) (float-vector -25.0 -400.0 530.0) (float-vector 25.0 -400.0 530.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector -15.0 167.321 530.0) (float-vector 15.0 167.321 530.0) (float-vector 15.0 32.6795 530.0) (float-vector -15.0 32.6795 530.0)))
         (instance hole :init :vertices (list (float-vector -15.0 367.321 530.0) (float-vector 15.0 367.321 530.0) (float-vector 15.0 232.679 530.0) (float-vector -15.0 232.679 530.0)))
         (instance hole :init :vertices (list (float-vector -15.0 -32.6795 530.0) (float-vector 15.0 -32.6795 530.0) (float-vector 15.0 -167.321 530.0) (float-vector -15.0 -167.321 530.0)))
         (instance hole :init :vertices (list (float-vector -15.0 -367.321 530.0) (float-vector -15.0 -232.679 530.0) (float-vector 15.0 -232.679 530.0) (float-vector 15.0 -367.321 530.0)))
))
         (instance face :init :vertices (list (float-vector 25.0 400.0 430.0) (float-vector -25.0 400.0 430.0) (float-vector -25.0 400.0 530.0) (float-vector 25.0 400.0 530.0)))
         (instance face :init :vertices (list (float-vector -25.0 400.0 430.0) (float-vector 25.0 400.0 430.0) (float-vector 25.0 -400.0 430.0) (float-vector -25.0 -400.0 430.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 15.0 -170.0 430.0) (float-vector 15.0 -30.0 430.0) (float-vector -15.0 -30.0 430.0) (float-vector -15.0 -170.0 430.0)))
         (instance hole :init :vertices (list (float-vector 15.0 230.0 430.0) (float-vector 15.0 370.0 430.0) (float-vector -15.0 370.0 430.0) (float-vector -15.0 230.0 430.0)))
         (instance hole :init :vertices (list (float-vector -15.0 170.0 430.0) (float-vector -15.0 30.0 430.0) (float-vector 15.0 30.0 430.0) (float-vector 15.0 170.0 430.0)))
         (instance hole :init :vertices (list (float-vector -15.0 -230.0 430.0) (float-vector -15.0 -370.0 430.0) (float-vector 15.0 -370.0 430.0) (float-vector 15.0 -230.0 430.0)))
))
         (instance face :init :vertices (list (float-vector -15.0 167.321 530.0) (float-vector -15.0 170.0 540.0) (float-vector 15.0 170.0 540.0) (float-vector 15.0 167.321 530.0)))
         (instance face :init :vertices (list (float-vector -15.0 170.0 540.0) (float-vector -15.0 160.622 575.0) (float-vector 15.0 160.622 575.0) (float-vector 15.0 170.0 540.0)))
         (instance face :init :vertices (list (float-vector -15.0 160.622 575.0) (float-vector -15.0 135.0 600.622) (float-vector 15.0 135.0 600.622) (float-vector 15.0 160.622 575.0)))
         (instance face :init :vertices (list (float-vector -15.0 135.0 600.622) (float-vector -15.0 100.0 610.0) (float-vector 15.0 100.0 610.0) (float-vector 15.0 135.0 600.622)))
         (instance face :init :vertices (list (float-vector -15.0 100.0 610.0) (float-vector -15.0 65.0 600.622) (float-vector 15.0 65.0 600.622) (float-vector 15.0 100.0 610.0)))
         (instance face :init :vertices (list (float-vector -15.0 65.0 600.622) (float-vector -15.0 39.3782 575.0) (float-vector 15.0 39.3782 575.0) (float-vector 15.0 65.0 600.622)))
         (instance face :init :vertices (list (float-vector -15.0 39.3782 575.0) (float-vector -15.0 30.0 540.0) (float-vector 15.0 30.0 540.0) (float-vector 15.0 39.3782 575.0)))
         (instance face :init :vertices (list (float-vector 15.0 30.0 540.0) (float-vector 15.0 32.6795 530.0) (float-vector 15.0 167.321 530.0) (float-vector 15.0 170.0 540.0) (float-vector 15.0 160.622 575.0) (float-vector 15.0 135.0 600.622) (float-vector 15.0 100.0 610.0) (float-vector 15.0 65.0 600.622) (float-vector 15.0 39.3782 575.0)))
         (instance face :init :vertices (list (float-vector -15.0 30.0 540.0) (float-vector -15.0 32.6795 530.0) (float-vector 15.0 32.6795 530.0) (float-vector 15.0 30.0 540.0)))
         (instance face :init :vertices (list (float-vector -15.0 32.6795 530.0) (float-vector -15.0 30.0 540.0) (float-vector -15.0 39.3782 575.0) (float-vector -15.0 65.0 600.622) (float-vector -15.0 100.0 610.0) (float-vector -15.0 135.0 600.622) (float-vector -15.0 160.622 575.0) (float-vector -15.0 170.0 540.0) (float-vector -15.0 167.321 530.0)))
         (instance face :init :vertices (list (float-vector -15.0 -232.679 530.0) (float-vector -15.0 -239.378 555.0) (float-vector 15.0 -239.378 555.0) (float-vector 15.0 -232.679 530.0)))
         (instance face :init :vertices (list (float-vector -15.0 -239.378 555.0) (float-vector -15.0 -265.0 580.622) (float-vector 15.0 -265.0 580.622) (float-vector 15.0 -239.378 555.0)))
         (instance face :init :vertices (list (float-vector -15.0 -265.0 580.622) (float-vector -15.0 -300.0 590.0) (float-vector 15.0 -300.0 590.0) (float-vector 15.0 -265.0 580.622)))
         (instance face :init :vertices (list (float-vector -15.0 -300.0 590.0) (float-vector -15.0 -335.0 580.622) (float-vector 15.0 -335.0 580.622) (float-vector 15.0 -300.0 590.0)))
         (instance face :init :vertices (list (float-vector -15.0 -335.0 580.622) (float-vector -15.0 -360.622 555.0) (float-vector 15.0 -360.622 555.0) (float-vector 15.0 -335.0 580.622)))
         (instance face :init :vertices (list (float-vector 15.0 -360.622 555.0) (float-vector 15.0 -367.321 530.0) (float-vector 15.0 -232.679 530.0) (float-vector 15.0 -239.378 555.0) (float-vector 15.0 -265.0 580.622) (float-vector 15.0 -300.0 590.0) (float-vector 15.0 -335.0 580.622)))
         (instance face :init :vertices (list (float-vector -15.0 -360.622 555.0) (float-vector -15.0 -367.321 530.0) (float-vector 15.0 -367.321 530.0) (float-vector 15.0 -360.622 555.0)))
         (instance face :init :vertices (list (float-vector -15.0 -367.321 530.0) (float-vector -15.0 -360.622 555.0) (float-vector -15.0 -335.0 580.622) (float-vector -15.0 -300.0 590.0) (float-vector -15.0 -265.0 580.622) (float-vector -15.0 -239.378 555.0) (float-vector -15.0 -232.679 530.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :yellow)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :room610-bears-panel-bodyset2 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint


     ;; init-ending 
     (setq links (list blink0))
     (setq joint-list (list))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:handle (&rest args) (forward-message-to-all (list ) args))
  (:attention (&rest args) (forward-message-to-all (list ) args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun room610-bears-panel (&rest args) (instance* room610-bears-panel-object :init args))
;; (format *error-output* "(instance room610-bears-panel-object :init) for generating model~%")
