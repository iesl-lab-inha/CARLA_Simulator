;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass itoki-900-closet-object
  :super cascaded-link
  :slots (sensors
         handle0
         joint0 joint1 ))
(defmethod itoki-900-closet-object
  (:init
   (&rest args &key (name "itoki-900-closet") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0 blink1 blink2
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :root
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 205.0 450.0 1040.0) (float-vector -225.0 450.0 1040.0) (float-vector -225.0 -450.0 1040.0) (float-vector 205.0 -450.0 1040.0)))
         (instance face :init :vertices (list (float-vector -225.0 450.0 1020.0) (float-vector 205.0 450.0 1020.0) (float-vector 205.0 -450.0 1020.0) (float-vector -225.0 -450.0 1020.0)))
         (instance face :init :vertices (list (float-vector 205.0 450.0 1040.0) (float-vector 205.0 450.0 1020.0) (float-vector -225.0 450.0 1020.0) (float-vector -225.0 450.0 1040.0)))
         (instance face :init :vertices (list (float-vector 205.0 -450.0 1040.0) (float-vector 205.0 -450.0 1020.0) (float-vector 205.0 450.0 1020.0) (float-vector 205.0 450.0 1040.0)))
         (instance face :init :vertices (list (float-vector -225.0 -450.0 1040.0) (float-vector -225.0 -450.0 1020.0) (float-vector 205.0 -450.0 1020.0) (float-vector 205.0 -450.0 1040.0)))
         (instance face :init :vertices (list (float-vector -225.0 450.0 1040.0) (float-vector -225.0 450.0 1020.0) (float-vector -225.0 -450.0 1020.0) (float-vector -225.0 -450.0 1040.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 205.0 450.0 20.0) (float-vector -225.0 450.0 20.0) (float-vector -225.0 -450.0 20.0) (float-vector 205.0 -450.0 20.0)))
         (instance face :init :vertices (list (float-vector -225.0 450.0 0.0) (float-vector 205.0 450.0 0.0) (float-vector 205.0 -450.0 0.0) (float-vector -225.0 -450.0 0.0)))
         (instance face :init :vertices (list (float-vector 205.0 450.0 20.0) (float-vector 205.0 450.0 0.0) (float-vector -225.0 450.0 0.0) (float-vector -225.0 450.0 20.0)))
         (instance face :init :vertices (list (float-vector 205.0 -450.0 20.0) (float-vector 205.0 -450.0 0.0) (float-vector 205.0 450.0 0.0) (float-vector 205.0 450.0 20.0)))
         (instance face :init :vertices (list (float-vector -225.0 -450.0 20.0) (float-vector -225.0 -450.0 0.0) (float-vector 205.0 -450.0 0.0) (float-vector 205.0 -450.0 20.0)))
         (instance face :init :vertices (list (float-vector -225.0 450.0 20.0) (float-vector -225.0 450.0 0.0) (float-vector -225.0 -450.0 0.0) (float-vector -225.0 -450.0 20.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -205.0 430.0 1020.0) (float-vector -225.0 430.0 1020.0) (float-vector -225.0 -430.0 1020.0) (float-vector -205.0 -430.0 1020.0)))
         (instance face :init :vertices (list (float-vector -225.0 430.0 20.0) (float-vector -205.0 430.0 20.0) (float-vector -205.0 -430.0 20.0) (float-vector -225.0 -430.0 20.0)))
         (instance face :init :vertices (list (float-vector -205.0 430.0 1020.0) (float-vector -205.0 430.0 20.0) (float-vector -225.0 430.0 20.0) (float-vector -225.0 430.0 1020.0)))
         (instance face :init :vertices (list (float-vector -205.0 -430.0 1020.0) (float-vector -205.0 -430.0 20.0) (float-vector -205.0 430.0 20.0) (float-vector -205.0 430.0 1020.0)))
         (instance face :init :vertices (list (float-vector -225.0 -430.0 1020.0) (float-vector -225.0 -430.0 20.0) (float-vector -205.0 -430.0 20.0) (float-vector -205.0 -430.0 1020.0)))
         (instance face :init :vertices (list (float-vector -225.0 430.0 1020.0) (float-vector -225.0 430.0 20.0) (float-vector -225.0 -430.0 20.0) (float-vector -225.0 -430.0 1020.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 205.0 450.0 1020.0) (float-vector -225.0 450.0 1020.0) (float-vector -225.0 430.0 1020.0) (float-vector 205.0 430.0 1020.0)))
         (instance face :init :vertices (list (float-vector -225.0 450.0 20.0) (float-vector 205.0 450.0 20.0) (float-vector 205.0 430.0 20.0) (float-vector -225.0 430.0 20.0)))
         (instance face :init :vertices (list (float-vector 205.0 450.0 1020.0) (float-vector 205.0 450.0 20.0) (float-vector -225.0 450.0 20.0) (float-vector -225.0 450.0 1020.0)))
         (instance face :init :vertices (list (float-vector 205.0 430.0 1020.0) (float-vector 205.0 430.0 20.0) (float-vector 205.0 450.0 20.0) (float-vector 205.0 450.0 1020.0)))
         (instance face :init :vertices (list (float-vector -225.0 430.0 1020.0) (float-vector -225.0 430.0 20.0) (float-vector 205.0 430.0 20.0) (float-vector 205.0 430.0 1020.0)))
         (instance face :init :vertices (list (float-vector -225.0 450.0 1020.0) (float-vector -225.0 450.0 20.0) (float-vector -225.0 430.0 20.0) (float-vector -225.0 430.0 1020.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 205.0 -430.0 1020.0) (float-vector -225.0 -430.0 1020.0) (float-vector -225.0 -450.0 1020.0) (float-vector 205.0 -450.0 1020.0)))
         (instance face :init :vertices (list (float-vector -225.0 -430.0 20.0) (float-vector 205.0 -430.0 20.0) (float-vector 205.0 -450.0 20.0) (float-vector -225.0 -450.0 20.0)))
         (instance face :init :vertices (list (float-vector 205.0 -430.0 1020.0) (float-vector 205.0 -430.0 20.0) (float-vector -225.0 -430.0 20.0) (float-vector -225.0 -430.0 1020.0)))
         (instance face :init :vertices (list (float-vector 205.0 -450.0 1020.0) (float-vector 205.0 -450.0 20.0) (float-vector 205.0 -430.0 20.0) (float-vector 205.0 -430.0 1020.0)))
         (instance face :init :vertices (list (float-vector -225.0 -450.0 1020.0) (float-vector -225.0 -450.0 20.0) (float-vector 205.0 -450.0 20.0) (float-vector 205.0 -450.0 1020.0)))
         (instance face :init :vertices (list (float-vector -225.0 -430.0 1020.0) (float-vector -225.0 -430.0 20.0) (float-vector -225.0 -450.0 20.0) (float-vector -225.0 -450.0 1020.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 205.0 430.0 700.0) (float-vector -205.0 430.0 700.0) (float-vector -205.0 -430.0 700.0) (float-vector 205.0 -430.0 700.0)))
         (instance face :init :vertices (list (float-vector -205.0 430.0 680.0) (float-vector 205.0 430.0 680.0) (float-vector 205.0 -430.0 680.0) (float-vector -205.0 -430.0 680.0)))
         (instance face :init :vertices (list (float-vector 205.0 430.0 700.0) (float-vector 205.0 430.0 680.0) (float-vector -205.0 430.0 680.0) (float-vector -205.0 430.0 700.0)))
         (instance face :init :vertices (list (float-vector 205.0 -430.0 700.0) (float-vector 205.0 -430.0 680.0) (float-vector 205.0 430.0 680.0) (float-vector 205.0 430.0 700.0)))
         (instance face :init :vertices (list (float-vector -205.0 -430.0 700.0) (float-vector -205.0 -430.0 680.0) (float-vector 205.0 -430.0 680.0) (float-vector 205.0 -430.0 700.0)))
         (instance face :init :vertices (list (float-vector -205.0 430.0 700.0) (float-vector -205.0 430.0 680.0) (float-vector -205.0 -430.0 680.0) (float-vector -205.0 -430.0 700.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 205.0 430.0 360.0) (float-vector -205.0 430.0 360.0) (float-vector -205.0 -430.0 360.0) (float-vector 205.0 -430.0 360.0)))
         (instance face :init :vertices (list (float-vector -205.0 430.0 340.0) (float-vector 205.0 430.0 340.0) (float-vector 205.0 -430.0 340.0) (float-vector -205.0 -430.0 340.0)))
         (instance face :init :vertices (list (float-vector 205.0 430.0 360.0) (float-vector 205.0 430.0 340.0) (float-vector -205.0 430.0 340.0) (float-vector -205.0 430.0 360.0)))
         (instance face :init :vertices (list (float-vector 205.0 -430.0 360.0) (float-vector 205.0 -430.0 340.0) (float-vector 205.0 430.0 340.0) (float-vector 205.0 430.0 360.0)))
         (instance face :init :vertices (list (float-vector -205.0 -430.0 360.0) (float-vector -205.0 -430.0 340.0) (float-vector 205.0 -430.0 340.0) (float-vector 205.0 -430.0 360.0)))
         (instance face :init :vertices (list (float-vector -205.0 430.0 360.0) (float-vector -205.0 430.0 340.0) (float-vector -205.0 -430.0 340.0) (float-vector -205.0 -430.0 360.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :beige)
     (send (elt bc 1) :set-color :beige)
     (send (elt bc 2) :set-color :beige)
     (send (elt bc 3) :set-color :beige)
     (send (elt bc 4) :set-color :beige)
     (send (elt bc 5) :set-color :beige)
     (send (elt bc 6) :set-color :beige)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :root :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :itoki-900-closet-bodyset2
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 0.0 10.0 1000.0) (float-vector -20.0 10.0 1000.0) (float-vector -20.0 -440.0 1000.0) (float-vector 0.0 -440.0 1000.0)))
         (instance face :init :vertices (list (float-vector -20.0 10.0 0.0) (float-vector 0.0 10.0 0.0) (float-vector 0.0 -440.0 0.0) (float-vector -20.0 -440.0 0.0)))
         (instance face :init :vertices (list (float-vector 0.0 10.0 1000.0) (float-vector 0.0 10.0 0.0) (float-vector -20.0 10.0 0.0) (float-vector -20.0 10.0 1000.0)))
         (instance face :init :vertices (list (float-vector 0.0 -440.0 1000.0) (float-vector 0.0 -440.0 0.0) (float-vector 0.0 10.0 0.0) (float-vector 0.0 10.0 1000.0)))
         (instance face :init :vertices (list (float-vector -20.0 -440.0 1000.0) (float-vector -20.0 -440.0 0.0) (float-vector 0.0 -440.0 0.0) (float-vector 0.0 -440.0 1000.0)))
         (instance face :init :vertices (list (float-vector -20.0 10.0 1000.0) (float-vector -20.0 10.0 0.0) (float-vector -20.0 -440.0 0.0) (float-vector -20.0 -440.0 1000.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :beige)
     (setq blink2 (instance bodyset-link :init (make-cascoords) :bodies bc :name :itoki-900-closet-bodyset2 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :itoki-900-closet-bodyset3
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 0.0 440.0 1000.0) (float-vector -20.0 440.0 1000.0) (float-vector -20.0 -10.0 1000.0) (float-vector 0.0 -10.0 1000.0)))
         (instance face :init :vertices (list (float-vector -20.0 440.0 0.0) (float-vector 0.0 440.0 0.0) (float-vector 0.0 -10.0 0.0) (float-vector -20.0 -10.0 0.0)))
         (instance face :init :vertices (list (float-vector 0.0 440.0 1000.0) (float-vector 0.0 440.0 0.0) (float-vector -20.0 440.0 0.0) (float-vector -20.0 440.0 1000.0)))
         (instance face :init :vertices (list (float-vector 0.0 -10.0 1000.0) (float-vector 0.0 -10.0 0.0) (float-vector 0.0 440.0 0.0) (float-vector 0.0 440.0 1000.0)))
         (instance face :init :vertices (list (float-vector -20.0 -10.0 1000.0) (float-vector -20.0 -10.0 0.0) (float-vector 0.0 -10.0 0.0) (float-vector 0.0 -10.0 1000.0)))
         (instance face :init :vertices (list (float-vector -20.0 440.0 1000.0) (float-vector -20.0 440.0 0.0) (float-vector -20.0 -10.0 0.0) (float-vector -20.0 -10.0 1000.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :beige)
     (setq blink1 (instance bodyset-link :init (make-cascoords) :bodies bc :name :itoki-900-closet-bodyset3 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send blink1 :newcoords (make-coords :pos (float-vector 225.0 -440.0 20.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink1)
     (send blink2 :newcoords (make-coords :pos (float-vector 225.0 440.0 20.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink2)
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     ;; definition of :door-left
     (setq joint0 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink1 :name :door-left :axis :-z
			     :min    0.0 :max   90.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :door-right
     (setq joint1 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink2 :name :door-right :axis :z 
			     :min    0.0 :max   90.0 :max-joint-velocity 5 :max-joint-torque 100))


     ;; definition of :handle
     (setq handle0 (make-cascoords :pos (float-vector 0.0 0.0 0.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name "handle0"))
     (send blink0 :assoc handle0)

     ;; init-ending 
     (setq links (list blink0 blink1 blink2))
     (setq joint-list (list joint0 joint1))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:door-left (&rest args) (forward-message-to joint0 args))
  (:door-right (&rest args) (forward-message-to joint1 args))
  (:handle (&rest args) (forward-message-to-all (list  handle0) args))
  (:handle-handle0 (&rest args) (forward-message-to handle0 args))
  (:attention (&rest args) (forward-message-to-all (list ) args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun itoki-900-closet (&rest args) (instance* itoki-900-closet-object :init args))
;; (format *error-output* "(instance itoki-900-closet-object :init) for generating model~%")
