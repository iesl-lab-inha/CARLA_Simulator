;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass dewalt-drill-object
  :super cascaded-link
  :slots (sensors
         ))
(defmethod dewalt-drill-object
  (:init
   (&rest args &key (name "dewalt-drill") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of 'dewalt-drill
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 23.0 -37.0 68.0) (float-vector 60.0 0.0 68.0) (float-vector 23.0 37.0 68.0) (float-vector -45.0 37.0 68.0) (float-vector -75.0 20.0 68.0) (float-vector -75.0 -20.0 68.0) (float-vector -45.0 -37.0 68.0)))
         (instance face :init :vertices (list (float-vector 60.0 0.0 0.0) (float-vector 23.0 -37.0 0.0) (float-vector -45.0 -37.0 0.0) (float-vector -75.0 -20.0 0.0) (float-vector -75.0 20.0 0.0) (float-vector -45.0 37.0 0.0) (float-vector 23.0 37.0 0.0)))
         (instance face :init :vertices (list (float-vector 23.0 -37.0 68.0) (float-vector 23.0 -37.0 0.0) (float-vector 60.0 0.0 0.0) (float-vector 60.0 0.0 68.0)))
         (instance face :init :vertices (list (float-vector -45.0 -37.0 68.0) (float-vector -45.0 -37.0 0.0) (float-vector 23.0 -37.0 0.0) (float-vector 23.0 -37.0 68.0)))
         (instance face :init :vertices (list (float-vector -75.0 -20.0 68.0) (float-vector -75.0 -20.0 0.0) (float-vector -45.0 -37.0 0.0) (float-vector -45.0 -37.0 68.0)))
         (instance face :init :vertices (list (float-vector -75.0 20.0 68.0) (float-vector -75.0 20.0 0.0) (float-vector -75.0 -20.0 0.0) (float-vector -75.0 -20.0 68.0)))
         (instance face :init :vertices (list (float-vector -45.0 37.0 68.0) (float-vector -45.0 37.0 0.0) (float-vector -75.0 20.0 0.0) (float-vector -75.0 20.0 68.0)))
         (instance face :init :vertices (list (float-vector 23.0 37.0 68.0) (float-vector 23.0 37.0 0.0) (float-vector -45.0 37.0 0.0) (float-vector -45.0 37.0 68.0)))
         (instance face :init :vertices (list (float-vector 60.0 0.0 68.0) (float-vector 60.0 0.0 0.0) (float-vector 23.0 37.0 0.0) (float-vector 23.0 37.0 68.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 24.2487 -14.0 200.0) (float-vector 28.0 0.0 200.0) (float-vector 24.2487 14.0 200.0) (float-vector 14.0 24.2487 200.0) (float-vector 1.421085e-14 28.0 200.0) (float-vector -14.0 24.2487 200.0) (float-vector -24.2487 14.0 200.0) (float-vector -28.0 2.842171e-14 200.0) (float-vector -24.2487 -14.0 200.0) (float-vector -14.0 -24.2487 200.0) (float-vector -4.440892e-14 -28.0 200.0) (float-vector 14.0 -24.2487 200.0)))
         (instance face :init :vertices (list (float-vector 28.0 0.0 68.0) (float-vector 24.2487 -14.0 68.0) (float-vector 14.0 -24.2487 68.0) (float-vector -4.440892e-14 -28.0 68.0) (float-vector -14.0 -24.2487 68.0) (float-vector -24.2487 -14.0 68.0) (float-vector -28.0 2.842171e-14 68.0) (float-vector -24.2487 14.0 68.0) (float-vector -14.0 24.2487 68.0) (float-vector 1.421085e-14 28.0 68.0) (float-vector 14.0 24.2487 68.0) (float-vector 24.2487 14.0 68.0)))
         (instance face :init :vertices (list (float-vector 24.2487 -14.0 200.0) (float-vector 24.2487 -14.0 68.0) (float-vector 28.0 0.0 68.0) (float-vector 28.0 0.0 200.0)))
         (instance face :init :vertices (list (float-vector 14.0 -24.2487 200.0) (float-vector 14.0 -24.2487 68.0) (float-vector 24.2487 -14.0 68.0) (float-vector 24.2487 -14.0 200.0)))
         (instance face :init :vertices (list (float-vector -4.440892e-14 -28.0 200.0) (float-vector -4.440892e-14 -28.0 68.0) (float-vector 14.0 -24.2487 68.0) (float-vector 14.0 -24.2487 200.0)))
         (instance face :init :vertices (list (float-vector -14.0 -24.2487 200.0) (float-vector -14.0 -24.2487 68.0) (float-vector -4.440892e-14 -28.0 68.0) (float-vector -4.440892e-14 -28.0 200.0)))
         (instance face :init :vertices (list (float-vector -24.2487 -14.0 200.0) (float-vector -24.2487 -14.0 68.0) (float-vector -14.0 -24.2487 68.0) (float-vector -14.0 -24.2487 200.0)))
         (instance face :init :vertices (list (float-vector -28.0 2.842171e-14 200.0) (float-vector -28.0 2.842171e-14 68.0) (float-vector -24.2487 -14.0 68.0) (float-vector -24.2487 -14.0 200.0)))
         (instance face :init :vertices (list (float-vector -24.2487 14.0 200.0) (float-vector -24.2487 14.0 68.0) (float-vector -28.0 2.842171e-14 68.0) (float-vector -28.0 2.842171e-14 200.0)))
         (instance face :init :vertices (list (float-vector -14.0 24.2487 200.0) (float-vector -14.0 24.2487 68.0) (float-vector -24.2487 14.0 68.0) (float-vector -24.2487 14.0 200.0)))
         (instance face :init :vertices (list (float-vector 1.421085e-14 28.0 200.0) (float-vector 1.421085e-14 28.0 68.0) (float-vector -14.0 24.2487 68.0) (float-vector -14.0 24.2487 200.0)))
         (instance face :init :vertices (list (float-vector 14.0 24.2487 200.0) (float-vector 14.0 24.2487 68.0) (float-vector 1.421085e-14 28.0 68.0) (float-vector 1.421085e-14 28.0 200.0)))
         (instance face :init :vertices (list (float-vector 24.2487 14.0 200.0) (float-vector 24.2487 14.0 68.0) (float-vector 14.0 24.2487 68.0) (float-vector 14.0 24.2487 200.0)))
         (instance face :init :vertices (list (float-vector 28.0 0.0 200.0) (float-vector 28.0 0.0 68.0) (float-vector 24.2487 14.0 68.0) (float-vector 24.2487 14.0 200.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 0.5 28.0 102.5) (float-vector -38.5 28.0 102.5) (float-vector -38.5 -28.0 102.5) (float-vector 0.5 -28.0 102.5)))
         (instance face :init :vertices (list (float-vector -38.5 28.0 67.5) (float-vector 0.5 28.0 67.5) (float-vector 0.5 -28.0 67.5) (float-vector -38.5 -28.0 67.5)))
         (instance face :init :vertices (list (float-vector 0.5 28.0 102.5) (float-vector 0.5 28.0 67.5) (float-vector -38.5 28.0 67.5) (float-vector -38.5 28.0 102.5)))
         (instance face :init :vertices (list (float-vector 0.5 -28.0 102.5) (float-vector 0.5 -28.0 67.5) (float-vector 0.5 28.0 67.5) (float-vector 0.5 28.0 102.5)))
         (instance face :init :vertices (list (float-vector -38.5 -28.0 102.5) (float-vector -38.5 -28.0 67.5) (float-vector 0.5 -28.0 67.5) (float-vector 0.5 -28.0 102.5)))
         (instance face :init :vertices (list (float-vector -38.5 28.0 102.5) (float-vector -38.5 28.0 67.5) (float-vector -38.5 -28.0 67.5) (float-vector -38.5 -28.0 102.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 30.3109 -17.5 230.0) (float-vector 35.0 0.0 230.0) (float-vector 30.3109 17.5 230.0) (float-vector 17.5 30.3109 230.0) (float-vector 1.953993e-14 35.0 230.0) (float-vector -17.5 30.3109 230.0) (float-vector -30.3109 17.5 230.0) (float-vector -35.0 4.085621e-14 230.0) (float-vector -30.3109 -17.5 230.0) (float-vector -17.5 -30.3109 230.0) (float-vector -6.394885e-14 -35.0 230.0) (float-vector 17.5 -30.3109 230.0)))
         (instance face :init :vertices (list (float-vector 35.0 0.0 200.0) (float-vector 30.3109 -17.5 200.0) (float-vector 17.5 -30.3109 200.0) (float-vector -6.394885e-14 -35.0 200.0) (float-vector -17.5 -30.3109 200.0) (float-vector -30.3109 -17.5 200.0) (float-vector -35.0 4.085621e-14 200.0) (float-vector -30.3109 17.5 200.0) (float-vector -17.5 30.3109 200.0) (float-vector 1.953993e-14 35.0 200.0) (float-vector 17.5 30.3109 200.0) (float-vector 30.3109 17.5 200.0)))
         (instance face :init :vertices (list (float-vector 30.3109 -17.5 230.0) (float-vector 30.3109 -17.5 200.0) (float-vector 35.0 0.0 200.0) (float-vector 35.0 0.0 230.0)))
         (instance face :init :vertices (list (float-vector 17.5 -30.3109 230.0) (float-vector 17.5 -30.3109 200.0) (float-vector 30.3109 -17.5 200.0) (float-vector 30.3109 -17.5 230.0)))
         (instance face :init :vertices (list (float-vector -6.394885e-14 -35.0 230.0) (float-vector -6.394885e-14 -35.0 200.0) (float-vector 17.5 -30.3109 200.0) (float-vector 17.5 -30.3109 230.0)))
         (instance face :init :vertices (list (float-vector -17.5 -30.3109 230.0) (float-vector -17.5 -30.3109 200.0) (float-vector -6.394885e-14 -35.0 200.0) (float-vector -6.394885e-14 -35.0 230.0)))
         (instance face :init :vertices (list (float-vector -30.3109 -17.5 230.0) (float-vector -30.3109 -17.5 200.0) (float-vector -17.5 -30.3109 200.0) (float-vector -17.5 -30.3109 230.0)))
         (instance face :init :vertices (list (float-vector -35.0 4.085621e-14 230.0) (float-vector -35.0 4.085621e-14 200.0) (float-vector -30.3109 -17.5 200.0) (float-vector -30.3109 -17.5 230.0)))
         (instance face :init :vertices (list (float-vector -30.3109 17.5 230.0) (float-vector -30.3109 17.5 200.0) (float-vector -35.0 4.085621e-14 200.0) (float-vector -35.0 4.085621e-14 230.0)))
         (instance face :init :vertices (list (float-vector -17.5 30.3109 230.0) (float-vector -17.5 30.3109 200.0) (float-vector -30.3109 17.5 200.0) (float-vector -30.3109 17.5 230.0)))
         (instance face :init :vertices (list (float-vector 1.953993e-14 35.0 230.0) (float-vector 1.953993e-14 35.0 200.0) (float-vector -17.5 30.3109 200.0) (float-vector -17.5 30.3109 230.0)))
         (instance face :init :vertices (list (float-vector 17.5 30.3109 230.0) (float-vector 17.5 30.3109 200.0) (float-vector 1.953993e-14 35.0 200.0) (float-vector 1.953993e-14 35.0 230.0)))
         (instance face :init :vertices (list (float-vector 30.3109 17.5 230.0) (float-vector 30.3109 17.5 200.0) (float-vector 17.5 30.3109 200.0) (float-vector 17.5 30.3109 230.0)))
         (instance face :init :vertices (list (float-vector 35.0 0.0 230.0) (float-vector 35.0 0.0 200.0) (float-vector 30.3109 17.5 200.0) (float-vector 30.3109 17.5 230.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 19.9186 -11.5 270.0) (float-vector 23.0 0.0 270.0) (float-vector 19.9186 11.5 270.0) (float-vector 11.5 19.9186 270.0) (float-vector 1.243450e-14 23.0 270.0) (float-vector -11.5 19.9186 270.0) (float-vector -19.9186 11.5 270.0) (float-vector -23.0 2.309264e-14 270.0) (float-vector -19.9186 -11.5 270.0) (float-vector -11.5 -19.9186 270.0) (float-vector -3.375078e-14 -23.0 270.0) (float-vector 11.5 -19.9186 270.0)))
         (instance face :init :vertices (list (float-vector 23.0 0.0 230.0) (float-vector 19.9186 -11.5 230.0) (float-vector 11.5 -19.9186 230.0) (float-vector -3.375078e-14 -23.0 230.0) (float-vector -11.5 -19.9186 230.0) (float-vector -19.9186 -11.5 230.0) (float-vector -23.0 2.309264e-14 230.0) (float-vector -19.9186 11.5 230.0) (float-vector -11.5 19.9186 230.0) (float-vector 1.243450e-14 23.0 230.0) (float-vector 11.5 19.9186 230.0) (float-vector 19.9186 11.5 230.0)))
         (instance face :init :vertices (list (float-vector 19.9186 -11.5 270.0) (float-vector 19.9186 -11.5 230.0) (float-vector 23.0 0.0 230.0) (float-vector 23.0 0.0 270.0)))
         (instance face :init :vertices (list (float-vector 11.5 -19.9186 270.0) (float-vector 11.5 -19.9186 230.0) (float-vector 19.9186 -11.5 230.0) (float-vector 19.9186 -11.5 270.0)))
         (instance face :init :vertices (list (float-vector -3.375078e-14 -23.0 270.0) (float-vector -3.375078e-14 -23.0 230.0) (float-vector 11.5 -19.9186 230.0) (float-vector 11.5 -19.9186 270.0)))
         (instance face :init :vertices (list (float-vector -11.5 -19.9186 270.0) (float-vector -11.5 -19.9186 230.0) (float-vector -3.375078e-14 -23.0 230.0) (float-vector -3.375078e-14 -23.0 270.0)))
         (instance face :init :vertices (list (float-vector -19.9186 -11.5 270.0) (float-vector -19.9186 -11.5 230.0) (float-vector -11.5 -19.9186 230.0) (float-vector -11.5 -19.9186 270.0)))
         (instance face :init :vertices (list (float-vector -23.0 2.309264e-14 270.0) (float-vector -23.0 2.309264e-14 230.0) (float-vector -19.9186 -11.5 230.0) (float-vector -19.9186 -11.5 270.0)))
         (instance face :init :vertices (list (float-vector -19.9186 11.5 270.0) (float-vector -19.9186 11.5 230.0) (float-vector -23.0 2.309264e-14 230.0) (float-vector -23.0 2.309264e-14 270.0)))
         (instance face :init :vertices (list (float-vector -11.5 19.9186 270.0) (float-vector -11.5 19.9186 230.0) (float-vector -19.9186 11.5 230.0) (float-vector -19.9186 11.5 270.0)))
         (instance face :init :vertices (list (float-vector 1.243450e-14 23.0 270.0) (float-vector 1.243450e-14 23.0 230.0) (float-vector -11.5 19.9186 230.0) (float-vector -11.5 19.9186 270.0)))
         (instance face :init :vertices (list (float-vector 11.5 19.9186 270.0) (float-vector 11.5 19.9186 230.0) (float-vector 1.243450e-14 23.0 230.0) (float-vector 1.243450e-14 23.0 270.0)))
         (instance face :init :vertices (list (float-vector 19.9186 11.5 270.0) (float-vector 19.9186 11.5 230.0) (float-vector 11.5 19.9186 230.0) (float-vector 11.5 19.9186 270.0)))
         (instance face :init :vertices (list (float-vector 23.0 0.0 270.0) (float-vector 23.0 0.0 230.0) (float-vector 19.9186 11.5 230.0) (float-vector 19.9186 11.5 270.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 6.9282 -4.0 280.0) (float-vector 8.0 0.0 280.0) (float-vector 6.9282 4.0 280.0) (float-vector 4.0 6.9282 280.0) (float-vector 3.996803e-15 8.0 280.0) (float-vector -4.0 6.9282 280.0) (float-vector -6.9282 4.0 280.0) (float-vector -8.0 8.437695e-15 280.0) (float-vector -6.9282 -4.0 280.0) (float-vector -4.0 -6.9282 280.0) (float-vector -1.376677e-14 -8.0 280.0) (float-vector 4.0 -6.9282 280.0)))
         (instance face :init :vertices (list (float-vector 8.0 0.0 270.0) (float-vector 6.9282 -4.0 270.0) (float-vector 4.0 -6.9282 270.0) (float-vector -1.376677e-14 -8.0 270.0) (float-vector -4.0 -6.9282 270.0) (float-vector -6.9282 -4.0 270.0) (float-vector -8.0 8.437695e-15 270.0) (float-vector -6.9282 4.0 270.0) (float-vector -4.0 6.9282 270.0) (float-vector 3.996803e-15 8.0 270.0) (float-vector 4.0 6.9282 270.0) (float-vector 6.9282 4.0 270.0)))
         (instance face :init :vertices (list (float-vector 6.9282 -4.0 280.0) (float-vector 6.9282 -4.0 270.0) (float-vector 8.0 0.0 270.0) (float-vector 8.0 0.0 280.0)))
         (instance face :init :vertices (list (float-vector 4.0 -6.9282 280.0) (float-vector 4.0 -6.9282 270.0) (float-vector 6.9282 -4.0 270.0) (float-vector 6.9282 -4.0 280.0)))
         (instance face :init :vertices (list (float-vector -1.376677e-14 -8.0 280.0) (float-vector -1.376677e-14 -8.0 270.0) (float-vector 4.0 -6.9282 270.0) (float-vector 4.0 -6.9282 280.0)))
         (instance face :init :vertices (list (float-vector -4.0 -6.9282 280.0) (float-vector -4.0 -6.9282 270.0) (float-vector -1.376677e-14 -8.0 270.0) (float-vector -1.376677e-14 -8.0 280.0)))
         (instance face :init :vertices (list (float-vector -6.9282 -4.0 280.0) (float-vector -6.9282 -4.0 270.0) (float-vector -4.0 -6.9282 270.0) (float-vector -4.0 -6.9282 280.0)))
         (instance face :init :vertices (list (float-vector -8.0 8.437695e-15 280.0) (float-vector -8.0 8.437695e-15 270.0) (float-vector -6.9282 -4.0 270.0) (float-vector -6.9282 -4.0 280.0)))
         (instance face :init :vertices (list (float-vector -6.9282 4.0 280.0) (float-vector -6.9282 4.0 270.0) (float-vector -8.0 8.437695e-15 270.0) (float-vector -8.0 8.437695e-15 280.0)))
         (instance face :init :vertices (list (float-vector -4.0 6.9282 280.0) (float-vector -4.0 6.9282 270.0) (float-vector -6.9282 4.0 270.0) (float-vector -6.9282 4.0 280.0)))
         (instance face :init :vertices (list (float-vector 3.996803e-15 8.0 280.0) (float-vector 3.996803e-15 8.0 270.0) (float-vector -4.0 6.9282 270.0) (float-vector -4.0 6.9282 280.0)))
         (instance face :init :vertices (list (float-vector 4.0 6.9282 280.0) (float-vector 4.0 6.9282 270.0) (float-vector 3.996803e-15 8.0 270.0) (float-vector 3.996803e-15 8.0 280.0)))
         (instance face :init :vertices (list (float-vector 6.9282 4.0 280.0) (float-vector 6.9282 4.0 270.0) (float-vector 4.0 6.9282 270.0) (float-vector 4.0 6.9282 280.0)))
         (instance face :init :vertices (list (float-vector 8.0 0.0 280.0) (float-vector 8.0 0.0 270.0) (float-vector 6.9282 4.0 270.0) (float-vector 6.9282 4.0 280.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 1.29904 -0.75 315.0) (float-vector 1.5 0.0 315.0) (float-vector 1.29904 0.75 315.0) (float-vector 0.75 1.29904 315.0) (float-vector 6.661338e-16 1.5 315.0) (float-vector -0.75 1.29904 315.0) (float-vector -1.29904 0.75 315.0) (float-vector -1.5 1.221245e-15 315.0) (float-vector -1.29904 -0.75 315.0) (float-vector -0.75 -1.29904 315.0) (float-vector -2.109424e-15 -1.5 315.0) (float-vector 0.75 -1.29904 315.0)))
         (instance face :init :vertices (list (float-vector 1.5 0.0 280.0) (float-vector 1.29904 -0.75 280.0) (float-vector 0.75 -1.29904 280.0) (float-vector -2.109424e-15 -1.5 280.0) (float-vector -0.75 -1.29904 280.0) (float-vector -1.29904 -0.75 280.0) (float-vector -1.5 1.221245e-15 280.0) (float-vector -1.29904 0.75 280.0) (float-vector -0.75 1.29904 280.0) (float-vector 6.661338e-16 1.5 280.0) (float-vector 0.75 1.29904 280.0) (float-vector 1.29904 0.75 280.0)))
         (instance face :init :vertices (list (float-vector 1.29904 -0.75 315.0) (float-vector 1.29904 -0.75 280.0) (float-vector 1.5 0.0 280.0) (float-vector 1.5 0.0 315.0)))
         (instance face :init :vertices (list (float-vector 0.75 -1.29904 315.0) (float-vector 0.75 -1.29904 280.0) (float-vector 1.29904 -0.75 280.0) (float-vector 1.29904 -0.75 315.0)))
         (instance face :init :vertices (list (float-vector -2.109424e-15 -1.5 315.0) (float-vector -2.109424e-15 -1.5 280.0) (float-vector 0.75 -1.29904 280.0) (float-vector 0.75 -1.29904 315.0)))
         (instance face :init :vertices (list (float-vector -0.75 -1.29904 315.0) (float-vector -0.75 -1.29904 280.0) (float-vector -2.109424e-15 -1.5 280.0) (float-vector -2.109424e-15 -1.5 315.0)))
         (instance face :init :vertices (list (float-vector -1.29904 -0.75 315.0) (float-vector -1.29904 -0.75 280.0) (float-vector -0.75 -1.29904 280.0) (float-vector -0.75 -1.29904 315.0)))
         (instance face :init :vertices (list (float-vector -1.5 1.221245e-15 315.0) (float-vector -1.5 1.221245e-15 280.0) (float-vector -1.29904 -0.75 280.0) (float-vector -1.29904 -0.75 315.0)))
         (instance face :init :vertices (list (float-vector -1.29904 0.75 315.0) (float-vector -1.29904 0.75 280.0) (float-vector -1.5 1.221245e-15 280.0) (float-vector -1.5 1.221245e-15 315.0)))
         (instance face :init :vertices (list (float-vector -0.75 1.29904 315.0) (float-vector -0.75 1.29904 280.0) (float-vector -1.29904 0.75 280.0) (float-vector -1.29904 0.75 315.0)))
         (instance face :init :vertices (list (float-vector 6.661338e-16 1.5 315.0) (float-vector 6.661338e-16 1.5 280.0) (float-vector -0.75 1.29904 280.0) (float-vector -0.75 1.29904 315.0)))
         (instance face :init :vertices (list (float-vector 0.75 1.29904 315.0) (float-vector 0.75 1.29904 280.0) (float-vector 6.661338e-16 1.5 280.0) (float-vector 6.661338e-16 1.5 315.0)))
         (instance face :init :vertices (list (float-vector 1.29904 0.75 315.0) (float-vector 1.29904 0.75 280.0) (float-vector 0.75 1.29904 280.0) (float-vector 0.75 1.29904 315.0)))
         (instance face :init :vertices (list (float-vector 1.5 0.0 315.0) (float-vector 1.5 0.0 280.0) (float-vector 1.29904 0.75 280.0) (float-vector 1.29904 0.75 315.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray20)
     (send (elt bc 1) :set-color :gray20)
     (send (elt bc 2) :set-color :yellow)
     (send (elt bc 3) :set-color :yellow)
     (send (elt bc 4) :set-color :gray20)
     (send (elt bc 5) :set-color :gray20)
     (send (elt bc 6) :set-color :gray20)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name 'dewalt-drill :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint


     ;; init-ending 
     (setq links (list blink0))
     (setq joint-list (list))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:handle (&rest args) (forward-message-to-all (list ) args))
  (:attention (&rest args) (forward-message-to-all (list ) args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun dewalt-drill (&rest args) (instance* dewalt-drill-object :init args))
;; (format *error-output* "(instance dewalt-drill-object :init) for generating model~%")
