;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass room73b2-plus-590-locker-object
  :super cascaded-link
  :slots (sensors
         handle0
         joint0 joint1 ))
(defmethod room73b2-plus-590-locker-object
  (:init
   (&rest args &key (name "room73b2-plus-590-locker") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0 blink1 blink2
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :root
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 260.0 295.0 1800.0) (float-vector -260.0 295.0 1800.0) (float-vector -260.0 -295.0 1800.0) (float-vector 260.0 -295.0 1800.0)))
         (instance face :init :vertices (list (float-vector -260.0 295.0 1770.0) (float-vector 260.0 295.0 1770.0) (float-vector 260.0 -295.0 1770.0) (float-vector -260.0 -295.0 1770.0)))
         (instance face :init :vertices (list (float-vector 260.0 295.0 1800.0) (float-vector 260.0 295.0 1770.0) (float-vector -260.0 295.0 1770.0) (float-vector -260.0 295.0 1800.0)))
         (instance face :init :vertices (list (float-vector 260.0 -295.0 1800.0) (float-vector 260.0 -295.0 1770.0) (float-vector 260.0 295.0 1770.0) (float-vector 260.0 295.0 1800.0)))
         (instance face :init :vertices (list (float-vector -260.0 -295.0 1800.0) (float-vector -260.0 -295.0 1770.0) (float-vector 260.0 -295.0 1770.0) (float-vector 260.0 -295.0 1800.0)))
         (instance face :init :vertices (list (float-vector -260.0 295.0 1800.0) (float-vector -260.0 295.0 1770.0) (float-vector -260.0 -295.0 1770.0) (float-vector -260.0 -295.0 1800.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 260.0 295.0 80.0) (float-vector -260.0 295.0 80.0) (float-vector -260.0 -295.0 80.0) (float-vector 260.0 -295.0 80.0)))
         (instance face :init :vertices (list (float-vector -260.0 295.0 0.0) (float-vector 260.0 295.0 0.0) (float-vector 260.0 -295.0 0.0) (float-vector -260.0 -295.0 0.0)))
         (instance face :init :vertices (list (float-vector 260.0 295.0 80.0) (float-vector 260.0 295.0 0.0) (float-vector -260.0 295.0 0.0) (float-vector -260.0 295.0 80.0)))
         (instance face :init :vertices (list (float-vector 260.0 -295.0 80.0) (float-vector 260.0 -295.0 0.0) (float-vector 260.0 295.0 0.0) (float-vector 260.0 295.0 80.0)))
         (instance face :init :vertices (list (float-vector -260.0 -295.0 80.0) (float-vector -260.0 -295.0 0.0) (float-vector 260.0 -295.0 0.0) (float-vector 260.0 -295.0 80.0)))
         (instance face :init :vertices (list (float-vector -260.0 295.0 80.0) (float-vector -260.0 295.0 0.0) (float-vector -260.0 -295.0 0.0) (float-vector -260.0 -295.0 80.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -240.0 275.0 1770.0) (float-vector -260.0 275.0 1770.0) (float-vector -260.0 -275.0 1770.0) (float-vector -240.0 -275.0 1770.0)))
         (instance face :init :vertices (list (float-vector -260.0 275.0 80.0) (float-vector -240.0 275.0 80.0) (float-vector -240.0 -275.0 80.0) (float-vector -260.0 -275.0 80.0)))
         (instance face :init :vertices (list (float-vector -240.0 275.0 1770.0) (float-vector -240.0 275.0 80.0) (float-vector -260.0 275.0 80.0) (float-vector -260.0 275.0 1770.0)))
         (instance face :init :vertices (list (float-vector -240.0 -275.0 1770.0) (float-vector -240.0 -275.0 80.0) (float-vector -240.0 275.0 80.0) (float-vector -240.0 275.0 1770.0)))
         (instance face :init :vertices (list (float-vector -260.0 -275.0 1770.0) (float-vector -260.0 -275.0 80.0) (float-vector -240.0 -275.0 80.0) (float-vector -240.0 -275.0 1770.0)))
         (instance face :init :vertices (list (float-vector -260.0 275.0 1770.0) (float-vector -260.0 275.0 80.0) (float-vector -260.0 -275.0 80.0) (float-vector -260.0 -275.0 1770.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 260.0 295.0 1770.0) (float-vector -260.0 295.0 1770.0) (float-vector -260.0 275.0 1770.0) (float-vector 260.0 275.0 1770.0)))
         (instance face :init :vertices (list (float-vector -260.0 295.0 80.0) (float-vector 260.0 295.0 80.0) (float-vector 260.0 275.0 80.0) (float-vector -260.0 275.0 80.0)))
         (instance face :init :vertices (list (float-vector 260.0 295.0 1770.0) (float-vector 260.0 295.0 80.0) (float-vector -260.0 295.0 80.0) (float-vector -260.0 295.0 1770.0)))
         (instance face :init :vertices (list (float-vector 260.0 275.0 1770.0) (float-vector 260.0 275.0 80.0) (float-vector 260.0 295.0 80.0) (float-vector 260.0 295.0 1770.0)))
         (instance face :init :vertices (list (float-vector -260.0 275.0 1770.0) (float-vector -260.0 275.0 80.0) (float-vector 260.0 275.0 80.0) (float-vector 260.0 275.0 1770.0)))
         (instance face :init :vertices (list (float-vector -260.0 295.0 1770.0) (float-vector -260.0 295.0 80.0) (float-vector -260.0 275.0 80.0) (float-vector -260.0 275.0 1770.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 260.0 -275.0 1770.0) (float-vector -260.0 -275.0 1770.0) (float-vector -260.0 -295.0 1770.0) (float-vector 260.0 -295.0 1770.0)))
         (instance face :init :vertices (list (float-vector -260.0 -275.0 80.0) (float-vector 260.0 -275.0 80.0) (float-vector 260.0 -295.0 80.0) (float-vector -260.0 -295.0 80.0)))
         (instance face :init :vertices (list (float-vector 260.0 -275.0 1770.0) (float-vector 260.0 -275.0 80.0) (float-vector -260.0 -275.0 80.0) (float-vector -260.0 -275.0 1770.0)))
         (instance face :init :vertices (list (float-vector 260.0 -295.0 1770.0) (float-vector 260.0 -295.0 80.0) (float-vector 260.0 -275.0 80.0) (float-vector 260.0 -275.0 1770.0)))
         (instance face :init :vertices (list (float-vector -260.0 -295.0 1770.0) (float-vector -260.0 -295.0 80.0) (float-vector 260.0 -295.0 80.0) (float-vector 260.0 -295.0 1770.0)))
         (instance face :init :vertices (list (float-vector -260.0 -275.0 1770.0) (float-vector -260.0 -275.0 80.0) (float-vector -260.0 -295.0 80.0) (float-vector -260.0 -295.0 1770.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 90.0 275.0 1545.0) (float-vector -240.0 275.0 1545.0) (float-vector -240.0 -275.0 1545.0) (float-vector 90.0 -275.0 1545.0)))
         (instance face :init :vertices (list (float-vector -240.0 275.0 1525.0) (float-vector 90.0 275.0 1525.0) (float-vector 90.0 -275.0 1525.0) (float-vector -240.0 -275.0 1525.0)))
         (instance face :init :vertices (list (float-vector 90.0 275.0 1545.0) (float-vector 90.0 275.0 1525.0) (float-vector -240.0 275.0 1525.0) (float-vector -240.0 275.0 1545.0)))
         (instance face :init :vertices (list (float-vector 90.0 -275.0 1545.0) (float-vector 90.0 -275.0 1525.0) (float-vector 90.0 275.0 1525.0) (float-vector 90.0 275.0 1545.0)))
         (instance face :init :vertices (list (float-vector -240.0 -275.0 1545.0) (float-vector -240.0 -275.0 1525.0) (float-vector 90.0 -275.0 1525.0) (float-vector 90.0 -275.0 1545.0)))
         (instance face :init :vertices (list (float-vector -240.0 275.0 1545.0) (float-vector -240.0 275.0 1525.0) (float-vector -240.0 -275.0 1525.0) (float-vector -240.0 -275.0 1545.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -1.33975 -275.0 1495.0) (float-vector 0.0 -275.0 1500.0) (float-vector -1.33975 -275.0 1505.0) (float-vector -5.0 -275.0 1508.66) (float-vector -10.0 -275.0 1510.0) (float-vector -15.0 -275.0 1508.66) (float-vector -18.6603 -275.0 1505.0) (float-vector -20.0 -275.0 1500.0) (float-vector -18.6603 -275.0 1495.0) (float-vector -15.0 -275.0 1491.34) (float-vector -10.0 -275.0 1490.0) (float-vector -5.0 -275.0 1491.34)))
         (instance face :init :vertices (list (float-vector 0.0 -10.0 1500.0) (float-vector -1.33975 -10.0 1495.0) (float-vector -5.0 -10.0 1491.34) (float-vector -10.0 -10.0 1490.0) (float-vector -15.0 -10.0 1491.34) (float-vector -18.6603 -10.0 1495.0) (float-vector -20.0 -10.0 1500.0) (float-vector -18.6603 -10.0 1505.0) (float-vector -15.0 -10.0 1508.66) (float-vector -10.0 -10.0 1510.0) (float-vector -5.0 -10.0 1508.66) (float-vector -1.33975 -10.0 1505.0)))
         (instance face :init :vertices (list (float-vector -1.33975 -275.0 1495.0) (float-vector -1.33975 -10.0 1495.0) (float-vector 0.0 -10.0 1500.0) (float-vector 0.0 -275.0 1500.0)))
         (instance face :init :vertices (list (float-vector -5.0 -275.0 1491.34) (float-vector -5.0 -10.0 1491.34) (float-vector -1.33975 -10.0 1495.0) (float-vector -1.33975 -275.0 1495.0)))
         (instance face :init :vertices (list (float-vector -10.0 -275.0 1490.0) (float-vector -10.0 -10.0 1490.0) (float-vector -5.0 -10.0 1491.34) (float-vector -5.0 -275.0 1491.34)))
         (instance face :init :vertices (list (float-vector -15.0 -275.0 1491.34) (float-vector -15.0 -10.0 1491.34) (float-vector -10.0 -10.0 1490.0) (float-vector -10.0 -275.0 1490.0)))
         (instance face :init :vertices (list (float-vector -18.6603 -275.0 1495.0) (float-vector -18.6603 -10.0 1495.0) (float-vector -15.0 -10.0 1491.34) (float-vector -15.0 -275.0 1491.34)))
         (instance face :init :vertices (list (float-vector -20.0 -275.0 1500.0) (float-vector -20.0 -10.0 1500.0) (float-vector -18.6603 -10.0 1495.0) (float-vector -18.6603 -275.0 1495.0)))
         (instance face :init :vertices (list (float-vector -18.6603 -275.0 1505.0) (float-vector -18.6603 -10.0 1505.0) (float-vector -20.0 -10.0 1500.0) (float-vector -20.0 -275.0 1500.0)))
         (instance face :init :vertices (list (float-vector -15.0 -275.0 1508.66) (float-vector -15.0 -10.0 1508.66) (float-vector -18.6603 -10.0 1505.0) (float-vector -18.6603 -275.0 1505.0)))
         (instance face :init :vertices (list (float-vector -10.0 -275.0 1510.0) (float-vector -10.0 -10.0 1510.0) (float-vector -15.0 -10.0 1508.66) (float-vector -15.0 -275.0 1508.66)))
         (instance face :init :vertices (list (float-vector -5.0 -275.0 1508.66) (float-vector -5.0 -10.0 1508.66) (float-vector -10.0 -10.0 1510.0) (float-vector -10.0 -275.0 1510.0)))
         (instance face :init :vertices (list (float-vector -1.33975 -275.0 1505.0) (float-vector -1.33975 -10.0 1505.0) (float-vector -5.0 -10.0 1508.66) (float-vector -5.0 -275.0 1508.66)))
         (instance face :init :vertices (list (float-vector 0.0 -275.0 1500.0) (float-vector 0.0 -10.0 1500.0) (float-vector -1.33975 -10.0 1505.0) (float-vector -1.33975 -275.0 1505.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -1.33975 10.0 1495.0) (float-vector 0.0 10.0 1500.0) (float-vector -1.33975 10.0 1505.0) (float-vector -5.0 10.0 1508.66) (float-vector -10.0 10.0 1510.0) (float-vector -15.0 10.0 1508.66) (float-vector -18.6603 10.0 1505.0) (float-vector -20.0 10.0 1500.0) (float-vector -18.6603 10.0 1495.0) (float-vector -15.0 10.0 1491.34) (float-vector -10.0 10.0 1490.0) (float-vector -5.0 10.0 1491.34)))
         (instance face :init :vertices (list (float-vector 0.0 275.0 1500.0) (float-vector -1.33975 275.0 1495.0) (float-vector -5.0 275.0 1491.34) (float-vector -10.0 275.0 1490.0) (float-vector -15.0 275.0 1491.34) (float-vector -18.6603 275.0 1495.0) (float-vector -20.0 275.0 1500.0) (float-vector -18.6603 275.0 1505.0) (float-vector -15.0 275.0 1508.66) (float-vector -10.0 275.0 1510.0) (float-vector -5.0 275.0 1508.66) (float-vector -1.33975 275.0 1505.0)))
         (instance face :init :vertices (list (float-vector -1.33975 10.0 1495.0) (float-vector -1.33975 275.0 1495.0) (float-vector 0.0 275.0 1500.0) (float-vector 0.0 10.0 1500.0)))
         (instance face :init :vertices (list (float-vector -5.0 10.0 1491.34) (float-vector -5.0 275.0 1491.34) (float-vector -1.33975 275.0 1495.0) (float-vector -1.33975 10.0 1495.0)))
         (instance face :init :vertices (list (float-vector -10.0 10.0 1490.0) (float-vector -10.0 275.0 1490.0) (float-vector -5.0 275.0 1491.34) (float-vector -5.0 10.0 1491.34)))
         (instance face :init :vertices (list (float-vector -15.0 10.0 1491.34) (float-vector -15.0 275.0 1491.34) (float-vector -10.0 275.0 1490.0) (float-vector -10.0 10.0 1490.0)))
         (instance face :init :vertices (list (float-vector -18.6603 10.0 1495.0) (float-vector -18.6603 275.0 1495.0) (float-vector -15.0 275.0 1491.34) (float-vector -15.0 10.0 1491.34)))
         (instance face :init :vertices (list (float-vector -20.0 10.0 1500.0) (float-vector -20.0 275.0 1500.0) (float-vector -18.6603 275.0 1495.0) (float-vector -18.6603 10.0 1495.0)))
         (instance face :init :vertices (list (float-vector -18.6603 10.0 1505.0) (float-vector -18.6603 275.0 1505.0) (float-vector -20.0 275.0 1500.0) (float-vector -20.0 10.0 1500.0)))
         (instance face :init :vertices (list (float-vector -15.0 10.0 1508.66) (float-vector -15.0 275.0 1508.66) (float-vector -18.6603 275.0 1505.0) (float-vector -18.6603 10.0 1505.0)))
         (instance face :init :vertices (list (float-vector -10.0 10.0 1510.0) (float-vector -10.0 275.0 1510.0) (float-vector -15.0 275.0 1508.66) (float-vector -15.0 10.0 1508.66)))
         (instance face :init :vertices (list (float-vector -5.0 10.0 1508.66) (float-vector -5.0 275.0 1508.66) (float-vector -10.0 275.0 1510.0) (float-vector -10.0 10.0 1510.0)))
         (instance face :init :vertices (list (float-vector -1.33975 10.0 1505.0) (float-vector -1.33975 275.0 1505.0) (float-vector -5.0 275.0 1508.66) (float-vector -5.0 10.0 1508.66)))
         (instance face :init :vertices (list (float-vector 0.0 10.0 1500.0) (float-vector 0.0 275.0 1500.0) (float-vector -1.33975 275.0 1505.0) (float-vector -1.33975 10.0 1505.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 260.0 10.0 1770.0) (float-vector -240.0 10.0 1770.0) (float-vector -240.0 -10.0 1770.0) (float-vector 260.0 -10.0 1770.0)))
         (instance face :init :vertices (list (float-vector -240.0 10.0 80.0) (float-vector 260.0 10.0 80.0) (float-vector 260.0 -10.0 80.0) (float-vector -240.0 -10.0 80.0)))
         (instance face :init :vertices (list (float-vector 260.0 10.0 1770.0) (float-vector 260.0 10.0 80.0) (float-vector -240.0 10.0 80.0) (float-vector -240.0 10.0 1770.0)))
         (instance face :init :vertices (list (float-vector 260.0 -10.0 1770.0) (float-vector 260.0 -10.0 80.0) (float-vector 260.0 10.0 80.0) (float-vector 260.0 10.0 1770.0)))
         (instance face :init :vertices (list (float-vector -240.0 -10.0 1770.0) (float-vector -240.0 -10.0 80.0) (float-vector 260.0 -10.0 80.0) (float-vector 260.0 -10.0 1770.0)))
         (instance face :init :vertices (list (float-vector -240.0 10.0 1770.0) (float-vector -240.0 10.0 80.0) (float-vector -240.0 -10.0 80.0) (float-vector -240.0 -10.0 1770.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray)
     (send (elt bc 1) :set-color :gray)
     (send (elt bc 2) :set-color :gray)
     (send (elt bc 3) :set-color :gray)
     (send (elt bc 4) :set-color :gray)
     (send (elt bc 5) :set-color :gray)
     (send (elt bc 6) :set-color :silver)
     (send (elt bc 7) :set-color :silver)
     (send (elt bc 8) :set-color (list))
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :root :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :room73b2-plus-590-locker-bodyset2
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -9.0 9.5 0.0) (float-vector -9.0 -265.5 0.0) (float-vector -9.0 -265.5 1690.0) (float-vector -9.0 9.5 1690.0)))
         (instance face :init :vertices (list (float-vector 9.0 -265.5 0.0) (float-vector 9.0 -265.5 1690.0) (float-vector -9.0 -265.5 1690.0) (float-vector -9.0 -265.5 0.0)))
         (instance face :init :vertices (list (float-vector 9.0 9.5 0.0) (float-vector 9.0 9.5 1690.0) (float-vector 9.0 -265.5 1690.0) (float-vector 9.0 -265.5 0.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 9.0 -251.0 884.0) (float-vector 9.0 -251.0 1010.0) (float-vector 9.0 -221.0 1010.0) (float-vector 9.0 -221.0 884.0)))
))
         (instance face :init :vertices (list (float-vector -9.0 9.5 1690.0) (float-vector -9.0 -265.5 1690.0) (float-vector 9.0 -265.5 1690.0) (float-vector 9.0 9.5 1690.0)))
         (instance face :init :vertices (list (float-vector 9.0 9.5 0.0) (float-vector 9.0 -265.5 0.0) (float-vector -9.0 -265.5 0.0) (float-vector -9.0 9.5 0.0)))
         (instance face :init :vertices (list (float-vector -9.0 9.5 0.0) (float-vector -9.0 9.5 1690.0) (float-vector 9.0 9.5 1690.0) (float-vector 9.0 9.5 0.0)))
         (instance face :init :vertices (list (float-vector -6.0 -221.0 1010.0) (float-vector -6.0 -251.0 1010.0) (float-vector -6.0 -251.0 884.0) (float-vector -6.0 -221.0 884.0)))
         (instance face :init :vertices (list (float-vector -6.0 -251.0 884.0) (float-vector -6.0 -251.0 1010.0) (float-vector 9.0 -251.0 1010.0) (float-vector 9.0 -251.0 884.0)))
         (instance face :init :vertices (list (float-vector 9.0 -221.0 1010.0) (float-vector 9.0 -251.0 1010.0) (float-vector -6.0 -251.0 1010.0) (float-vector -6.0 -221.0 1010.0)))
         (instance face :init :vertices (list (float-vector 9.0 -221.0 884.0) (float-vector 9.0 -221.0 1010.0) (float-vector -6.0 -221.0 1010.0) (float-vector -6.0 -221.0 884.0)))
         (instance face :init :vertices (list (float-vector -6.0 -221.0 884.0) (float-vector -6.0 -251.0 884.0) (float-vector 9.0 -251.0 884.0) (float-vector 9.0 -221.0 884.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray)
     (setq blink2 (instance bodyset-link :init (make-cascoords) :bodies bc :name :room73b2-plus-590-locker-bodyset2 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :room73b2-plus-590-locker-bodyset3
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -9.0 9.5 0.0) (float-vector -9.0 -265.5 0.0) (float-vector -9.0 -265.5 1690.0) (float-vector -9.0 9.5 1690.0)))
         (instance face :init :vertices (list (float-vector 9.0 -265.5 0.0) (float-vector 9.0 -265.5 1690.0) (float-vector -9.0 -265.5 1690.0) (float-vector -9.0 -265.5 0.0)))
         (instance face :init :vertices (list (float-vector 9.0 9.5 0.0) (float-vector 9.0 9.5 1690.0) (float-vector 9.0 -265.5 1690.0) (float-vector 9.0 -265.5 0.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 9.0 -251.0 884.0) (float-vector 9.0 -251.0 1010.0) (float-vector 9.0 -221.0 1010.0) (float-vector 9.0 -221.0 884.0)))
))
         (instance face :init :vertices (list (float-vector -9.0 9.5 1690.0) (float-vector -9.0 -265.5 1690.0) (float-vector 9.0 -265.5 1690.0) (float-vector 9.0 9.5 1690.0)))
         (instance face :init :vertices (list (float-vector 9.0 9.5 0.0) (float-vector 9.0 -265.5 0.0) (float-vector -9.0 -265.5 0.0) (float-vector -9.0 9.5 0.0)))
         (instance face :init :vertices (list (float-vector -9.0 9.5 0.0) (float-vector -9.0 9.5 1690.0) (float-vector 9.0 9.5 1690.0) (float-vector 9.0 9.5 0.0)))
         (instance face :init :vertices (list (float-vector -6.0 -221.0 1010.0) (float-vector -6.0 -251.0 1010.0) (float-vector -6.0 -251.0 884.0) (float-vector -6.0 -221.0 884.0)))
         (instance face :init :vertices (list (float-vector -6.0 -251.0 884.0) (float-vector -6.0 -251.0 1010.0) (float-vector 9.0 -251.0 1010.0) (float-vector 9.0 -251.0 884.0)))
         (instance face :init :vertices (list (float-vector 9.0 -221.0 1010.0) (float-vector 9.0 -251.0 1010.0) (float-vector -6.0 -251.0 1010.0) (float-vector -6.0 -221.0 1010.0)))
         (instance face :init :vertices (list (float-vector 9.0 -221.0 884.0) (float-vector 9.0 -221.0 1010.0) (float-vector -6.0 -221.0 1010.0) (float-vector -6.0 -221.0 884.0)))
         (instance face :init :vertices (list (float-vector -6.0 -221.0 884.0) (float-vector -6.0 -251.0 884.0) (float-vector 9.0 -251.0 884.0) (float-vector 9.0 -221.0 884.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray)
     (setq blink1 (instance bodyset-link :init (make-cascoords) :bodies bc :name :room73b2-plus-590-locker-bodyset3 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send blink1 :newcoords (make-coords :pos (float-vector 251.0 -9.0 80.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink1)
     (send blink2 :newcoords (make-coords :pos (float-vector 251.0 266.0 80.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink2)
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     ;; definition of :door-left
     (setq joint0 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink1 :name :door-left :axis :z 
			     :min    0.0 :max   90.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :door-right
     (setq joint1 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink2 :name :door-right :axis :z 
			     :min    0.0 :max   90.0 :max-joint-velocity 5 :max-joint-torque 100))


     ;; definition of :handle
     (setq handle0 (make-cascoords :pos (float-vector 260.0 -263.5 991.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name "door-handle"))
     (send blink0 :assoc handle0)

     ;; init-ending 
     (setq links (list blink0 blink1 blink2))
     (setq joint-list (list joint0 joint1))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:door-left (&rest args) (forward-message-to joint0 args))
  (:door-right (&rest args) (forward-message-to joint1 args))
  (:handle (&rest args) (forward-message-to-all (list  handle0) args))
  (:handle-door-handle (&rest args) (forward-message-to handle0 args))
  (:attention (&rest args) (forward-message-to-all (list ) args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun room73b2-plus-590-locker (&rest args) (instance* room73b2-plus-590-locker-object :init args))
;; (format *error-output* "(instance room73b2-plus-590-locker-object :init) for generating model~%")
