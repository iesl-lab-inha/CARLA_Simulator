;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass room73b2-wanda-object
  :super cascaded-link
  :slots (sensors
         ))
(defmethod room73b2-wanda-object
  (:init
   (&rest args &key (name "room73b2-wanda") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :room73b2-wanda-bodyset2
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 25.203 -8.18895 103.0) (float-vector 26.5 0.0 103.0) (float-vector 25.203 8.18895 103.0) (float-vector 21.439 15.5763 103.0) (float-vector 15.5763 21.439 103.0) (float-vector 8.18895 25.203 103.0) (float-vector 0.0 26.5 103.0) (float-vector -8.18895 25.203 103.0) (float-vector -15.5763 21.439 103.0) (float-vector -21.439 15.5763 103.0) (float-vector -25.203 8.18895 103.0) (float-vector -26.5 0.0 103.0) (float-vector -25.203 -8.18895 103.0) (float-vector -21.439 -15.5763 103.0) (float-vector -15.5763 -21.439 103.0) (float-vector -8.18895 -25.203 103.0) (float-vector 0.0 -26.5 103.0) (float-vector 8.18895 -25.203 103.0) (float-vector 15.5763 -21.439 103.0) (float-vector 21.439 -15.5763 103.0)))
         (instance face :init :vertices (list (float-vector 26.5 0.0 0.0) (float-vector 25.203 -8.18895 0.0) (float-vector 21.439 -15.5763 0.0) (float-vector 15.5763 -21.439 0.0) (float-vector 8.18895 -25.203 0.0) (float-vector 0.0 -26.5 0.0) (float-vector -8.18895 -25.203 0.0) (float-vector -15.5763 -21.439 0.0) (float-vector -21.439 -15.5763 0.0) (float-vector -25.203 -8.18895 0.0) (float-vector -26.5 0.0 0.0) (float-vector -25.203 8.18895 0.0) (float-vector -21.439 15.5763 0.0) (float-vector -15.5763 21.439 0.0) (float-vector -8.18895 25.203 0.0) (float-vector 0.0 26.5 0.0) (float-vector 8.18895 25.203 0.0) (float-vector 15.5763 21.439 0.0) (float-vector 21.439 15.5763 0.0) (float-vector 25.203 8.18895 0.0)))
         (instance face :init :vertices (list (float-vector 25.203 -8.18895 103.0) (float-vector 25.203 -8.18895 0.0) (float-vector 26.5 0.0 0.0) (float-vector 26.5 0.0 103.0)))
         (instance face :init :vertices (list (float-vector 21.439 -15.5763 103.0) (float-vector 21.439 -15.5763 0.0) (float-vector 25.203 -8.18895 0.0) (float-vector 25.203 -8.18895 103.0)))
         (instance face :init :vertices (list (float-vector 15.5763 -21.439 103.0) (float-vector 15.5763 -21.439 0.0) (float-vector 21.439 -15.5763 0.0) (float-vector 21.439 -15.5763 103.0)))
         (instance face :init :vertices (list (float-vector 8.18895 -25.203 103.0) (float-vector 8.18895 -25.203 0.0) (float-vector 15.5763 -21.439 0.0) (float-vector 15.5763 -21.439 103.0)))
         (instance face :init :vertices (list (float-vector 0.0 -26.5 103.0) (float-vector 0.0 -26.5 0.0) (float-vector 8.18895 -25.203 0.0) (float-vector 8.18895 -25.203 103.0)))
         (instance face :init :vertices (list (float-vector -8.18895 -25.203 103.0) (float-vector -8.18895 -25.203 0.0) (float-vector 0.0 -26.5 0.0) (float-vector 0.0 -26.5 103.0)))
         (instance face :init :vertices (list (float-vector -15.5763 -21.439 103.0) (float-vector -15.5763 -21.439 0.0) (float-vector -8.18895 -25.203 0.0) (float-vector -8.18895 -25.203 103.0)))
         (instance face :init :vertices (list (float-vector -21.439 -15.5763 103.0) (float-vector -21.439 -15.5763 0.0) (float-vector -15.5763 -21.439 0.0) (float-vector -15.5763 -21.439 103.0)))
         (instance face :init :vertices (list (float-vector -25.203 -8.18895 103.0) (float-vector -25.203 -8.18895 0.0) (float-vector -21.439 -15.5763 0.0) (float-vector -21.439 -15.5763 103.0)))
         (instance face :init :vertices (list (float-vector -26.5 0.0 103.0) (float-vector -26.5 0.0 0.0) (float-vector -25.203 -8.18895 0.0) (float-vector -25.203 -8.18895 103.0)))
         (instance face :init :vertices (list (float-vector -25.203 8.18895 103.0) (float-vector -25.203 8.18895 0.0) (float-vector -26.5 0.0 0.0) (float-vector -26.5 0.0 103.0)))
         (instance face :init :vertices (list (float-vector -21.439 15.5763 103.0) (float-vector -21.439 15.5763 0.0) (float-vector -25.203 8.18895 0.0) (float-vector -25.203 8.18895 103.0)))
         (instance face :init :vertices (list (float-vector -15.5763 21.439 103.0) (float-vector -15.5763 21.439 0.0) (float-vector -21.439 15.5763 0.0) (float-vector -21.439 15.5763 103.0)))
         (instance face :init :vertices (list (float-vector -8.18895 25.203 103.0) (float-vector -8.18895 25.203 0.0) (float-vector -15.5763 21.439 0.0) (float-vector -15.5763 21.439 103.0)))
         (instance face :init :vertices (list (float-vector 0.0 26.5 103.0) (float-vector 0.0 26.5 0.0) (float-vector -8.18895 25.203 0.0) (float-vector -8.18895 25.203 103.0)))
         (instance face :init :vertices (list (float-vector 8.18895 25.203 103.0) (float-vector 8.18895 25.203 0.0) (float-vector 0.0 26.5 0.0) (float-vector 0.0 26.5 103.0)))
         (instance face :init :vertices (list (float-vector 15.5763 21.439 103.0) (float-vector 15.5763 21.439 0.0) (float-vector 8.18895 25.203 0.0) (float-vector 8.18895 25.203 103.0)))
         (instance face :init :vertices (list (float-vector 21.439 15.5763 103.0) (float-vector 21.439 15.5763 0.0) (float-vector 15.5763 21.439 0.0) (float-vector 15.5763 21.439 103.0)))
         (instance face :init :vertices (list (float-vector 25.203 8.18895 103.0) (float-vector 25.203 8.18895 0.0) (float-vector 21.439 15.5763 0.0) (float-vector 21.439 15.5763 103.0)))
         (instance face :init :vertices (list (float-vector 26.5 0.0 103.0) (float-vector 26.5 0.0 0.0) (float-vector 25.203 8.18895 0.0) (float-vector 25.203 8.18895 103.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     ;; paste texture cola-top.jpg
     (send (elt bc 0) :paste-texture-to-face (elt (send (elt bc 0) :faces)0) :file "models/cola-top.jpg")
     ;; paste texture wanda-side.jpg
     (send (elt bc 0) :paste-texture-to-face (elt (send (elt bc 0) :faces)2) :file "models/wanda-side.jpg")
     ;; paste texture wanda-side.jpg
     (send (elt bc 0) :paste-texture-to-face (elt (send (elt bc 0) :faces)3) :file "models/wanda-side.jpg")
     ;; paste texture wanda-side.jpg
     (send (elt bc 0) :paste-texture-to-face (elt (send (elt bc 0) :faces)4) :file "models/wanda-side.jpg")
     ;; paste texture wanda-side.jpg
     (send (elt bc 0) :paste-texture-to-face (elt (send (elt bc 0) :faces)5) :file "models/wanda-side.jpg")
     ;; paste texture wanda-side.jpg
     (send (elt bc 0) :paste-texture-to-face (elt (send (elt bc 0) :faces)6) :file "models/wanda-side.jpg")
     ;; paste texture wanda-side.jpg
     (send (elt bc 0) :paste-texture-to-face (elt (send (elt bc 0) :faces)7) :file "models/wanda-side.jpg")
     ;; paste texture wanda-side.jpg
     (send (elt bc 0) :paste-texture-to-face (elt (send (elt bc 0) :faces)8) :file "models/wanda-side.jpg")
     ;; paste texture wanda-side.jpg
     (send (elt bc 0) :paste-texture-to-face (elt (send (elt bc 0) :faces)9) :file "models/wanda-side.jpg")
     ;; paste texture wanda-side.jpg
     (send (elt bc 0) :paste-texture-to-face (elt (send (elt bc 0) :faces)10) :file "models/wanda-side.jpg")
     ;; paste texture wanda-side.jpg
     (send (elt bc 0) :paste-texture-to-face (elt (send (elt bc 0) :faces)11) :file "models/wanda-side.jpg")
     ;; paste texture wanda-side.jpg
     (send (elt bc 0) :paste-texture-to-face (elt (send (elt bc 0) :faces)12) :file "models/wanda-side.jpg")
     ;; paste texture wanda-side.jpg
     (send (elt bc 0) :paste-texture-to-face (elt (send (elt bc 0) :faces)13) :file "models/wanda-side.jpg")
     ;; paste texture wanda-side.jpg
     (send (elt bc 0) :paste-texture-to-face (elt (send (elt bc 0) :faces)14) :file "models/wanda-side.jpg")
     ;; paste texture wanda-side.jpg
     (send (elt bc 0) :paste-texture-to-face (elt (send (elt bc 0) :faces)15) :file "models/wanda-side.jpg")
     ;; paste texture wanda-side.jpg
     (send (elt bc 0) :paste-texture-to-face (elt (send (elt bc 0) :faces)16) :file "models/wanda-side.jpg")
     ;; paste texture wanda-side.jpg
     (send (elt bc 0) :paste-texture-to-face (elt (send (elt bc 0) :faces)17) :file "models/wanda-side.jpg")
     ;; paste texture wanda-side.jpg
     (send (elt bc 0) :paste-texture-to-face (elt (send (elt bc 0) :faces)18) :file "models/wanda-side.jpg")
     ;; paste texture wanda-side.jpg
     (send (elt bc 0) :paste-texture-to-face (elt (send (elt bc 0) :faces)19) :file "models/wanda-side.jpg")
     ;; paste texture wanda-side.jpg
     (send (elt bc 0) :paste-texture-to-face (elt (send (elt bc 0) :faces)20) :file "models/wanda-side.jpg")
     ;; paste texture wanda-side.jpg
     (send (elt bc 0) :paste-texture-to-face (elt (send (elt bc 0) :faces)21) :file "models/wanda-side.jpg")
     (send (elt bc 0) :set-color (list))
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :room73b2-wanda-bodyset2 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint


     ;; init-ending 
     (setq links (list blink0))
     (setq joint-list (list))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:handle (&rest args) (forward-message-to-all (list ) args))
  (:attention (&rest args) (forward-message-to-all (list ) args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun room73b2-wanda (&rest args) (instance* room73b2-wanda-object :init args))
;; (format *error-output* "(instance room73b2-wanda-object :init) for generating model~%")
