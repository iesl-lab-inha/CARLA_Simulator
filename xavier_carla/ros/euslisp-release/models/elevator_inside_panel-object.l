;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass elevator_inside_panel-object
  :super cascaded-link
  :slots (sensors
         attention0
         button0 button1 button2 button3 button4 button5 button6 button7 button8 button9 button10
         ))
(defmethod elevator_inside_panel-object
  (:init
   (&rest args &key (name "elevator_inside_panel") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :elevator_inside_panel-bodyset2
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 0.5 235.0 175.0) (float-vector -0.5 235.0 175.0) (float-vector -0.5 -235.0 175.0) (float-vector 0.5 -235.0 175.0)))
         (instance face :init :vertices (list (float-vector -0.5 235.0 -175.0) (float-vector 0.5 235.0 -175.0) (float-vector 0.5 -235.0 -175.0) (float-vector -0.5 -235.0 -175.0)))
         (instance face :init :vertices (list (float-vector 0.5 235.0 175.0) (float-vector 0.5 235.0 -175.0) (float-vector -0.5 235.0 -175.0) (float-vector -0.5 235.0 175.0)))
         (instance face :init :vertices (list (float-vector 0.5 -235.0 175.0) (float-vector 0.5 -235.0 -175.0) (float-vector 0.5 235.0 -175.0) (float-vector 0.5 235.0 175.0)))
         (instance face :init :vertices (list (float-vector -0.5 -235.0 175.0) (float-vector -0.5 -235.0 -175.0) (float-vector 0.5 -235.0 -175.0) (float-vector 0.5 -235.0 175.0)))
         (instance face :init :vertices (list (float-vector -0.5 235.0 175.0) (float-vector -0.5 235.0 -175.0) (float-vector -0.5 -235.0 -175.0) (float-vector -0.5 -235.0 175.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     ;; paste texture elevator_inside_panel_eng8.png
     (send (elt bc 0) :paste-texture-to-face (elt (send (elt bc 0) :faces)3) :file "models/elevator_inside_panel_eng8.png")
     (send (elt bc 0) :set-color (list))
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :elevator_inside_panel-bodyset2 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint


     ;; definition of :attention
     (setq attention0 (make-cascoords :pos (float-vector 0.0 115.0 90.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name "/elevator_number"))
     (send blink0 :assoc attention0)

     ;; definition of :button
     (setq button0 (make-cascoords :pos (float-vector 0.0 140.0 35.0) :rot #2f((-1.0 -1.224647e-16 0.0) (1.224647e-16 -1.0 0.0) (0.0 0.0 1.0)) :name "close"))
     (send blink0 :assoc button0)
     (setq button1 (make-cascoords :pos (float-vector 0.0 85.0 35.0) :rot #2f((-1.0 -1.224647e-16 0.0) (1.224647e-16 -1.0 0.0) (0.0 0.0 1.0)) :name "open"))
     (send blink0 :assoc button1)
     (setq button2 (make-cascoords :pos (float-vector 0.0 140.0 -30.0) :rot #2f((-1.0 -1.224647e-16 0.0) (1.224647e-16 -1.0 0.0) (0.0 0.0 1.0)) :name "7F"))
     (send blink0 :assoc button2)
     (setq button3 (make-cascoords :pos (float-vector 0.0 85.0 -30.0) :rot #2f((-1.0 -1.224647e-16 0.0) (1.224647e-16 -1.0 0.0) (0.0 0.0 1.0)) :name "6F"))
     (send blink0 :assoc button3)
     (setq button4 (make-cascoords :pos (float-vector 0.0 30.0 -30.0) :rot #2f((-1.0 -1.224647e-16 0.0) (1.224647e-16 -1.0 0.0) (0.0 0.0 1.0)) :name "5F"))
     (send blink0 :assoc button4)
     (setq button5 (make-cascoords :pos (float-vector 0.0 -25.0 -30.0) :rot #2f((-1.0 -1.224647e-16 0.0) (1.224647e-16 -1.0 0.0) (0.0 0.0 1.0)) :name "4F"))
     (send blink0 :assoc button5)
     (setq button6 (make-cascoords :pos (float-vector 0.0 85.0 -95.0) :rot #2f((-1.0 -1.224647e-16 0.0) (1.224647e-16 -1.0 0.0) (0.0 0.0 1.0)) :name "3F"))
     (send blink0 :assoc button6)
     (setq button7 (make-cascoords :pos (float-vector 0.0 30.0 -95.0) :rot #2f((-1.0 -1.224647e-16 0.0) (1.224647e-16 -1.0 0.0) (0.0 0.0 1.0)) :name "2F"))
     (send blink0 :assoc button7)
     (setq button8 (make-cascoords :pos (float-vector 0.0 -25.0 -95.0) :rot #2f((-1.0 -1.224647e-16 0.0) (1.224647e-16 -1.0 0.0) (0.0 0.0 1.0)) :name "1F"))
     (send blink0 :assoc button8)
     (setq button9 (make-cascoords :pos (float-vector 0.0 -80.0 -95.0) :rot #2f((-1.0 -1.224647e-16 0.0) (1.224647e-16 -1.0 0.0) (0.0 0.0 1.0)) :name "B1F"))
     (send blink0 :assoc button9)
     (setq button10 (make-cascoords :pos (float-vector 0.0 -135.0 -95.0) :rot #2f((-1.0 -1.224647e-16 0.0) (1.224647e-16 -1.0 0.0) (0.0 0.0 1.0)) :name "B2F"))
     (send blink0 :assoc button10)

     ;; init-ending 
     (setq links (list blink0))
     (setq joint-list (list))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:handle (&rest args) (forward-message-to-all (list ) args))
  (:attention (&rest args) (forward-message-to-all (list  attention0) args))
  (:attention-/elevator_number (&rest args) (forward-message-to attention0 args))
  (:button (&rest args) (forward-message-to-all (list  button0 button1 button2 button3 button4 button5 button6 button7 button8 button9 button10) args))
  (:button-close (&rest args) (forward-message-to button0 args))
  (:button-open (&rest args) (forward-message-to button1 args))
  (:button-7F (&rest args) (forward-message-to button2 args))
  (:button-6F (&rest args) (forward-message-to button3 args))
  (:button-5F (&rest args) (forward-message-to button4 args))
  (:button-4F (&rest args) (forward-message-to button5 args))
  (:button-3F (&rest args) (forward-message-to button6 args))
  (:button-2F (&rest args) (forward-message-to button7 args))
  (:button-1F (&rest args) (forward-message-to button8 args))
  (:button-B1F (&rest args) (forward-message-to button9 args))
  (:button-B2F (&rest args) (forward-message-to button10 args))
  )

(defun elevator_inside_panel (&rest args) (instance* elevator_inside_panel-object :init args))
;; (format *error-output* "(instance elevator_inside_panel-object :init) for generating model~%")
