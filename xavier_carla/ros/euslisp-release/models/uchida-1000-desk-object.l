;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass uchida-1000-desk-object
  :super cascaded-link
  :slots (sensors
         ))
(defmethod uchida-1000-desk-object
  (:init
   (&rest args &key (name "uchida-1000-desk") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :uchida-1000-desk-bodyset2
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 375.0 500.0 700.0) (float-vector -375.0 500.0 700.0) (float-vector -375.0 -500.0 700.0) (float-vector 375.0 -500.0 700.0)))
         (instance face :init :vertices (list (float-vector -375.0 500.0 650.0) (float-vector 375.0 500.0 650.0) (float-vector 375.0 -500.0 650.0) (float-vector -375.0 -500.0 650.0)))
         (instance face :init :vertices (list (float-vector 375.0 500.0 700.0) (float-vector 375.0 500.0 650.0) (float-vector -375.0 500.0 650.0) (float-vector -375.0 500.0 700.0)))
         (instance face :init :vertices (list (float-vector 375.0 -500.0 700.0) (float-vector 375.0 -500.0 650.0) (float-vector 375.0 500.0 650.0) (float-vector 375.0 500.0 700.0)))
         (instance face :init :vertices (list (float-vector -375.0 -500.0 700.0) (float-vector -375.0 -500.0 650.0) (float-vector 375.0 -500.0 650.0) (float-vector 375.0 -500.0 700.0)))
         (instance face :init :vertices (list (float-vector -375.0 500.0 700.0) (float-vector -375.0 500.0 650.0) (float-vector -375.0 -500.0 650.0) (float-vector -375.0 -500.0 700.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -375.0 -440.0 650.0) (float-vector -375.0 -440.0 0.0) (float-vector -375.0 -500.0 0.0) (float-vector -375.0 -500.0 650.0)))
         (instance face :init :vertices (list (float-vector -375.0 -500.0 0.0) (float-vector 375.0 -500.0 0.0) (float-vector 375.0 -500.0 80.0) (float-vector -25.0 -500.0 80.0) (float-vector -25.0 -500.0 650.0) (float-vector -375.0 -500.0 650.0)))
         (instance face :init :vertices (list (float-vector -25.0 -440.0 80.0) (float-vector -25.0 -440.0 650.0) (float-vector -25.0 -500.0 650.0) (float-vector -25.0 -500.0 80.0)))
         (instance face :init :vertices (list (float-vector -25.0 -440.0 650.0) (float-vector -375.0 -440.0 650.0) (float-vector -375.0 -500.0 650.0) (float-vector -25.0 -500.0 650.0)))
         (instance face :init :vertices (list (float-vector 375.0 -440.0 0.0) (float-vector -375.0 -440.0 0.0) (float-vector -375.0 -440.0 650.0) (float-vector -25.0 -440.0 650.0) (float-vector -25.0 -440.0 80.0) (float-vector 375.0 -440.0 80.0)))
         (instance face :init :vertices (list (float-vector -375.0 -440.0 0.0) (float-vector 375.0 -440.0 0.0) (float-vector 375.0 -500.0 0.0) (float-vector -375.0 -500.0 0.0)))
         (instance face :init :vertices (list (float-vector 375.0 -500.0 0.0) (float-vector 375.0 -440.0 0.0) (float-vector 375.0 -440.0 80.0) (float-vector 375.0 -500.0 80.0)))
         (instance face :init :vertices (list (float-vector 375.0 -440.0 80.0) (float-vector -25.0 -440.0 80.0) (float-vector -25.0 -500.0 80.0) (float-vector 375.0 -500.0 80.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 365.0 500.0 650.0) (float-vector -375.0 500.0 650.0) (float-vector -375.0 100.0 650.0) (float-vector 365.0 100.0 650.0)))
         (instance face :init :vertices (list (float-vector -375.0 500.0 0.0) (float-vector 365.0 500.0 0.0) (float-vector 365.0 100.0 0.0) (float-vector -375.0 100.0 0.0)))
         (instance face :init :vertices (list (float-vector 365.0 500.0 650.0) (float-vector 365.0 500.0 0.0) (float-vector -375.0 500.0 0.0) (float-vector -375.0 500.0 650.0)))
         (instance face :init :vertices (list (float-vector 365.0 100.0 650.0) (float-vector 365.0 100.0 0.0) (float-vector 365.0 500.0 0.0) (float-vector 365.0 500.0 650.0)))
         (instance face :init :vertices (list (float-vector -375.0 100.0 650.0) (float-vector -375.0 100.0 0.0) (float-vector 365.0 100.0 0.0) (float-vector 365.0 100.0 650.0)))
         (instance face :init :vertices (list (float-vector -375.0 500.0 650.0) (float-vector -375.0 500.0 0.0) (float-vector -375.0 100.0 0.0) (float-vector -375.0 100.0 650.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 385.0 500.0 645.0) (float-vector 365.0 500.0 645.0) (float-vector 365.0 100.0 645.0) (float-vector 385.0 100.0 645.0)))
         (instance face :init :vertices (list (float-vector 365.0 500.0 545.0) (float-vector 385.0 500.0 545.0) (float-vector 385.0 100.0 545.0) (float-vector 365.0 100.0 545.0)))
         (instance face :init :vertices (list (float-vector 385.0 500.0 645.0) (float-vector 385.0 500.0 545.0) (float-vector 365.0 500.0 545.0) (float-vector 365.0 500.0 645.0)))
         (instance face :init :vertices (list (float-vector 385.0 100.0 645.0) (float-vector 385.0 100.0 545.0) (float-vector 385.0 500.0 545.0) (float-vector 385.0 500.0 645.0)))
         (instance face :init :vertices (list (float-vector 365.0 100.0 645.0) (float-vector 365.0 100.0 545.0) (float-vector 385.0 100.0 545.0) (float-vector 385.0 100.0 645.0)))
         (instance face :init :vertices (list (float-vector 365.0 500.0 645.0) (float-vector 365.0 500.0 545.0) (float-vector 365.0 100.0 545.0) (float-vector 365.0 100.0 645.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 385.0 500.0 540.0) (float-vector 365.0 500.0 540.0) (float-vector 365.0 100.0 540.0) (float-vector 385.0 100.0 540.0)))
         (instance face :init :vertices (list (float-vector 365.0 500.0 360.0) (float-vector 385.0 500.0 360.0) (float-vector 385.0 100.0 360.0) (float-vector 365.0 100.0 360.0)))
         (instance face :init :vertices (list (float-vector 385.0 500.0 540.0) (float-vector 385.0 500.0 360.0) (float-vector 365.0 500.0 360.0) (float-vector 365.0 500.0 540.0)))
         (instance face :init :vertices (list (float-vector 385.0 100.0 540.0) (float-vector 385.0 100.0 360.0) (float-vector 385.0 500.0 360.0) (float-vector 385.0 500.0 540.0)))
         (instance face :init :vertices (list (float-vector 365.0 100.0 540.0) (float-vector 365.0 100.0 360.0) (float-vector 385.0 100.0 360.0) (float-vector 385.0 100.0 540.0)))
         (instance face :init :vertices (list (float-vector 365.0 500.0 540.0) (float-vector 365.0 500.0 360.0) (float-vector 365.0 100.0 360.0) (float-vector 365.0 100.0 540.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 385.0 500.0 355.0) (float-vector 365.0 500.0 355.0) (float-vector 365.0 100.0 355.0) (float-vector 385.0 100.0 355.0)))
         (instance face :init :vertices (list (float-vector 365.0 500.0 45.0) (float-vector 385.0 500.0 45.0) (float-vector 385.0 100.0 45.0) (float-vector 365.0 100.0 45.0)))
         (instance face :init :vertices (list (float-vector 385.0 500.0 355.0) (float-vector 385.0 500.0 45.0) (float-vector 365.0 500.0 45.0) (float-vector 365.0 500.0 355.0)))
         (instance face :init :vertices (list (float-vector 385.0 100.0 355.0) (float-vector 385.0 100.0 45.0) (float-vector 385.0 500.0 45.0) (float-vector 385.0 500.0 355.0)))
         (instance face :init :vertices (list (float-vector 365.0 100.0 355.0) (float-vector 365.0 100.0 45.0) (float-vector 385.0 100.0 45.0) (float-vector 385.0 100.0 355.0)))
         (instance face :init :vertices (list (float-vector 365.0 500.0 355.0) (float-vector 365.0 500.0 45.0) (float-vector 365.0 100.0 45.0) (float-vector 365.0 100.0 355.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -94.5 -477.5 699.5) (float-vector -359.0 -477.5 699.5) (float-vector -359.0 -477.5 1324.5) (float-vector -94.5 -477.5 1324.5)))
         (instance face :init :vertices (list (float-vector -94.5 -502.5 699.5) (float-vector -94.5 -477.5 699.5) (float-vector -94.5 -477.5 1324.5) (float-vector -94.5 -502.5 1324.5)))
         (instance face :init :vertices (list (float-vector -369.5 -502.5 699.5) (float-vector -94.5 -502.5 699.5) (float-vector -94.5 -502.5 1324.5) (float-vector -369.5 -502.5 1324.5)))
         (instance face :init :vertices (list (float-vector -369.5 -500.0 699.5) (float-vector -369.5 -502.5 699.5) (float-vector -369.5 -502.5 1324.5) (float-vector -369.5 -500.0 1324.5)))
         (instance face :init :vertices (list (float-vector -379.0 -500.0 699.5) (float-vector -379.0 -500.0 1324.5) (float-vector -379.0 500.0 1324.5) (float-vector -379.0 500.0 699.5)))
         (instance face :init :vertices (list (float-vector -379.0 -500.0 699.5) (float-vector -369.5 -500.0 699.5) (float-vector -369.5 -500.0 1324.5) (float-vector -379.0 -500.0 1324.5)))
         (instance face :init :vertices (list (float-vector -359.0 -477.5 1324.5) (float-vector -359.0 477.5 1324.5) (float-vector -94.5 477.5 1324.5) (float-vector -94.5 502.5 1324.5) (float-vector -369.5 502.5 1324.5) (float-vector -369.5 500.0 1324.5) (float-vector -379.0 500.0 1324.5) (float-vector -379.0 -500.0 1324.5) (float-vector -369.5 -500.0 1324.5) (float-vector -369.5 -502.5 1324.5) (float-vector -94.5 -502.5 1324.5) (float-vector -94.5 -477.5 1324.5)))
         (instance face :init :vertices (list (float-vector -359.0 -477.5 699.5) (float-vector -359.0 477.5 699.5) (float-vector -359.0 477.5 1324.5) (float-vector -359.0 -477.5 1324.5))
                              :holes (list
         (instance hole :init :vertices (list (float-vector -359.0 475.0 1105.0) (float-vector -359.0 -475.0 1105.0) (float-vector -359.0 -475.0 1125.0) (float-vector -359.0 475.0 1125.0)))
))
         (instance face :init :vertices (list (float-vector -369.5 500.0 1324.5) (float-vector -369.5 500.0 699.5) (float-vector -379.0 500.0 699.5) (float-vector -379.0 500.0 1324.5)))
         (instance face :init :vertices (list (float-vector -369.5 500.0 699.5) (float-vector -369.5 502.5 699.5) (float-vector -94.5 502.5 699.5) (float-vector -94.5 477.5 699.5) (float-vector -359.0 477.5 699.5) (float-vector -359.0 -477.5 699.5) (float-vector -94.5 -477.5 699.5) (float-vector -94.5 -502.5 699.5) (float-vector -369.5 -502.5 699.5) (float-vector -369.5 -500.0 699.5) (float-vector -379.0 -500.0 699.5) (float-vector -379.0 500.0 699.5)))
         (instance face :init :vertices (list (float-vector -369.5 502.5 1324.5) (float-vector -369.5 502.5 699.5) (float-vector -369.5 500.0 699.5) (float-vector -369.5 500.0 1324.5)))
         (instance face :init :vertices (list (float-vector -94.5 477.5 699.5) (float-vector -94.5 477.5 1324.5) (float-vector -359.0 477.5 1324.5) (float-vector -359.0 477.5 699.5)))
         (instance face :init :vertices (list (float-vector -94.5 502.5 1324.5) (float-vector -94.5 502.5 699.5) (float-vector -369.5 502.5 699.5) (float-vector -369.5 502.5 1324.5)))
         (instance face :init :vertices (list (float-vector -94.5 502.5 699.5) (float-vector -94.5 502.5 1324.5) (float-vector -94.5 477.5 1324.5) (float-vector -94.5 477.5 699.5)))
         (instance face :init :vertices (list (float-vector -359.0 -475.0 1105.0) (float-vector -94.5 -475.0 1105.0) (float-vector -94.5 -475.0 1125.0) (float-vector -359.0 -475.0 1125.0)))
         (instance face :init :vertices (list (float-vector -94.5 -475.0 1105.0) (float-vector -94.5 475.0 1105.0) (float-vector -94.5 475.0 1125.0) (float-vector -94.5 -475.0 1125.0)))
         (instance face :init :vertices (list (float-vector -94.5 475.0 1125.0) (float-vector -359.0 475.0 1125.0) (float-vector -359.0 -475.0 1125.0) (float-vector -94.5 -475.0 1125.0)))
         (instance face :init :vertices (list (float-vector -94.5 475.0 1105.0) (float-vector -359.0 475.0 1105.0) (float-vector -359.0 475.0 1125.0) (float-vector -94.5 475.0 1125.0)))
         (instance face :init :vertices (list (float-vector -359.0 475.0 1105.0) (float-vector -94.5 475.0 1105.0) (float-vector -94.5 -475.0 1105.0) (float-vector -359.0 -475.0 1105.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray)
     (send (elt bc 1) :set-color :gray)
     (send (elt bc 2) :set-color :gray)
     (send (elt bc 3) :set-color :gray)
     (send (elt bc 4) :set-color :gray)
     (send (elt bc 5) :set-color :gray)
     (send (elt bc 6) :set-color :gray)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :uchida-1000-desk-bodyset2 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint


     ;; init-ending 
     (setq links (list blink0))
     (setq joint-list (list))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:handle (&rest args) (forward-message-to-all (list ) args))
  (:attention (&rest args) (forward-message-to-all (list ) args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun uchida-1000-desk (&rest args) (instance* uchida-1000-desk-object :init args))
;; (format *error-output* "(instance uchida-1000-desk-object :init) for generating model~%")
