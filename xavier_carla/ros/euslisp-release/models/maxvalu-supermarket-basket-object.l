;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass maxvalu-supermarket-basket-object
  :super cascaded-link
  :slots (sensors
         handle0 handle1 handle2
         attention0
         joint0 joint1 ))
(defmethod maxvalu-supermarket-basket-object
  (:init
   (&rest args &key (name "maxvalu-supermarket-basket") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0 blink1 blink2
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :box
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -14.4444 -215.469 15.625) (float-vector -43.3333 -215.469 15.625) (float-vector -43.3333 -221.25 15.625) (float-vector -14.4444 -221.25 15.625)))
         (instance face :init :vertices (list (float-vector -14.4444 221.25 15.625) (float-vector -43.3333 221.25 15.625) (float-vector -43.3333 215.469 15.625) (float-vector -14.4444 215.469 15.625)))
         (instance face :init :vertices (list (float-vector -14.4444 -215.469 15.625) (float-vector -14.4444 -221.25 15.625) (float-vector -14.4444 -226.25 78.125) (float-vector -14.4444 -220.677 78.125)))
         (instance face :init :vertices (list (float-vector -14.4444 221.25 15.625) (float-vector -14.4444 215.469 15.625) (float-vector -14.4444 220.677 78.125) (float-vector -14.4444 226.25 78.125)))
         (instance face :init :vertices (list (float-vector -14.4444 -220.677 78.125) (float-vector -14.4444 -226.25 78.125) (float-vector -43.3333 -226.25 78.125) (float-vector -43.3333 -220.677 78.125)))
         (instance face :init :vertices (list (float-vector -14.4444 226.25 78.125) (float-vector -14.4444 220.677 78.125) (float-vector -43.3333 220.677 78.125) (float-vector -43.3333 226.25 78.125)))
         (instance face :init :vertices (list (float-vector -43.3333 215.469 15.625) (float-vector -43.3333 221.25 15.625) (float-vector -43.3333 226.25 78.125) (float-vector -43.3333 220.677 78.125)))
         (instance face :init :vertices (list (float-vector -43.3333 -221.25 15.625) (float-vector -43.3333 -215.469 15.625) (float-vector -43.3333 -220.677 78.125) (float-vector -43.3333 -226.25 78.125)))
         (instance face :init :vertices (list (float-vector 101.111 -215.469 15.625) (float-vector 72.2222 -215.469 15.625) (float-vector 72.2222 -221.25 15.625) (float-vector 101.111 -221.25 15.625)))
         (instance face :init :vertices (list (float-vector 101.111 -215.469 15.625) (float-vector 101.111 -221.25 15.625) (float-vector 101.111 -226.25 78.125) (float-vector 101.111 -220.677 78.125)))
         (instance face :init :vertices (list (float-vector 101.111 221.25 15.625) (float-vector 72.2222 221.25 15.625) (float-vector 72.2222 215.469 15.625) (float-vector 101.111 215.469 15.625)))
         (instance face :init :vertices (list (float-vector 101.111 221.25 15.625) (float-vector 101.111 215.469 15.625) (float-vector 101.111 220.677 78.125) (float-vector 101.111 226.25 78.125)))
         (instance face :init :vertices (list (float-vector 101.111 -220.677 78.125) (float-vector 101.111 -226.25 78.125) (float-vector 72.2222 -226.25 78.125) (float-vector 72.2222 -220.677 78.125)))
         (instance face :init :vertices (list (float-vector 101.111 226.25 78.125) (float-vector 101.111 220.677 78.125) (float-vector 72.2222 220.677 78.125) (float-vector 72.2222 226.25 78.125)))
         (instance face :init :vertices (list (float-vector 72.2222 226.25 78.125) (float-vector 72.2222 220.677 78.125) (float-vector 72.2222 215.469 15.625) (float-vector 72.2222 221.25 15.625)))
         (instance face :init :vertices (list (float-vector 72.2222 -220.677 78.125) (float-vector 72.2222 -226.25 78.125) (float-vector 72.2222 -221.25 15.625) (float-vector 72.2222 -215.469 15.625)))
         (instance face :init :vertices (list (float-vector 126.202 -24.4444 15.625) (float-vector 126.202 -73.3333 15.625) (float-vector 131.898 -73.3333 15.625) (float-vector 131.898 -24.4444 15.625)))
         (instance face :init :vertices (list (float-vector 126.202 -24.4444 15.625) (float-vector 131.898 -24.4444 15.625) (float-vector 136.528 -24.4444 78.125) (float-vector 131.01 -24.4444 78.125)))
         (instance face :init :vertices (list (float-vector -131.898 -24.4444 15.625) (float-vector -131.898 -73.3333 15.625) (float-vector -126.202 -73.3333 15.625) (float-vector -126.202 -24.4444 15.625)))
         (instance face :init :vertices (list (float-vector -131.898 -24.4444 15.625) (float-vector -126.202 -24.4444 15.625) (float-vector -131.01 -24.4444 78.125) (float-vector -136.528 -24.4444 78.125)))
         (instance face :init :vertices (list (float-vector 131.01 -24.4444 78.125) (float-vector 136.528 -24.4444 78.125) (float-vector 136.528 -73.3333 78.125) (float-vector 131.01 -73.3333 78.125)))
         (instance face :init :vertices (list (float-vector -136.528 -24.4444 78.125) (float-vector -131.01 -24.4444 78.125) (float-vector -131.01 -73.3333 78.125) (float-vector -136.528 -73.3333 78.125)))
         (instance face :init :vertices (list (float-vector -126.202 -73.3333 15.625) (float-vector -131.898 -73.3333 15.625) (float-vector -136.528 -73.3333 78.125) (float-vector -131.01 -73.3333 78.125)))
         (instance face :init :vertices (list (float-vector 131.898 -73.3333 15.625) (float-vector 126.202 -73.3333 15.625) (float-vector 131.01 -73.3333 78.125) (float-vector 136.528 -73.3333 78.125)))
         (instance face :init :vertices (list (float-vector 126.202 171.111 15.625) (float-vector 126.202 122.222 15.625) (float-vector 131.898 122.222 15.625) (float-vector 131.898 171.111 15.625)))
         (instance face :init :vertices (list (float-vector 126.202 171.111 15.625) (float-vector 131.898 171.111 15.625) (float-vector 136.528 171.111 78.125) (float-vector 131.01 171.111 78.125)))
         (instance face :init :vertices (list (float-vector -131.898 171.111 15.625) (float-vector -131.898 122.222 15.625) (float-vector -126.202 122.222 15.625) (float-vector -126.202 171.111 15.625)))
         (instance face :init :vertices (list (float-vector -131.898 171.111 15.625) (float-vector -126.202 171.111 15.625) (float-vector -131.01 171.111 78.125) (float-vector -136.528 171.111 78.125)))
         (instance face :init :vertices (list (float-vector 131.01 171.111 78.125) (float-vector 136.528 171.111 78.125) (float-vector 136.528 122.222 78.125) (float-vector 131.01 122.222 78.125)))
         (instance face :init :vertices (list (float-vector -136.528 171.111 78.125) (float-vector -131.01 171.111 78.125) (float-vector -131.01 122.222 78.125) (float-vector -136.528 122.222 78.125)))
         (instance face :init :vertices (list (float-vector -136.528 122.222 78.125) (float-vector -131.01 122.222 78.125) (float-vector -126.202 122.222 15.625) (float-vector -131.898 122.222 15.625)))
         (instance face :init :vertices (list (float-vector 131.01 122.222 78.125) (float-vector 136.528 122.222 78.125) (float-vector 131.898 122.222 15.625) (float-vector 126.202 122.222 15.625)))
         (instance face :init :vertices (list (float-vector -14.4444 -221.979 93.75) (float-vector -43.3333 -221.979 93.75) (float-vector -43.3333 -227.5 93.75) (float-vector -14.4444 -227.5 93.75)))
         (instance face :init :vertices (list (float-vector -14.4444 -221.979 93.75) (float-vector -14.4444 -227.5 93.75) (float-vector -14.4444 -232.5 156.25) (float-vector -14.4444 -227.187 156.25)))
         (instance face :init :vertices (list (float-vector -14.4444 227.5 93.75) (float-vector -43.3333 227.5 93.75) (float-vector -43.3333 221.979 93.75) (float-vector -14.4444 221.979 93.75)))
         (instance face :init :vertices (list (float-vector -14.4444 227.5 93.75) (float-vector -14.4444 221.979 93.75) (float-vector -14.4444 227.188 156.25) (float-vector -14.4444 232.5 156.25)))
         (instance face :init :vertices (list (float-vector -14.4444 -227.187 156.25) (float-vector -14.4444 -232.5 156.25) (float-vector -43.3333 -232.5 156.25) (float-vector -43.3333 -227.188 156.25)))
         (instance face :init :vertices (list (float-vector -14.4444 232.5 156.25) (float-vector -14.4444 227.188 156.25) (float-vector -43.3333 227.187 156.25) (float-vector -43.3333 232.5 156.25)))
         (instance face :init :vertices (list (float-vector -43.3333 221.979 93.75) (float-vector -43.3333 227.5 93.75) (float-vector -43.3333 232.5 156.25) (float-vector -43.3333 227.187 156.25)))
         (instance face :init :vertices (list (float-vector -43.3333 -227.5 93.75) (float-vector -43.3333 -221.979 93.75) (float-vector -43.3333 -227.188 156.25) (float-vector -43.3333 -232.5 156.25)))
         (instance face :init :vertices (list (float-vector 101.111 -221.979 93.75) (float-vector 72.2222 -221.979 93.75) (float-vector 72.2222 -227.5 93.75) (float-vector 101.111 -227.5 93.75)))
         (instance face :init :vertices (list (float-vector 101.111 -221.979 93.75) (float-vector 101.111 -227.5 93.75) (float-vector 101.111 -232.5 156.25) (float-vector 101.111 -227.187 156.25)))
         (instance face :init :vertices (list (float-vector 101.111 227.5 93.75) (float-vector 72.2222 227.5 93.75) (float-vector 72.2222 221.979 93.75) (float-vector 101.111 221.979 93.75)))
         (instance face :init :vertices (list (float-vector 101.111 227.5 93.75) (float-vector 101.111 221.979 93.75) (float-vector 101.111 227.188 156.25) (float-vector 101.111 232.5 156.25)))
         (instance face :init :vertices (list (float-vector 101.111 -227.187 156.25) (float-vector 101.111 -232.5 156.25) (float-vector 72.2222 -232.5 156.25) (float-vector 72.2222 -227.188 156.25)))
         (instance face :init :vertices (list (float-vector 101.111 232.5 156.25) (float-vector 101.111 227.188 156.25) (float-vector 72.2222 227.187 156.25) (float-vector 72.2222 232.5 156.25)))
         (instance face :init :vertices (list (float-vector 72.2222 232.5 156.25) (float-vector 72.2222 227.187 156.25) (float-vector 72.2222 221.979 93.75) (float-vector 72.2222 227.5 93.75)))
         (instance face :init :vertices (list (float-vector 72.2222 -227.188 156.25) (float-vector 72.2222 -232.5 156.25) (float-vector 72.2222 -227.5 93.75) (float-vector 72.2222 -221.979 93.75)))
         (instance face :init :vertices (list (float-vector 132.212 -24.4444 93.75) (float-vector 132.212 -73.3333 93.75) (float-vector 137.685 -73.3333 93.75) (float-vector 137.685 -24.4444 93.75)))
         (instance face :init :vertices (list (float-vector 132.212 -24.4444 93.75) (float-vector 137.685 -24.4444 93.75) (float-vector 142.315 -24.4444 156.25) (float-vector 137.019 -24.4444 156.25)))
         (instance face :init :vertices (list (float-vector -137.685 -24.4444 93.75) (float-vector -137.685 -73.3333 93.75) (float-vector -132.212 -73.3333 93.75) (float-vector -132.212 -24.4444 93.75)))
         (instance face :init :vertices (list (float-vector -137.685 -24.4444 93.75) (float-vector -132.212 -24.4444 93.75) (float-vector -137.019 -24.4444 156.25) (float-vector -142.315 -24.4444 156.25)))
         (instance face :init :vertices (list (float-vector 137.019 -24.4444 156.25) (float-vector 142.315 -24.4444 156.25) (float-vector 142.315 -73.3333 156.25) (float-vector 137.019 -73.3333 156.25)))
         (instance face :init :vertices (list (float-vector -142.315 -24.4444 156.25) (float-vector -137.019 -24.4444 156.25) (float-vector -137.019 -73.3333 156.25) (float-vector -142.315 -73.3333 156.25)))
         (instance face :init :vertices (list (float-vector -132.212 -73.3333 93.75) (float-vector -137.685 -73.3333 93.75) (float-vector -142.315 -73.3333 156.25) (float-vector -137.019 -73.3333 156.25)))
         (instance face :init :vertices (list (float-vector 137.685 -73.3333 93.75) (float-vector 132.212 -73.3333 93.75) (float-vector 137.019 -73.3333 156.25) (float-vector 142.315 -73.3333 156.25)))
         (instance face :init :vertices (list (float-vector 132.212 171.111 93.75) (float-vector 132.212 122.222 93.75) (float-vector 137.685 122.222 93.75) (float-vector 137.685 171.111 93.75)))
         (instance face :init :vertices (list (float-vector 132.212 171.111 93.75) (float-vector 137.685 171.111 93.75) (float-vector 142.315 171.111 156.25) (float-vector 137.019 171.111 156.25)))
         (instance face :init :vertices (list (float-vector -137.685 171.111 93.75) (float-vector -137.685 122.222 93.75) (float-vector -132.212 122.222 93.75) (float-vector -132.212 171.111 93.75)))
         (instance face :init :vertices (list (float-vector -137.685 171.111 93.75) (float-vector -132.212 171.111 93.75) (float-vector -137.019 171.111 156.25) (float-vector -142.315 171.111 156.25)))
         (instance face :init :vertices (list (float-vector 137.019 171.111 156.25) (float-vector 142.315 171.111 156.25) (float-vector 142.315 122.222 156.25) (float-vector 137.019 122.222 156.25)))
         (instance face :init :vertices (list (float-vector -142.315 171.111 156.25) (float-vector -137.019 171.111 156.25) (float-vector -137.019 122.222 156.25) (float-vector -142.315 122.222 156.25)))
         (instance face :init :vertices (list (float-vector -142.315 122.222 156.25) (float-vector -137.019 122.222 156.25) (float-vector -132.212 122.222 93.75) (float-vector -137.685 122.222 93.75)))
         (instance face :init :vertices (list (float-vector 137.019 122.222 156.25) (float-vector 142.315 122.222 156.25) (float-vector 137.685 122.222 93.75) (float-vector 132.212 122.222 93.75)))
         (instance face :init :vertices (list (float-vector 101.111 -228.49 171.875) (float-vector 72.2222 -228.49 171.875) (float-vector 72.2222 -233.75 171.875) (float-vector 101.111 -233.75 171.875)))
         (instance face :init :vertices (list (float-vector 101.111 -228.49 171.875) (float-vector 101.111 -233.75 171.875) (float-vector 101.111 -238.75 234.375) (float-vector 101.111 -233.698 234.375)))
         (instance face :init :vertices (list (float-vector 101.111 233.75 171.875) (float-vector 72.2222 233.75 171.875) (float-vector 72.2222 228.49 171.875) (float-vector 101.111 228.49 171.875)))
         (instance face :init :vertices (list (float-vector 101.111 233.75 171.875) (float-vector 101.111 228.49 171.875) (float-vector 101.111 233.698 234.375) (float-vector 101.111 238.75 234.375)))
         (instance face :init :vertices (list (float-vector 101.111 -233.698 234.375) (float-vector 101.111 -238.75 234.375) (float-vector 72.2222 -238.75 234.375) (float-vector 72.2222 -233.698 234.375)))
         (instance face :init :vertices (list (float-vector 101.111 238.75 234.375) (float-vector 101.111 233.698 234.375) (float-vector 72.2222 233.698 234.375) (float-vector 72.2222 238.75 234.375)))
         (instance face :init :vertices (list (float-vector 72.2222 228.49 171.875) (float-vector 72.2222 233.75 171.875) (float-vector 72.2222 238.75 234.375) (float-vector 72.2222 233.698 234.375)))
         (instance face :init :vertices (list (float-vector 72.2222 -233.75 171.875) (float-vector 72.2222 -228.49 171.875) (float-vector 72.2222 -233.698 234.375) (float-vector 72.2222 -238.75 234.375)))
         (instance face :init :vertices (list (float-vector 138.221 171.111 171.875) (float-vector 138.221 122.222 171.875) (float-vector 143.472 122.222 171.875) (float-vector 143.472 171.111 171.875)))
         (instance face :init :vertices (list (float-vector 138.221 171.111 171.875) (float-vector 143.472 171.111 171.875) (float-vector 148.102 171.111 234.375) (float-vector 143.029 171.111 234.375)))
         (instance face :init :vertices (list (float-vector -143.472 171.111 171.875) (float-vector -143.472 122.222 171.875) (float-vector -138.221 122.222 171.875) (float-vector -138.221 171.111 171.875)))
         (instance face :init :vertices (list (float-vector -143.472 171.111 171.875) (float-vector -138.221 171.111 171.875) (float-vector -143.029 171.111 234.375) (float-vector -148.102 171.111 234.375)))
         (instance face :init :vertices (list (float-vector 143.029 171.111 234.375) (float-vector 148.102 171.111 234.375) (float-vector 148.102 122.222 234.375) (float-vector 143.029 122.222 234.375)))
         (instance face :init :vertices (list (float-vector -148.102 171.111 234.375) (float-vector -143.029 171.111 234.375) (float-vector -143.029 122.222 234.375) (float-vector -148.102 122.222 234.375)))
         (instance face :init :vertices (list (float-vector -148.102 122.222 234.375) (float-vector -143.029 122.222 234.375) (float-vector -138.221 122.222 171.875) (float-vector -143.472 122.222 171.875)))
         (instance face :init :vertices (list (float-vector 143.029 122.222 234.375) (float-vector 148.102 122.222 234.375) (float-vector 143.472 122.222 171.875) (float-vector 138.221 122.222 171.875)))
         (instance face :init :vertices (list (float-vector 125.769 215.0 10.0) (float-vector 144.231 235.0 250.0) (float-vector -144.231 235.0 250.0) (float-vector -125.769 215.0 10.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector -30.0 232.708 222.5) (float-vector 30.0 232.708 222.5) (float-vector 30.0 230.625 197.5) (float-vector -30.0 230.625 197.5)))
         (instance hole :init :vertices (list (float-vector -101.111 233.698 234.375) (float-vector -72.2222 233.698 234.375) (float-vector -72.2222 228.49 171.875) (float-vector -101.111 228.49 171.875)))
         (instance hole :init :vertices (list (float-vector 14.4444 227.187 156.25) (float-vector 43.3333 227.188 156.25) (float-vector 43.3333 221.979 93.75) (float-vector 14.4444 221.979 93.75)))
         (instance hole :init :vertices (list (float-vector -101.111 227.187 156.25) (float-vector -72.2222 227.188 156.25) (float-vector -72.2222 221.979 93.75) (float-vector -101.111 221.979 93.75)))
         (instance hole :init :vertices (list (float-vector 14.4444 220.677 78.125) (float-vector 43.3333 220.677 78.125) (float-vector 43.3333 215.469 15.625) (float-vector 14.4444 215.469 15.625)))
         (instance hole :init :vertices (list (float-vector 72.2222 233.698 234.375) (float-vector 101.111 233.698 234.375) (float-vector 101.111 228.49 171.875) (float-vector 72.2222 228.49 171.875)))
         (instance hole :init :vertices (list (float-vector 72.2222 227.187 156.25) (float-vector 101.111 227.188 156.25) (float-vector 101.111 221.979 93.75) (float-vector 72.2222 221.979 93.75)))
         (instance hole :init :vertices (list (float-vector -43.3333 227.187 156.25) (float-vector -14.4444 227.188 156.25) (float-vector -14.4444 221.979 93.75) (float-vector -43.3333 221.979 93.75)))
         (instance hole :init :vertices (list (float-vector 72.2222 220.677 78.125) (float-vector 101.111 220.677 78.125) (float-vector 101.111 215.469 15.625) (float-vector 72.2222 215.469 15.625)))
         (instance hole :init :vertices (list (float-vector -43.3333 220.677 78.125) (float-vector -14.4444 220.677 78.125) (float-vector -14.4444 215.469 15.625) (float-vector -43.3333 215.469 15.625)))
         (instance hole :init :vertices (list (float-vector -101.111 215.469 15.625) (float-vector -101.111 220.677 78.125) (float-vector -72.2222 220.677 78.125) (float-vector -72.2222 215.469 15.625)))
))
         (instance face :init :vertices (list (float-vector 125.769 215.0 10.0) (float-vector -125.769 215.0 10.0) (float-vector -125.769 -215.0 10.0) (float-vector 125.769 -215.0 10.0)))
         (instance face :init :vertices (list (float-vector 125.769 -215.0 10.0) (float-vector -125.769 -215.0 10.0) (float-vector -144.231 -235.0 250.0) (float-vector 144.231 -235.0 250.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector -30.0 -230.625 197.5) (float-vector 30.0 -230.625 197.5) (float-vector 30.0 -232.708 222.5) (float-vector -30.0 -232.708 222.5)))
         (instance hole :init :vertices (list (float-vector -101.111 -228.49 171.875) (float-vector -72.2222 -228.49 171.875) (float-vector -72.2222 -233.698 234.375) (float-vector -101.111 -233.698 234.375)))
         (instance hole :init :vertices (list (float-vector 14.4444 -221.979 93.75) (float-vector 43.3333 -221.979 93.75) (float-vector 43.3333 -227.187 156.25) (float-vector 14.4444 -227.187 156.25)))
         (instance hole :init :vertices (list (float-vector -101.111 -221.979 93.75) (float-vector -72.2222 -221.979 93.75) (float-vector -72.2222 -227.187 156.25) (float-vector -101.111 -227.187 156.25)))
         (instance hole :init :vertices (list (float-vector 14.4444 -215.469 15.625) (float-vector 43.3333 -215.469 15.625) (float-vector 43.3333 -220.677 78.125) (float-vector 14.4444 -220.677 78.125)))
         (instance hole :init :vertices (list (float-vector 72.2222 -228.49 171.875) (float-vector 101.111 -228.49 171.875) (float-vector 101.111 -233.698 234.375) (float-vector 72.2222 -233.698 234.375)))
         (instance hole :init :vertices (list (float-vector 72.2222 -221.979 93.75) (float-vector 101.111 -221.979 93.75) (float-vector 101.111 -227.187 156.25) (float-vector 72.2222 -227.188 156.25)))
         (instance hole :init :vertices (list (float-vector -43.3333 -221.979 93.75) (float-vector -14.4444 -221.979 93.75) (float-vector -14.4444 -227.187 156.25) (float-vector -43.3333 -227.188 156.25)))
         (instance hole :init :vertices (list (float-vector 72.2222 -215.469 15.625) (float-vector 101.111 -215.469 15.625) (float-vector 101.111 -220.677 78.125) (float-vector 72.2222 -220.677 78.125)))
         (instance hole :init :vertices (list (float-vector -43.3333 -215.469 15.625) (float-vector -14.4444 -215.469 15.625) (float-vector -14.4444 -220.677 78.125) (float-vector -43.3333 -220.677 78.125)))
         (instance hole :init :vertices (list (float-vector -72.2222 -215.469 15.625) (float-vector -72.2222 -220.677 78.125) (float-vector -101.111 -220.677 78.125) (float-vector -101.111 -215.469 15.625)))
))
         (instance face :init :vertices (list (float-vector 144.231 235.0 250.0) (float-vector 125.769 215.0 10.0) (float-vector 125.769 -215.0 10.0) (float-vector 144.231 -235.0 250.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 138.221 -171.111 171.875) (float-vector 138.221 -122.222 171.875) (float-vector 143.029 -122.222 234.375) (float-vector 143.029 -171.111 234.375)))
         (instance hole :init :vertices (list (float-vector 132.212 24.4444 93.75) (float-vector 132.212 73.3333 93.75) (float-vector 137.019 73.3333 156.25) (float-vector 137.019 24.4444 156.25)))
         (instance hole :init :vertices (list (float-vector 132.212 -171.111 93.75) (float-vector 132.212 -122.222 93.75) (float-vector 137.019 -122.222 156.25) (float-vector 137.019 -171.111 156.25)))
         (instance hole :init :vertices (list (float-vector 126.202 24.4444 15.625) (float-vector 126.202 73.3333 15.625) (float-vector 131.01 73.3333 78.125) (float-vector 131.01 24.4444 78.125)))
         (instance hole :init :vertices (list (float-vector 126.202 -171.111 15.625) (float-vector 126.202 -122.222 15.625) (float-vector 131.01 -122.222 78.125) (float-vector 131.01 -171.111 78.125)))
         (instance hole :init :vertices (list (float-vector 138.221 122.222 171.875) (float-vector 138.221 171.111 171.875) (float-vector 143.029 171.111 234.375) (float-vector 143.029 122.222 234.375)))
         (instance hole :init :vertices (list (float-vector 132.212 122.222 93.75) (float-vector 132.212 171.111 93.75) (float-vector 137.019 171.111 156.25) (float-vector 137.019 122.222 156.25)))
         (instance hole :init :vertices (list (float-vector 132.212 -73.3333 93.75) (float-vector 132.212 -24.4444 93.75) (float-vector 137.019 -24.4444 156.25) (float-vector 137.019 -73.3333 156.25)))
         (instance hole :init :vertices (list (float-vector 126.202 122.222 15.625) (float-vector 126.202 171.111 15.625) (float-vector 131.01 171.111 78.125) (float-vector 131.01 122.222 78.125)))
         (instance hole :init :vertices (list (float-vector 126.202 -73.3333 15.625) (float-vector 126.202 -24.4444 15.625) (float-vector 131.01 -24.4444 78.125) (float-vector 131.01 -73.3333 78.125)))
))
         (instance face :init :vertices (list (float-vector -144.231 -235.0 250.0) (float-vector -125.769 -215.0 10.0) (float-vector -125.769 215.0 10.0) (float-vector -144.231 235.0 250.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector -143.029 -171.111 234.375) (float-vector -143.029 -122.222 234.375) (float-vector -138.221 -122.222 171.875) (float-vector -138.221 -171.111 171.875)))
         (instance hole :init :vertices (list (float-vector -137.019 24.4444 156.25) (float-vector -137.019 73.3333 156.25) (float-vector -132.212 73.3333 93.75) (float-vector -132.212 24.4444 93.75)))
         (instance hole :init :vertices (list (float-vector -137.019 -171.111 156.25) (float-vector -137.019 -122.222 156.25) (float-vector -132.212 -122.222 93.75) (float-vector -132.212 -171.111 93.75)))
         (instance hole :init :vertices (list (float-vector -131.01 24.4444 78.125) (float-vector -131.01 73.3333 78.125) (float-vector -126.202 73.3333 15.625) (float-vector -126.202 24.4444 15.625)))
         (instance hole :init :vertices (list (float-vector -131.01 -171.111 78.125) (float-vector -131.01 -122.222 78.125) (float-vector -126.202 -122.222 15.625) (float-vector -126.202 -171.111 15.625)))
         (instance hole :init :vertices (list (float-vector -143.029 122.222 234.375) (float-vector -143.029 171.111 234.375) (float-vector -138.221 171.111 171.875) (float-vector -138.221 122.222 171.875)))
         (instance hole :init :vertices (list (float-vector -137.019 122.222 156.25) (float-vector -137.019 171.111 156.25) (float-vector -132.212 171.111 93.75) (float-vector -132.212 122.222 93.75)))
         (instance hole :init :vertices (list (float-vector -137.019 -73.3333 156.25) (float-vector -137.019 -24.4444 156.25) (float-vector -132.212 -24.4444 93.75) (float-vector -132.212 -73.3333 93.75)))
         (instance hole :init :vertices (list (float-vector -131.01 122.222 78.125) (float-vector -131.01 171.111 78.125) (float-vector -126.202 171.111 15.625) (float-vector -126.202 122.222 15.625)))
         (instance hole :init :vertices (list (float-vector -131.01 -73.3333 78.125) (float-vector -131.01 -24.4444 78.125) (float-vector -126.202 -24.4444 15.625) (float-vector -126.202 -73.3333 15.625)))
))
         (instance face :init :vertices (list (float-vector -149.259 240.0 250.0) (float-vector -149.259 -240.0 250.0) (float-vector 149.259 -240.0 250.0) (float-vector 149.259 240.0 250.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector -144.231 235.0 250.0) (float-vector 144.231 235.0 250.0) (float-vector 144.231 -235.0 250.0) (float-vector -144.231 -235.0 250.0)))
))
         (instance face :init :vertices (list (float-vector -149.259 240.0 250.0) (float-vector 149.259 240.0 250.0) (float-vector 130.741 220.0 1.749657e-14) (float-vector -130.741 220.0 1.485451e-15))
                              :holes (list
         (instance hole :init :vertices (list (float-vector -30.0 235.8 197.5) (float-vector 30.0 235.8 197.5) (float-vector 30.0 237.8 222.5) (float-vector -30.0 237.8 222.5)))
         (instance hole :init :vertices (list (float-vector -101.111 233.75 171.875) (float-vector -72.2222 233.75 171.875) (float-vector -72.2222 238.75 234.375) (float-vector -101.111 238.75 234.375)))
         (instance hole :init :vertices (list (float-vector 14.4444 227.5 93.75) (float-vector 43.3333 227.5 93.75) (float-vector 43.3333 232.5 156.25) (float-vector 14.4444 232.5 156.25)))
         (instance hole :init :vertices (list (float-vector -101.111 227.5 93.75) (float-vector -72.2222 227.5 93.75) (float-vector -72.2222 232.5 156.25) (float-vector -101.111 232.5 156.25)))
         (instance hole :init :vertices (list (float-vector 14.4444 221.25 15.625) (float-vector 43.3333 221.25 15.625) (float-vector 43.3333 226.25 78.125) (float-vector 14.4444 226.25 78.125)))
         (instance hole :init :vertices (list (float-vector 72.2222 233.75 171.875) (float-vector 101.111 233.75 171.875) (float-vector 101.111 238.75 234.375) (float-vector 72.2222 238.75 234.375)))
         (instance hole :init :vertices (list (float-vector 72.2222 227.5 93.75) (float-vector 101.111 227.5 93.75) (float-vector 101.111 232.5 156.25) (float-vector 72.2222 232.5 156.25)))
         (instance hole :init :vertices (list (float-vector -43.3333 227.5 93.75) (float-vector -14.4444 227.5 93.75) (float-vector -14.4444 232.5 156.25) (float-vector -43.3333 232.5 156.25)))
         (instance hole :init :vertices (list (float-vector 72.2222 221.25 15.625) (float-vector 101.111 221.25 15.625) (float-vector 101.111 226.25 78.125) (float-vector 72.2222 226.25 78.125)))
         (instance hole :init :vertices (list (float-vector -43.3333 221.25 15.625) (float-vector -14.4444 221.25 15.625) (float-vector -14.4444 226.25 78.125) (float-vector -43.3333 226.25 78.125)))
         (instance hole :init :vertices (list (float-vector -72.2222 221.25 15.625) (float-vector -72.2222 226.25 78.125) (float-vector -101.111 226.25 78.125) (float-vector -101.111 221.25 15.625)))
))
         (instance face :init :vertices (list (float-vector -130.741 220.0 1.485451e-15) (float-vector 130.741 220.0 1.749657e-14) (float-vector 130.741 -220.0 1.749657e-14) (float-vector -130.741 -220.0 1.485451e-15)))
         (instance face :init :vertices (list (float-vector 130.741 -220.0 1.749657e-14) (float-vector 130.741 220.0 1.749657e-14) (float-vector 149.259 240.0 250.0) (float-vector 149.259 -240.0 250.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 148.102 -171.111 234.375) (float-vector 148.102 -122.222 234.375) (float-vector 143.472 -122.222 171.875) (float-vector 143.472 -171.111 171.875)))
         (instance hole :init :vertices (list (float-vector 142.315 24.4444 156.25) (float-vector 142.315 73.3333 156.25) (float-vector 137.685 73.3333 93.75) (float-vector 137.685 24.4444 93.75)))
         (instance hole :init :vertices (list (float-vector 142.315 -171.111 156.25) (float-vector 142.315 -122.222 156.25) (float-vector 137.685 -122.222 93.75) (float-vector 137.685 -171.111 93.75)))
         (instance hole :init :vertices (list (float-vector 136.528 24.4444 78.125) (float-vector 136.528 73.3333 78.125) (float-vector 131.898 73.3333 15.625) (float-vector 131.898 24.4444 15.625)))
         (instance hole :init :vertices (list (float-vector 136.528 -171.111 78.125) (float-vector 136.528 -122.222 78.125) (float-vector 131.898 -122.222 15.625) (float-vector 131.898 -171.111 15.625)))
         (instance hole :init :vertices (list (float-vector 148.102 122.222 234.375) (float-vector 148.102 171.111 234.375) (float-vector 143.472 171.111 171.875) (float-vector 143.472 122.222 171.875)))
         (instance hole :init :vertices (list (float-vector 142.315 122.222 156.25) (float-vector 142.315 171.111 156.25) (float-vector 137.685 171.111 93.75) (float-vector 137.685 122.222 93.75)))
         (instance hole :init :vertices (list (float-vector 142.315 -73.3333 156.25) (float-vector 142.315 -24.4444 156.25) (float-vector 137.685 -24.4444 93.75) (float-vector 137.685 -73.3333 93.75)))
         (instance hole :init :vertices (list (float-vector 136.528 122.222 78.125) (float-vector 136.528 171.111 78.125) (float-vector 131.898 171.111 15.625) (float-vector 131.898 122.222 15.625)))
         (instance hole :init :vertices (list (float-vector 136.528 -73.3333 78.125) (float-vector 136.528 -24.4444 78.125) (float-vector 131.898 -24.4444 15.625) (float-vector 131.898 -73.3333 15.625)))
))
         (instance face :init :vertices (list (float-vector -130.741 -220.0 1.485451e-15) (float-vector 130.741 -220.0 1.749657e-14) (float-vector 149.259 -240.0 250.0) (float-vector -149.259 -240.0 250.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector -30.0 -237.8 222.5) (float-vector 30.0 -237.8 222.5) (float-vector 30.0 -235.8 197.5) (float-vector -30.0 -235.8 197.5)))
         (instance hole :init :vertices (list (float-vector -101.111 -238.75 234.375) (float-vector -72.2222 -238.75 234.375) (float-vector -72.2222 -233.75 171.875) (float-vector -101.111 -233.75 171.875)))
         (instance hole :init :vertices (list (float-vector 14.4444 -232.5 156.25) (float-vector 43.3333 -232.5 156.25) (float-vector 43.3333 -227.5 93.75) (float-vector 14.4444 -227.5 93.75)))
         (instance hole :init :vertices (list (float-vector -101.111 -232.5 156.25) (float-vector -72.2222 -232.5 156.25) (float-vector -72.2222 -227.5 93.75) (float-vector -101.111 -227.5 93.75)))
         (instance hole :init :vertices (list (float-vector 14.4444 -226.25 78.125) (float-vector 43.3333 -226.25 78.125) (float-vector 43.3333 -221.25 15.625) (float-vector 14.4444 -221.25 15.625)))
         (instance hole :init :vertices (list (float-vector 72.2222 -238.75 234.375) (float-vector 101.111 -238.75 234.375) (float-vector 101.111 -233.75 171.875) (float-vector 72.2222 -233.75 171.875)))
         (instance hole :init :vertices (list (float-vector 72.2222 -232.5 156.25) (float-vector 101.111 -232.5 156.25) (float-vector 101.111 -227.5 93.75) (float-vector 72.2222 -227.5 93.75)))
         (instance hole :init :vertices (list (float-vector -43.3333 -232.5 156.25) (float-vector -14.4444 -232.5 156.25) (float-vector -14.4444 -227.5 93.75) (float-vector -43.3333 -227.5 93.75)))
         (instance hole :init :vertices (list (float-vector 72.2222 -226.25 78.125) (float-vector 101.111 -226.25 78.125) (float-vector 101.111 -221.25 15.625) (float-vector 72.2222 -221.25 15.625)))
         (instance hole :init :vertices (list (float-vector -43.3333 -226.25 78.125) (float-vector -14.4444 -226.25 78.125) (float-vector -14.4444 -221.25 15.625) (float-vector -43.3333 -221.25 15.625)))
         (instance hole :init :vertices (list (float-vector -101.111 -221.25 15.625) (float-vector -101.111 -226.25 78.125) (float-vector -72.2222 -226.25 78.125) (float-vector -72.2222 -221.25 15.625)))
))
         (instance face :init :vertices (list (float-vector -149.259 -240.0 250.0) (float-vector -149.259 240.0 250.0) (float-vector -130.741 220.0 1.485451e-15) (float-vector -130.741 -220.0 1.485451e-15))
                              :holes (list
         (instance hole :init :vertices (list (float-vector -143.472 -171.111 171.875) (float-vector -143.472 -122.222 171.875) (float-vector -148.102 -122.222 234.375) (float-vector -148.102 -171.111 234.375)))
         (instance hole :init :vertices (list (float-vector -137.685 24.4444 93.75) (float-vector -137.685 73.3333 93.75) (float-vector -142.315 73.3333 156.25) (float-vector -142.315 24.4444 156.25)))
         (instance hole :init :vertices (list (float-vector -137.685 -171.111 93.75) (float-vector -137.685 -122.222 93.75) (float-vector -142.315 -122.222 156.25) (float-vector -142.315 -171.111 156.25)))
         (instance hole :init :vertices (list (float-vector -131.898 24.4444 15.625) (float-vector -131.898 73.3333 15.625) (float-vector -136.528 73.3333 78.125) (float-vector -136.528 24.4444 78.125)))
         (instance hole :init :vertices (list (float-vector -131.898 -171.111 15.625) (float-vector -131.898 -122.222 15.625) (float-vector -136.528 -122.222 78.125) (float-vector -136.528 -171.111 78.125)))
         (instance hole :init :vertices (list (float-vector -143.472 122.222 171.875) (float-vector -143.472 171.111 171.875) (float-vector -148.102 171.111 234.375) (float-vector -148.102 122.222 234.375)))
         (instance hole :init :vertices (list (float-vector -137.685 122.222 93.75) (float-vector -137.685 171.111 93.75) (float-vector -142.315 171.111 156.25) (float-vector -142.315 122.222 156.25)))
         (instance hole :init :vertices (list (float-vector -137.685 -73.3333 93.75) (float-vector -137.685 -24.4444 93.75) (float-vector -142.315 -24.4444 156.25) (float-vector -142.315 -73.3333 156.25)))
         (instance hole :init :vertices (list (float-vector -131.898 122.222 15.625) (float-vector -131.898 171.111 15.625) (float-vector -136.528 171.111 78.125) (float-vector -136.528 122.222 78.125)))
         (instance hole :init :vertices (list (float-vector -131.898 -73.3333 15.625) (float-vector -131.898 -24.4444 15.625) (float-vector -136.528 -24.4444 78.125) (float-vector -136.528 -73.3333 78.125)))
))
         (instance face :init :vertices (list (float-vector -30.0 -230.625 197.5) (float-vector -30.0 -232.708 222.5) (float-vector -30.0 -237.8 222.5) (float-vector -30.0 -235.8 197.5)))
         (instance face :init :vertices (list (float-vector -30.0 235.8 197.5) (float-vector -30.0 237.8 222.5) (float-vector -30.0 232.708 222.5) (float-vector -30.0 230.625 197.5)))
         (instance face :init :vertices (list (float-vector 30.0 232.708 222.5) (float-vector -30.0 232.708 222.5) (float-vector -30.0 237.8 222.5) (float-vector 30.0 237.8 222.5)))
         (instance face :init :vertices (list (float-vector 30.0 -237.8 222.5) (float-vector -30.0 -237.8 222.5) (float-vector -30.0 -232.708 222.5) (float-vector 30.0 -232.708 222.5)))
         (instance face :init :vertices (list (float-vector 30.0 230.625 197.5) (float-vector 30.0 232.708 222.5) (float-vector 30.0 237.8 222.5) (float-vector 30.0 235.8 197.5)))
         (instance face :init :vertices (list (float-vector 30.0 235.8 197.5) (float-vector -30.0 235.8 197.5) (float-vector -30.0 230.625 197.5) (float-vector 30.0 230.625 197.5)))
         (instance face :init :vertices (list (float-vector 30.0 -235.8 197.5) (float-vector 30.0 -237.8 222.5) (float-vector 30.0 -232.708 222.5) (float-vector 30.0 -230.625 197.5)))
         (instance face :init :vertices (list (float-vector 30.0 -230.625 197.5) (float-vector -30.0 -230.625 197.5) (float-vector -30.0 -235.8 197.5) (float-vector 30.0 -235.8 197.5)))
         (instance face :init :vertices (list (float-vector 148.102 -171.111 234.375) (float-vector 143.472 -171.111 171.875) (float-vector 138.221 -171.111 171.875) (float-vector 143.029 -171.111 234.375)))
         (instance face :init :vertices (list (float-vector -143.029 -171.111 234.375) (float-vector -138.221 -171.111 171.875) (float-vector -143.472 -171.111 171.875) (float-vector -148.102 -171.111 234.375)))
         (instance face :init :vertices (list (float-vector -143.029 -122.222 234.375) (float-vector -143.029 -171.111 234.375) (float-vector -148.102 -171.111 234.375) (float-vector -148.102 -122.222 234.375)))
         (instance face :init :vertices (list (float-vector 148.102 -122.222 234.375) (float-vector 148.102 -171.111 234.375) (float-vector 143.029 -171.111 234.375) (float-vector 143.029 -122.222 234.375)))
         (instance face :init :vertices (list (float-vector -138.221 -122.222 171.875) (float-vector -143.029 -122.222 234.375) (float-vector -148.102 -122.222 234.375) (float-vector -143.472 -122.222 171.875)))
         (instance face :init :vertices (list (float-vector -143.472 -122.222 171.875) (float-vector -143.472 -171.111 171.875) (float-vector -138.221 -171.111 171.875) (float-vector -138.221 -122.222 171.875)))
         (instance face :init :vertices (list (float-vector 143.472 -122.222 171.875) (float-vector 148.102 -122.222 234.375) (float-vector 143.029 -122.222 234.375) (float-vector 138.221 -122.222 171.875)))
         (instance face :init :vertices (list (float-vector 138.221 -122.222 171.875) (float-vector 138.221 -171.111 171.875) (float-vector 143.472 -171.111 171.875) (float-vector 143.472 -122.222 171.875)))
         (instance face :init :vertices (list (float-vector -101.111 -228.49 171.875) (float-vector -101.111 -233.698 234.375) (float-vector -101.111 -238.75 234.375) (float-vector -101.111 -233.75 171.875)))
         (instance face :init :vertices (list (float-vector -101.111 233.75 171.875) (float-vector -101.111 238.75 234.375) (float-vector -101.111 233.698 234.375) (float-vector -101.111 228.49 171.875)))
         (instance face :init :vertices (list (float-vector -72.2222 233.698 234.375) (float-vector -101.111 233.698 234.375) (float-vector -101.111 238.75 234.375) (float-vector -72.2222 238.75 234.375)))
         (instance face :init :vertices (list (float-vector -72.2222 -238.75 234.375) (float-vector -101.111 -238.75 234.375) (float-vector -101.111 -233.698 234.375) (float-vector -72.2222 -233.698 234.375)))
         (instance face :init :vertices (list (float-vector -72.2222 228.49 171.875) (float-vector -72.2222 233.698 234.375) (float-vector -72.2222 238.75 234.375) (float-vector -72.2222 233.75 171.875)))
         (instance face :init :vertices (list (float-vector -72.2222 233.75 171.875) (float-vector -101.111 233.75 171.875) (float-vector -101.111 228.49 171.875) (float-vector -72.2222 228.49 171.875)))
         (instance face :init :vertices (list (float-vector -72.2222 -233.75 171.875) (float-vector -72.2222 -238.75 234.375) (float-vector -72.2222 -233.698 234.375) (float-vector -72.2222 -228.49 171.875)))
         (instance face :init :vertices (list (float-vector -72.2222 -228.49 171.875) (float-vector -101.111 -228.49 171.875) (float-vector -101.111 -233.75 171.875) (float-vector -72.2222 -233.75 171.875)))
         (instance face :init :vertices (list (float-vector 142.315 24.4444 156.25) (float-vector 137.685 24.4444 93.75) (float-vector 132.212 24.4444 93.75) (float-vector 137.019 24.4444 156.25)))
         (instance face :init :vertices (list (float-vector -137.019 24.4444 156.25) (float-vector -132.212 24.4444 93.75) (float-vector -137.685 24.4444 93.75) (float-vector -142.315 24.4444 156.25)))
         (instance face :init :vertices (list (float-vector -137.019 73.3333 156.25) (float-vector -137.019 24.4444 156.25) (float-vector -142.315 24.4444 156.25) (float-vector -142.315 73.3333 156.25)))
         (instance face :init :vertices (list (float-vector 142.315 73.3333 156.25) (float-vector 142.315 24.4444 156.25) (float-vector 137.019 24.4444 156.25) (float-vector 137.019 73.3333 156.25)))
         (instance face :init :vertices (list (float-vector -132.212 73.3333 93.75) (float-vector -137.019 73.3333 156.25) (float-vector -142.315 73.3333 156.25) (float-vector -137.685 73.3333 93.75)))
         (instance face :init :vertices (list (float-vector -137.685 73.3333 93.75) (float-vector -137.685 24.4444 93.75) (float-vector -132.212 24.4444 93.75) (float-vector -132.212 73.3333 93.75)))
         (instance face :init :vertices (list (float-vector 137.685 73.3333 93.75) (float-vector 142.315 73.3333 156.25) (float-vector 137.019 73.3333 156.25) (float-vector 132.212 73.3333 93.75)))
         (instance face :init :vertices (list (float-vector 132.212 73.3333 93.75) (float-vector 132.212 24.4444 93.75) (float-vector 137.685 24.4444 93.75) (float-vector 137.685 73.3333 93.75)))
         (instance face :init :vertices (list (float-vector 132.212 -171.111 93.75) (float-vector 137.019 -171.111 156.25) (float-vector 142.315 -171.111 156.25) (float-vector 137.685 -171.111 93.75)))
         (instance face :init :vertices (list (float-vector -137.685 -171.111 93.75) (float-vector -142.315 -171.111 156.25) (float-vector -137.019 -171.111 156.25) (float-vector -132.212 -171.111 93.75)))
         (instance face :init :vertices (list (float-vector -137.019 -122.222 156.25) (float-vector -137.019 -171.111 156.25) (float-vector -142.315 -171.111 156.25) (float-vector -142.315 -122.222 156.25)))
         (instance face :init :vertices (list (float-vector 142.315 -122.222 156.25) (float-vector 142.315 -171.111 156.25) (float-vector 137.019 -171.111 156.25) (float-vector 137.019 -122.222 156.25)))
         (instance face :init :vertices (list (float-vector -132.212 -122.222 93.75) (float-vector -137.019 -122.222 156.25) (float-vector -142.315 -122.222 156.25) (float-vector -137.685 -122.222 93.75)))
         (instance face :init :vertices (list (float-vector -137.685 -122.222 93.75) (float-vector -137.685 -171.111 93.75) (float-vector -132.212 -171.111 93.75) (float-vector -132.212 -122.222 93.75)))
         (instance face :init :vertices (list (float-vector 137.685 -122.222 93.75) (float-vector 142.315 -122.222 156.25) (float-vector 137.019 -122.222 156.25) (float-vector 132.212 -122.222 93.75)))
         (instance face :init :vertices (list (float-vector 132.212 -122.222 93.75) (float-vector 132.212 -171.111 93.75) (float-vector 137.685 -171.111 93.75) (float-vector 137.685 -122.222 93.75)))
         (instance face :init :vertices (list (float-vector 14.4444 -232.5 156.25) (float-vector 14.4444 -227.5 93.75) (float-vector 14.4444 -221.979 93.75) (float-vector 14.4444 -227.187 156.25)))
         (instance face :init :vertices (list (float-vector 14.4444 227.187 156.25) (float-vector 14.4444 221.979 93.75) (float-vector 14.4444 227.5 93.75) (float-vector 14.4444 232.5 156.25)))
         (instance face :init :vertices (list (float-vector 43.3333 227.188 156.25) (float-vector 14.4444 227.187 156.25) (float-vector 14.4444 232.5 156.25) (float-vector 43.3333 232.5 156.25)))
         (instance face :init :vertices (list (float-vector 43.3333 -232.5 156.25) (float-vector 14.4444 -232.5 156.25) (float-vector 14.4444 -227.187 156.25) (float-vector 43.3333 -227.187 156.25)))
         (instance face :init :vertices (list (float-vector 43.3333 221.979 93.75) (float-vector 43.3333 227.188 156.25) (float-vector 43.3333 232.5 156.25) (float-vector 43.3333 227.5 93.75)))
         (instance face :init :vertices (list (float-vector 43.3333 227.5 93.75) (float-vector 14.4444 227.5 93.75) (float-vector 14.4444 221.979 93.75) (float-vector 43.3333 221.979 93.75)))
         (instance face :init :vertices (list (float-vector 43.3333 -227.5 93.75) (float-vector 43.3333 -232.5 156.25) (float-vector 43.3333 -227.187 156.25) (float-vector 43.3333 -221.979 93.75)))
         (instance face :init :vertices (list (float-vector 43.3333 -221.979 93.75) (float-vector 14.4444 -221.979 93.75) (float-vector 14.4444 -227.5 93.75) (float-vector 43.3333 -227.5 93.75)))
         (instance face :init :vertices (list (float-vector -101.111 -221.979 93.75) (float-vector -101.111 -227.187 156.25) (float-vector -101.111 -232.5 156.25) (float-vector -101.111 -227.5 93.75)))
         (instance face :init :vertices (list (float-vector -101.111 227.5 93.75) (float-vector -101.111 232.5 156.25) (float-vector -101.111 227.187 156.25) (float-vector -101.111 221.979 93.75)))
         (instance face :init :vertices (list (float-vector -72.2222 227.188 156.25) (float-vector -101.111 227.187 156.25) (float-vector -101.111 232.5 156.25) (float-vector -72.2222 232.5 156.25)))
         (instance face :init :vertices (list (float-vector -72.2222 -232.5 156.25) (float-vector -101.111 -232.5 156.25) (float-vector -101.111 -227.187 156.25) (float-vector -72.2222 -227.187 156.25)))
         (instance face :init :vertices (list (float-vector -72.2222 221.979 93.75) (float-vector -72.2222 227.188 156.25) (float-vector -72.2222 232.5 156.25) (float-vector -72.2222 227.5 93.75)))
         (instance face :init :vertices (list (float-vector -72.2222 227.5 93.75) (float-vector -101.111 227.5 93.75) (float-vector -101.111 221.979 93.75) (float-vector -72.2222 221.979 93.75)))
         (instance face :init :vertices (list (float-vector -72.2222 -227.5 93.75) (float-vector -72.2222 -232.5 156.25) (float-vector -72.2222 -227.187 156.25) (float-vector -72.2222 -221.979 93.75)))
         (instance face :init :vertices (list (float-vector -72.2222 -221.979 93.75) (float-vector -101.111 -221.979 93.75) (float-vector -101.111 -227.5 93.75) (float-vector -72.2222 -227.5 93.75)))
         (instance face :init :vertices (list (float-vector 136.528 24.4444 78.125) (float-vector 131.898 24.4444 15.625) (float-vector 126.202 24.4444 15.625) (float-vector 131.01 24.4444 78.125)))
         (instance face :init :vertices (list (float-vector -131.01 24.4444 78.125) (float-vector -126.202 24.4444 15.625) (float-vector -131.898 24.4444 15.625) (float-vector -136.528 24.4444 78.125)))
         (instance face :init :vertices (list (float-vector -131.01 73.3333 78.125) (float-vector -131.01 24.4444 78.125) (float-vector -136.528 24.4444 78.125) (float-vector -136.528 73.3333 78.125)))
         (instance face :init :vertices (list (float-vector 136.528 73.3333 78.125) (float-vector 136.528 24.4444 78.125) (float-vector 131.01 24.4444 78.125) (float-vector 131.01 73.3333 78.125)))
         (instance face :init :vertices (list (float-vector -126.202 73.3333 15.625) (float-vector -131.01 73.3333 78.125) (float-vector -136.528 73.3333 78.125) (float-vector -131.898 73.3333 15.625)))
         (instance face :init :vertices (list (float-vector -131.898 73.3333 15.625) (float-vector -131.898 24.4444 15.625) (float-vector -126.202 24.4444 15.625) (float-vector -126.202 73.3333 15.625)))
         (instance face :init :vertices (list (float-vector 131.898 73.3333 15.625) (float-vector 136.528 73.3333 78.125) (float-vector 131.01 73.3333 78.125) (float-vector 126.202 73.3333 15.625)))
         (instance face :init :vertices (list (float-vector 126.202 73.3333 15.625) (float-vector 126.202 24.4444 15.625) (float-vector 131.898 24.4444 15.625) (float-vector 131.898 73.3333 15.625)))
         (instance face :init :vertices (list (float-vector 126.202 -171.111 15.625) (float-vector 131.01 -171.111 78.125) (float-vector 136.528 -171.111 78.125) (float-vector 131.898 -171.111 15.625)))
         (instance face :init :vertices (list (float-vector -131.898 -171.111 15.625) (float-vector -136.528 -171.111 78.125) (float-vector -131.01 -171.111 78.125) (float-vector -126.202 -171.111 15.625)))
         (instance face :init :vertices (list (float-vector -131.01 -122.222 78.125) (float-vector -131.01 -171.111 78.125) (float-vector -136.528 -171.111 78.125) (float-vector -136.528 -122.222 78.125)))
         (instance face :init :vertices (list (float-vector 136.528 -122.222 78.125) (float-vector 136.528 -171.111 78.125) (float-vector 131.01 -171.111 78.125) (float-vector 131.01 -122.222 78.125)))
         (instance face :init :vertices (list (float-vector -126.202 -122.222 15.625) (float-vector -131.01 -122.222 78.125) (float-vector -136.528 -122.222 78.125) (float-vector -131.898 -122.222 15.625)))
         (instance face :init :vertices (list (float-vector -131.898 -122.222 15.625) (float-vector -131.898 -171.111 15.625) (float-vector -126.202 -171.111 15.625) (float-vector -126.202 -122.222 15.625)))
         (instance face :init :vertices (list (float-vector 131.898 -122.222 15.625) (float-vector 136.528 -122.222 78.125) (float-vector 131.01 -122.222 78.125) (float-vector 126.202 -122.222 15.625)))
         (instance face :init :vertices (list (float-vector 126.202 -122.222 15.625) (float-vector 126.202 -171.111 15.625) (float-vector 131.898 -171.111 15.625) (float-vector 131.898 -122.222 15.625)))
         (instance face :init :vertices (list (float-vector 14.4444 -226.25 78.125) (float-vector 14.4444 -221.25 15.625) (float-vector 14.4444 -215.469 15.625) (float-vector 14.4444 -220.677 78.125)))
         (instance face :init :vertices (list (float-vector 14.4444 220.677 78.125) (float-vector 14.4444 215.469 15.625) (float-vector 14.4444 221.25 15.625) (float-vector 14.4444 226.25 78.125)))
         (instance face :init :vertices (list (float-vector 43.3333 220.677 78.125) (float-vector 14.4444 220.677 78.125) (float-vector 14.4444 226.25 78.125) (float-vector 43.3333 226.25 78.125)))
         (instance face :init :vertices (list (float-vector 43.3333 -226.25 78.125) (float-vector 14.4444 -226.25 78.125) (float-vector 14.4444 -220.677 78.125) (float-vector 43.3333 -220.677 78.125)))
         (instance face :init :vertices (list (float-vector 43.3333 215.469 15.625) (float-vector 43.3333 220.677 78.125) (float-vector 43.3333 226.25 78.125) (float-vector 43.3333 221.25 15.625)))
         (instance face :init :vertices (list (float-vector 43.3333 221.25 15.625) (float-vector 14.4444 221.25 15.625) (float-vector 14.4444 215.469 15.625) (float-vector 43.3333 215.469 15.625)))
         (instance face :init :vertices (list (float-vector 43.3333 -221.25 15.625) (float-vector 43.3333 -226.25 78.125) (float-vector 43.3333 -220.677 78.125) (float-vector 43.3333 -215.469 15.625)))
         (instance face :init :vertices (list (float-vector 43.3333 -215.469 15.625) (float-vector 14.4444 -215.469 15.625) (float-vector 14.4444 -221.25 15.625) (float-vector 43.3333 -221.25 15.625)))
         (instance face :init :vertices (list (float-vector -101.111 -215.469 15.625) (float-vector -101.111 -220.677 78.125) (float-vector -101.111 -226.25 78.125) (float-vector -101.111 -221.25 15.625)))
         (instance face :init :vertices (list (float-vector -101.111 221.25 15.625) (float-vector -101.111 226.25 78.125) (float-vector -101.111 220.677 78.125) (float-vector -101.111 215.469 15.625)))
         (instance face :init :vertices (list (float-vector -72.2222 220.677 78.125) (float-vector -101.111 220.677 78.125) (float-vector -101.111 226.25 78.125) (float-vector -72.2222 226.25 78.125)))
         (instance face :init :vertices (list (float-vector -72.2222 -226.25 78.125) (float-vector -101.111 -226.25 78.125) (float-vector -101.111 -220.677 78.125) (float-vector -72.2222 -220.677 78.125)))
         (instance face :init :vertices (list (float-vector -72.2222 215.469 15.625) (float-vector -72.2222 220.677 78.125) (float-vector -72.2222 226.25 78.125) (float-vector -72.2222 221.25 15.625)))
         (instance face :init :vertices (list (float-vector -72.2222 -221.25 15.625) (float-vector -72.2222 -226.25 78.125) (float-vector -72.2222 -220.677 78.125) (float-vector -72.2222 -215.469 15.625)))
         (instance face :init :vertices (list (float-vector -72.2222 221.25 15.625) (float-vector -101.111 221.25 15.625) (float-vector -101.111 215.469 15.625) (float-vector -72.2222 215.469 15.625)))
         (instance face :init :vertices (list (float-vector -72.2222 -215.469 15.625) (float-vector -101.111 -215.469 15.625) (float-vector -101.111 -221.25 15.625) (float-vector -72.2222 -221.25 15.625)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :box :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :left
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -150.0 0.0 -5.0) (float-vector -150.0 -160.0 -5.0) (float-vector -150.0 -160.0 5.0) (float-vector -150.0 0.0 5.0)))
         (instance face :init :vertices (list (float-vector 150.0 -160.0 -5.0) (float-vector 150.0 -160.0 5.0) (float-vector -150.0 -160.0 5.0) (float-vector -150.0 -160.0 -5.0)))
         (instance face :init :vertices (list (float-vector 150.0 0.0 -5.0) (float-vector 150.0 0.0 5.0) (float-vector 150.0 -160.0 5.0) (float-vector 150.0 -160.0 -5.0)))
         (instance face :init :vertices (list (float-vector 145.0 0.0 5.0) (float-vector 145.0 -155.0 5.0) (float-vector -145.0 -155.0 5.0) (float-vector -145.0 0.0 5.0) (float-vector -150.0 0.0 5.0) (float-vector -150.0 -160.0 5.0) (float-vector 150.0 -160.0 5.0) (float-vector 150.0 0.0 5.0)))
         (instance face :init :vertices (list (float-vector 150.0 0.0 -5.0) (float-vector 150.0 -160.0 -5.0) (float-vector -150.0 -160.0 -5.0) (float-vector -150.0 0.0 -5.0) (float-vector -145.0 0.0 -5.0) (float-vector -145.0 -155.0 -5.0) (float-vector 145.0 -155.0 -5.0) (float-vector 145.0 0.0 -5.0)))
         (instance face :init :vertices (list (float-vector -150.0 0.0 -5.0) (float-vector -150.0 0.0 5.0) (float-vector -145.0 0.0 5.0) (float-vector -145.0 0.0 -5.0)))
         (instance face :init :vertices (list (float-vector 145.0 0.0 -5.0) (float-vector 145.0 0.0 5.0) (float-vector 150.0 0.0 5.0) (float-vector 150.0 0.0 -5.0)))
         (instance face :init :vertices (list (float-vector -145.0 -155.0 -5.0) (float-vector -145.0 0.0 -5.0) (float-vector -145.0 0.0 5.0) (float-vector -145.0 -155.0 5.0)))
         (instance face :init :vertices (list (float-vector 145.0 -155.0 5.0) (float-vector 145.0 0.0 5.0) (float-vector 145.0 0.0 -5.0) (float-vector 145.0 -155.0 -5.0)))
         (instance face :init :vertices (list (float-vector 145.0 -155.0 -5.0) (float-vector -145.0 -155.0 -5.0) (float-vector -145.0 -155.0 5.0) (float-vector 145.0 -155.0 5.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray)
     (setq blink2 (instance bodyset-link :init (make-cascoords) :bodies bc :name :left :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :right
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -150.0 160.0 -5.0) (float-vector -150.0 0.0 -5.0) (float-vector -150.0 0.0 5.0) (float-vector -150.0 160.0 5.0)))
         (instance face :init :vertices (list (float-vector 150.0 0.0 -5.0) (float-vector 150.0 0.0 5.0) (float-vector 145.0 0.0 5.0) (float-vector 145.0 0.0 -5.0)))
         (instance face :init :vertices (list (float-vector -145.0 0.0 -5.0) (float-vector -145.0 0.0 5.0) (float-vector -150.0 0.0 5.0) (float-vector -150.0 0.0 -5.0)))
         (instance face :init :vertices (list (float-vector 150.0 160.0 -5.0) (float-vector 150.0 160.0 5.0) (float-vector 150.0 0.0 5.0) (float-vector 150.0 0.0 -5.0)))
         (instance face :init :vertices (list (float-vector -150.0 160.0 5.0) (float-vector -150.0 0.0 5.0) (float-vector -145.0 0.0 5.0) (float-vector -145.0 155.0 5.0) (float-vector 145.0 155.0 5.0) (float-vector 145.0 0.0 5.0) (float-vector 150.0 0.0 5.0) (float-vector 150.0 160.0 5.0)))
         (instance face :init :vertices (list (float-vector 150.0 160.0 -5.0) (float-vector 150.0 0.0 -5.0) (float-vector 145.0 0.0 -5.0) (float-vector 145.0 155.0 -5.0) (float-vector -145.0 155.0 -5.0) (float-vector -145.0 0.0 -5.0) (float-vector -150.0 0.0 -5.0) (float-vector -150.0 160.0 -5.0)))
         (instance face :init :vertices (list (float-vector -150.0 160.0 -5.0) (float-vector -150.0 160.0 5.0) (float-vector 150.0 160.0 5.0) (float-vector 150.0 160.0 -5.0)))
         (instance face :init :vertices (list (float-vector -145.0 155.0 5.0) (float-vector -145.0 0.0 5.0) (float-vector -145.0 0.0 -5.0) (float-vector -145.0 155.0 -5.0)))
         (instance face :init :vertices (list (float-vector 145.0 155.0 5.0) (float-vector -145.0 155.0 5.0) (float-vector -145.0 155.0 -5.0) (float-vector 145.0 155.0 -5.0)))
         (instance face :init :vertices (list (float-vector 145.0 155.0 -5.0) (float-vector 145.0 0.0 -5.0) (float-vector 145.0 0.0 5.0) (float-vector 145.0 155.0 5.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray)
     (setq blink1 (instance bodyset-link :init (make-cascoords) :bodies bc :name :right :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send blink1 :newcoords (make-coords :pos (float-vector 0.0 80.0 255.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink1)
     (send blink2 :newcoords (make-coords :pos (float-vector 0.0 -80.0 255.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink2)
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     ;; definition of :handle-hinge1
     (setq joint0 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink1 :name :handle-hinge1 :axis :x 
			     :min    0.0 :max  180.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :handle-hinge2
     (setq joint1 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink2 :name :handle-hinge2 :axis :x 
			     :min -180.0 :max    0.0 :max-joint-velocity 5 :max-joint-torque 100))


     ;; definition of :handle
     (setq handle0 (make-cascoords :pos (float-vector 0.0 0.0 388.564) :rot #2f((7.216450e-16 0.0 1.0) (0.0 1.0 0.0) (-1.0 0.0 7.216450e-16)) :name ":single"))
     (send blink0 :assoc handle0)
     (setq handle1 (make-cascoords :pos (float-vector 0.0 240.0 210.0) :rot #2f((7.216450e-16 0.0 1.0) (0.0 1.0 0.0) (-1.0 0.0 7.216450e-16)) :name ":larm"))
     (send blink0 :assoc handle1)
     (setq handle2 (make-cascoords :pos (float-vector 0.0 -240.0 210.0) :rot #2f((7.216450e-16 0.0 1.0) (0.0 1.0 0.0) (-1.0 0.0 7.216450e-16)) :name ":rarm"))
     (send blink0 :assoc handle2)

     ;; definition of :attention
     (setq attention0 (make-cascoords :pos (float-vector 0.0 0.0 300.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name ":opening"))
     (send blink0 :assoc attention0)

     ;; init-ending 
     (setq links (list blink0 blink1 blink2))
     (setq joint-list (list joint0 joint1))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:reset-pose () (send self :angle-vector (float-vector 0.0 0.0)))
  (:handle-hinge1 (&rest args) (forward-message-to joint0 args))
  (:handle-hinge2 (&rest args) (forward-message-to joint1 args))
  (:handle (&rest args) (forward-message-to-all (list  handle0 handle1 handle2) args))
  (:handle-single (&rest args) (forward-message-to handle0 args))
  (:handle-larm (&rest args) (forward-message-to handle1 args))
  (:handle-rarm (&rest args) (forward-message-to handle2 args))
  (:attention (&rest args) (forward-message-to-all (list  attention0) args))
  (:attention-opening (&rest args) (forward-message-to attention0 args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun maxvalu-supermarket-basket (&rest args) (instance* maxvalu-supermarket-basket-object :init args))
;; (format *error-output* "(instance maxvalu-supermarket-basket-object :init) for generating model~%")
