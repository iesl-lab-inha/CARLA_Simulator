;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass room602-uchida-shelf2-object
  :super cascaded-link
  :slots (sensors
         handle0
         ))
(defmethod room602-uchida-shelf2-object
  (:init
   (&rest args &key (name "room602-uchida-shelf2") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :room602-uchida-shelf2-bodyset2
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 300.0 900.0 50.0) (float-vector -300.0 900.0 50.0) (float-vector -300.0 -900.0 50.0) (float-vector 300.0 -900.0 50.0)))
         (instance face :init :vertices (list (float-vector -300.0 900.0 0.0) (float-vector 300.0 900.0 0.0) (float-vector 300.0 -900.0 0.0) (float-vector -300.0 -900.0 0.0)))
         (instance face :init :vertices (list (float-vector 300.0 900.0 50.0) (float-vector 300.0 900.0 0.0) (float-vector -300.0 900.0 0.0) (float-vector -300.0 900.0 50.0)))
         (instance face :init :vertices (list (float-vector 300.0 -900.0 50.0) (float-vector 300.0 -900.0 0.0) (float-vector 300.0 900.0 0.0) (float-vector 300.0 900.0 50.0)))
         (instance face :init :vertices (list (float-vector -300.0 -900.0 50.0) (float-vector -300.0 -900.0 0.0) (float-vector 300.0 -900.0 0.0) (float-vector 300.0 -900.0 50.0)))
         (instance face :init :vertices (list (float-vector -300.0 900.0 50.0) (float-vector -300.0 900.0 0.0) (float-vector -300.0 -900.0 0.0) (float-vector -300.0 -900.0 50.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 300.0 900.0 2400.0) (float-vector -300.0 900.0 2400.0) (float-vector -300.0 -900.0 2400.0) (float-vector 300.0 -900.0 2400.0)))
         (instance face :init :vertices (list (float-vector -300.0 900.0 2350.0) (float-vector 300.0 900.0 2350.0) (float-vector 300.0 -900.0 2350.0) (float-vector -300.0 -900.0 2350.0)))
         (instance face :init :vertices (list (float-vector 300.0 900.0 2400.0) (float-vector 300.0 900.0 2350.0) (float-vector -300.0 900.0 2350.0) (float-vector -300.0 900.0 2400.0)))
         (instance face :init :vertices (list (float-vector 300.0 -900.0 2400.0) (float-vector 300.0 -900.0 2350.0) (float-vector 300.0 900.0 2350.0) (float-vector 300.0 900.0 2400.0)))
         (instance face :init :vertices (list (float-vector -300.0 -900.0 2400.0) (float-vector -300.0 -900.0 2350.0) (float-vector 300.0 -900.0 2350.0) (float-vector 300.0 -900.0 2400.0)))
         (instance face :init :vertices (list (float-vector -300.0 900.0 2400.0) (float-vector -300.0 900.0 2350.0) (float-vector -300.0 -900.0 2350.0) (float-vector -300.0 -900.0 2400.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -250.0 -850.0 2350.0) (float-vector -300.0 -850.0 2350.0) (float-vector -300.0 -900.0 2350.0) (float-vector -250.0 -900.0 2350.0)))
         (instance face :init :vertices (list (float-vector -300.0 -850.0 50.0) (float-vector -250.0 -850.0 50.0) (float-vector -250.0 -900.0 50.0) (float-vector -300.0 -900.0 50.0)))
         (instance face :init :vertices (list (float-vector -250.0 -850.0 2350.0) (float-vector -250.0 -850.0 50.0) (float-vector -300.0 -850.0 50.0) (float-vector -300.0 -850.0 2350.0)))
         (instance face :init :vertices (list (float-vector -250.0 -900.0 2350.0) (float-vector -250.0 -900.0 50.0) (float-vector -250.0 -850.0 50.0) (float-vector -250.0 -850.0 2350.0)))
         (instance face :init :vertices (list (float-vector -300.0 -900.0 2350.0) (float-vector -300.0 -900.0 50.0) (float-vector -250.0 -900.0 50.0) (float-vector -250.0 -900.0 2350.0)))
         (instance face :init :vertices (list (float-vector -300.0 -850.0 2350.0) (float-vector -300.0 -850.0 50.0) (float-vector -300.0 -900.0 50.0) (float-vector -300.0 -900.0 2350.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -250.0 900.0 2350.0) (float-vector -300.0 900.0 2350.0) (float-vector -300.0 850.0 2350.0) (float-vector -250.0 850.0 2350.0)))
         (instance face :init :vertices (list (float-vector -300.0 900.0 50.0) (float-vector -250.0 900.0 50.0) (float-vector -250.0 850.0 50.0) (float-vector -300.0 850.0 50.0)))
         (instance face :init :vertices (list (float-vector -250.0 900.0 2350.0) (float-vector -250.0 900.0 50.0) (float-vector -300.0 900.0 50.0) (float-vector -300.0 900.0 2350.0)))
         (instance face :init :vertices (list (float-vector -250.0 850.0 2350.0) (float-vector -250.0 850.0 50.0) (float-vector -250.0 900.0 50.0) (float-vector -250.0 900.0 2350.0)))
         (instance face :init :vertices (list (float-vector -300.0 850.0 2350.0) (float-vector -300.0 850.0 50.0) (float-vector -250.0 850.0 50.0) (float-vector -250.0 850.0 2350.0)))
         (instance face :init :vertices (list (float-vector -300.0 900.0 2350.0) (float-vector -300.0 900.0 50.0) (float-vector -300.0 850.0 50.0) (float-vector -300.0 850.0 2350.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 300.0 -850.0 2350.0) (float-vector 250.0 -850.0 2350.0) (float-vector 250.0 -900.0 2350.0) (float-vector 300.0 -900.0 2350.0)))
         (instance face :init :vertices (list (float-vector 250.0 -850.0 50.0) (float-vector 300.0 -850.0 50.0) (float-vector 300.0 -900.0 50.0) (float-vector 250.0 -900.0 50.0)))
         (instance face :init :vertices (list (float-vector 300.0 -850.0 2350.0) (float-vector 300.0 -850.0 50.0) (float-vector 250.0 -850.0 50.0) (float-vector 250.0 -850.0 2350.0)))
         (instance face :init :vertices (list (float-vector 300.0 -900.0 2350.0) (float-vector 300.0 -900.0 50.0) (float-vector 300.0 -850.0 50.0) (float-vector 300.0 -850.0 2350.0)))
         (instance face :init :vertices (list (float-vector 250.0 -900.0 2350.0) (float-vector 250.0 -900.0 50.0) (float-vector 300.0 -900.0 50.0) (float-vector 300.0 -900.0 2350.0)))
         (instance face :init :vertices (list (float-vector 250.0 -850.0 2350.0) (float-vector 250.0 -850.0 50.0) (float-vector 250.0 -900.0 50.0) (float-vector 250.0 -900.0 2350.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 300.0 900.0 2350.0) (float-vector 250.0 900.0 2350.0) (float-vector 250.0 850.0 2350.0) (float-vector 300.0 850.0 2350.0)))
         (instance face :init :vertices (list (float-vector 250.0 900.0 50.0) (float-vector 300.0 900.0 50.0) (float-vector 300.0 850.0 50.0) (float-vector 250.0 850.0 50.0)))
         (instance face :init :vertices (list (float-vector 300.0 900.0 2350.0) (float-vector 300.0 900.0 50.0) (float-vector 250.0 900.0 50.0) (float-vector 250.0 900.0 2350.0)))
         (instance face :init :vertices (list (float-vector 300.0 850.0 2350.0) (float-vector 300.0 850.0 50.0) (float-vector 300.0 900.0 50.0) (float-vector 300.0 900.0 2350.0)))
         (instance face :init :vertices (list (float-vector 250.0 850.0 2350.0) (float-vector 250.0 850.0 50.0) (float-vector 300.0 850.0 50.0) (float-vector 300.0 850.0 2350.0)))
         (instance face :init :vertices (list (float-vector 250.0 900.0 2350.0) (float-vector 250.0 900.0 50.0) (float-vector 250.0 850.0 50.0) (float-vector 250.0 850.0 2350.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 287.5 887.5 1800.0) (float-vector -287.5 887.5 1800.0) (float-vector -287.5 -887.5 1800.0) (float-vector 287.5 -887.5 1800.0)))
         (instance face :init :vertices (list (float-vector -287.5 887.5 1750.0) (float-vector 287.5 887.5 1750.0) (float-vector 287.5 -887.5 1750.0) (float-vector -287.5 -887.5 1750.0)))
         (instance face :init :vertices (list (float-vector 287.5 887.5 1800.0) (float-vector 287.5 887.5 1750.0) (float-vector -287.5 887.5 1750.0) (float-vector -287.5 887.5 1800.0)))
         (instance face :init :vertices (list (float-vector 287.5 -887.5 1800.0) (float-vector 287.5 -887.5 1750.0) (float-vector 287.5 887.5 1750.0) (float-vector 287.5 887.5 1800.0)))
         (instance face :init :vertices (list (float-vector -287.5 -887.5 1800.0) (float-vector -287.5 -887.5 1750.0) (float-vector 287.5 -887.5 1750.0) (float-vector 287.5 -887.5 1800.0)))
         (instance face :init :vertices (list (float-vector -287.5 887.5 1800.0) (float-vector -287.5 887.5 1750.0) (float-vector -287.5 -887.5 1750.0) (float-vector -287.5 -887.5 1800.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 287.5 887.5 1225.0) (float-vector -287.5 887.5 1225.0) (float-vector -287.5 -887.5 1225.0) (float-vector 287.5 -887.5 1225.0)))
         (instance face :init :vertices (list (float-vector -287.5 887.5 1175.0) (float-vector 287.5 887.5 1175.0) (float-vector 287.5 -887.5 1175.0) (float-vector -287.5 -887.5 1175.0)))
         (instance face :init :vertices (list (float-vector 287.5 887.5 1225.0) (float-vector 287.5 887.5 1175.0) (float-vector -287.5 887.5 1175.0) (float-vector -287.5 887.5 1225.0)))
         (instance face :init :vertices (list (float-vector 287.5 -887.5 1225.0) (float-vector 287.5 -887.5 1175.0) (float-vector 287.5 887.5 1175.0) (float-vector 287.5 887.5 1225.0)))
         (instance face :init :vertices (list (float-vector -287.5 -887.5 1225.0) (float-vector -287.5 -887.5 1175.0) (float-vector 287.5 -887.5 1175.0) (float-vector 287.5 -887.5 1225.0)))
         (instance face :init :vertices (list (float-vector -287.5 887.5 1225.0) (float-vector -287.5 887.5 1175.0) (float-vector -287.5 -887.5 1175.0) (float-vector -287.5 -887.5 1225.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 287.5 887.5 650.0) (float-vector -287.5 887.5 650.0) (float-vector -287.5 -887.5 650.0) (float-vector 287.5 -887.5 650.0)))
         (instance face :init :vertices (list (float-vector -287.5 887.5 600.0) (float-vector 287.5 887.5 600.0) (float-vector 287.5 -887.5 600.0) (float-vector -287.5 -887.5 600.0)))
         (instance face :init :vertices (list (float-vector 287.5 887.5 650.0) (float-vector 287.5 887.5 600.0) (float-vector -287.5 887.5 600.0) (float-vector -287.5 887.5 650.0)))
         (instance face :init :vertices (list (float-vector 287.5 -887.5 650.0) (float-vector 287.5 -887.5 600.0) (float-vector 287.5 887.5 600.0) (float-vector 287.5 887.5 650.0)))
         (instance face :init :vertices (list (float-vector -287.5 -887.5 650.0) (float-vector -287.5 -887.5 600.0) (float-vector 287.5 -887.5 600.0) (float-vector 287.5 -887.5 650.0)))
         (instance face :init :vertices (list (float-vector -287.5 887.5 650.0) (float-vector -287.5 887.5 600.0) (float-vector -287.5 -887.5 600.0) (float-vector -287.5 -887.5 650.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :floralwhite)
     (send (elt bc 1) :set-color :floralwhite)
     (send (elt bc 2) :set-color :floralwhite)
     (send (elt bc 3) :set-color :floralwhite)
     (send (elt bc 4) :set-color :floralwhite)
     (send (elt bc 5) :set-color :floralwhite)
     (send (elt bc 6) :set-color :floralwhite)
     (send (elt bc 7) :set-color :floralwhite)
     (send (elt bc 8) :set-color :floralwhite)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :room602-uchida-shelf2-bodyset2 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint


     ;; definition of :handle
     (setq handle0 (make-cascoords :pos (float-vector 0.0 0.0 0.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name "handle0"))
     (send blink0 :assoc handle0)

     ;; init-ending 
     (setq links (list blink0))
     (setq joint-list (list))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:handle (&rest args) (forward-message-to-all (list  handle0) args))
  (:handle-handle0 (&rest args) (forward-message-to handle0 args))
  (:attention (&rest args) (forward-message-to-all (list ) args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun room602-uchida-shelf2 (&rest args) (instance* room602-uchida-shelf2-object :init args))
;; (format *error-output* "(instance room602-uchida-shelf2-object :init) for generating model~%")
