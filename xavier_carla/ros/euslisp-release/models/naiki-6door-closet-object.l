;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass naiki-6door-closet-object
  :super cascaded-link
  :slots (sensors
         handle0
         joint0 joint1 joint2 joint3 joint4 joint5 ))
(defmethod naiki-6door-closet-object
  (:init
   (&rest args &key (name "naiki-6door-closet") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0 blink1 blink2 blink3 blink4 blink5 blink6
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :root
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 257.5 450.0 1790.0) (float-vector -257.5 450.0 1790.0) (float-vector -257.5 -450.0 1790.0) (float-vector 257.5 -450.0 1790.0)))
         (instance face :init :vertices (list (float-vector -257.5 450.0 1750.0) (float-vector 257.5 450.0 1750.0) (float-vector 257.5 -450.0 1750.0) (float-vector -257.5 -450.0 1750.0)))
         (instance face :init :vertices (list (float-vector 257.5 450.0 1790.0) (float-vector 257.5 450.0 1750.0) (float-vector -257.5 450.0 1750.0) (float-vector -257.5 450.0 1790.0)))
         (instance face :init :vertices (list (float-vector 257.5 -450.0 1790.0) (float-vector 257.5 -450.0 1750.0) (float-vector 257.5 450.0 1750.0) (float-vector 257.5 450.0 1790.0)))
         (instance face :init :vertices (list (float-vector -257.5 -450.0 1790.0) (float-vector -257.5 -450.0 1750.0) (float-vector 257.5 -450.0 1750.0) (float-vector 257.5 -450.0 1790.0)))
         (instance face :init :vertices (list (float-vector -257.5 450.0 1790.0) (float-vector -257.5 450.0 1750.0) (float-vector -257.5 -450.0 1750.0) (float-vector -257.5 -450.0 1790.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 233.0 450.0 110.0) (float-vector -257.0 450.0 110.0) (float-vector -257.0 -450.0 110.0) (float-vector 233.0 -450.0 110.0)))
         (instance face :init :vertices (list (float-vector -257.0 450.0 0.0) (float-vector 233.0 450.0 0.0) (float-vector 233.0 -450.0 0.0) (float-vector -257.0 -450.0 0.0)))
         (instance face :init :vertices (list (float-vector 233.0 450.0 110.0) (float-vector 233.0 450.0 0.0) (float-vector -257.0 450.0 0.0) (float-vector -257.0 450.0 110.0)))
         (instance face :init :vertices (list (float-vector 233.0 -450.0 110.0) (float-vector 233.0 -450.0 0.0) (float-vector 233.0 450.0 0.0) (float-vector 233.0 450.0 110.0)))
         (instance face :init :vertices (list (float-vector -257.0 -450.0 110.0) (float-vector -257.0 -450.0 0.0) (float-vector 233.0 -450.0 0.0) (float-vector 233.0 -450.0 110.0)))
         (instance face :init :vertices (list (float-vector -257.0 450.0 110.0) (float-vector -257.0 450.0 0.0) (float-vector -257.0 -450.0 0.0) (float-vector -257.0 -450.0 110.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -237.0 430.0 1750.0) (float-vector -257.0 430.0 1750.0) (float-vector -257.0 -430.0 1750.0) (float-vector -237.0 -430.0 1750.0)))
         (instance face :init :vertices (list (float-vector -257.0 430.0 110.0) (float-vector -237.0 430.0 110.0) (float-vector -237.0 -430.0 110.0) (float-vector -257.0 -430.0 110.0)))
         (instance face :init :vertices (list (float-vector -237.0 430.0 1750.0) (float-vector -237.0 430.0 110.0) (float-vector -257.0 430.0 110.0) (float-vector -257.0 430.0 1750.0)))
         (instance face :init :vertices (list (float-vector -237.0 -430.0 1750.0) (float-vector -237.0 -430.0 110.0) (float-vector -237.0 430.0 110.0) (float-vector -237.0 430.0 1750.0)))
         (instance face :init :vertices (list (float-vector -257.0 -430.0 1750.0) (float-vector -257.0 -430.0 110.0) (float-vector -237.0 -430.0 110.0) (float-vector -237.0 -430.0 1750.0)))
         (instance face :init :vertices (list (float-vector -257.0 430.0 1750.0) (float-vector -257.0 430.0 110.0) (float-vector -257.0 -430.0 110.0) (float-vector -257.0 -430.0 1750.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 233.0 450.0 1750.0) (float-vector -257.0 450.0 1750.0) (float-vector -257.0 430.0 1750.0) (float-vector 233.0 430.0 1750.0)))
         (instance face :init :vertices (list (float-vector -257.0 450.0 110.0) (float-vector 233.0 450.0 110.0) (float-vector 233.0 430.0 110.0) (float-vector -257.0 430.0 110.0)))
         (instance face :init :vertices (list (float-vector 233.0 450.0 1750.0) (float-vector 233.0 450.0 110.0) (float-vector -257.0 450.0 110.0) (float-vector -257.0 450.0 1750.0)))
         (instance face :init :vertices (list (float-vector 233.0 430.0 1750.0) (float-vector 233.0 430.0 110.0) (float-vector 233.0 450.0 110.0) (float-vector 233.0 450.0 1750.0)))
         (instance face :init :vertices (list (float-vector -257.0 430.0 1750.0) (float-vector -257.0 430.0 110.0) (float-vector 233.0 430.0 110.0) (float-vector 233.0 430.0 1750.0)))
         (instance face :init :vertices (list (float-vector -257.0 450.0 1750.0) (float-vector -257.0 450.0 110.0) (float-vector -257.0 430.0 110.0) (float-vector -257.0 430.0 1750.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 233.0 -430.0 1750.0) (float-vector -257.0 -430.0 1750.0) (float-vector -257.0 -450.0 1750.0) (float-vector 233.0 -450.0 1750.0)))
         (instance face :init :vertices (list (float-vector -257.0 -430.0 110.0) (float-vector 233.0 -430.0 110.0) (float-vector 233.0 -450.0 110.0) (float-vector -257.0 -450.0 110.0)))
         (instance face :init :vertices (list (float-vector 233.0 -430.0 1750.0) (float-vector 233.0 -430.0 110.0) (float-vector -257.0 -430.0 110.0) (float-vector -257.0 -430.0 1750.0)))
         (instance face :init :vertices (list (float-vector 233.0 -450.0 1750.0) (float-vector 233.0 -450.0 110.0) (float-vector 233.0 -430.0 110.0) (float-vector 233.0 -430.0 1750.0)))
         (instance face :init :vertices (list (float-vector -257.0 -450.0 1750.0) (float-vector -257.0 -450.0 110.0) (float-vector 233.0 -450.0 110.0) (float-vector 233.0 -450.0 1750.0)))
         (instance face :init :vertices (list (float-vector -257.0 -430.0 1750.0) (float-vector -257.0 -430.0 110.0) (float-vector -257.0 -450.0 110.0) (float-vector -257.0 -450.0 1750.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 233.0 430.0 940.0) (float-vector -237.0 430.0 940.0) (float-vector -237.0 -430.0 940.0) (float-vector 233.0 -430.0 940.0)))
         (instance face :init :vertices (list (float-vector -237.0 430.0 920.0) (float-vector 233.0 430.0 920.0) (float-vector 233.0 -430.0 920.0) (float-vector -237.0 -430.0 920.0)))
         (instance face :init :vertices (list (float-vector 233.0 430.0 940.0) (float-vector 233.0 430.0 920.0) (float-vector -237.0 430.0 920.0) (float-vector -237.0 430.0 940.0)))
         (instance face :init :vertices (list (float-vector 233.0 -430.0 940.0) (float-vector 233.0 -430.0 920.0) (float-vector 233.0 430.0 920.0) (float-vector 233.0 430.0 940.0)))
         (instance face :init :vertices (list (float-vector -237.0 -430.0 940.0) (float-vector -237.0 -430.0 920.0) (float-vector 233.0 -430.0 920.0) (float-vector 233.0 -430.0 940.0)))
         (instance face :init :vertices (list (float-vector -237.0 430.0 940.0) (float-vector -237.0 430.0 920.0) (float-vector -237.0 -430.0 920.0) (float-vector -237.0 -430.0 940.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 232.5 156.667 930.0) (float-vector -257.5 156.667 930.0) (float-vector -257.5 136.667 930.0) (float-vector 232.5 136.667 930.0)))
         (instance face :init :vertices (list (float-vector -257.5 156.667 110.0) (float-vector 232.5 156.667 110.0) (float-vector 232.5 136.667 110.0) (float-vector -257.5 136.667 110.0)))
         (instance face :init :vertices (list (float-vector 232.5 156.667 930.0) (float-vector 232.5 156.667 110.0) (float-vector -257.5 156.667 110.0) (float-vector -257.5 156.667 930.0)))
         (instance face :init :vertices (list (float-vector 232.5 136.667 930.0) (float-vector 232.5 136.667 110.0) (float-vector 232.5 156.667 110.0) (float-vector 232.5 156.667 930.0)))
         (instance face :init :vertices (list (float-vector -257.5 136.667 930.0) (float-vector -257.5 136.667 110.0) (float-vector 232.5 136.667 110.0) (float-vector 232.5 136.667 930.0)))
         (instance face :init :vertices (list (float-vector -257.5 156.667 930.0) (float-vector -257.5 156.667 110.0) (float-vector -257.5 136.667 110.0) (float-vector -257.5 136.667 930.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 232.5 -136.667 930.0) (float-vector -257.5 -136.667 930.0) (float-vector -257.5 -156.667 930.0) (float-vector 232.5 -156.667 930.0)))
         (instance face :init :vertices (list (float-vector -257.5 -136.667 110.0) (float-vector 232.5 -136.667 110.0) (float-vector 232.5 -156.667 110.0) (float-vector -257.5 -156.667 110.0)))
         (instance face :init :vertices (list (float-vector 232.5 -136.667 930.0) (float-vector 232.5 -136.667 110.0) (float-vector -257.5 -136.667 110.0) (float-vector -257.5 -136.667 930.0)))
         (instance face :init :vertices (list (float-vector 232.5 -156.667 930.0) (float-vector 232.5 -156.667 110.0) (float-vector 232.5 -136.667 110.0) (float-vector 232.5 -136.667 930.0)))
         (instance face :init :vertices (list (float-vector -257.5 -156.667 930.0) (float-vector -257.5 -156.667 110.0) (float-vector 232.5 -156.667 110.0) (float-vector 232.5 -156.667 930.0)))
         (instance face :init :vertices (list (float-vector -257.5 -136.667 930.0) (float-vector -257.5 -136.667 110.0) (float-vector -257.5 -156.667 110.0) (float-vector -257.5 -156.667 930.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 232.5 156.667 1750.0) (float-vector -257.5 156.667 1750.0) (float-vector -257.5 136.667 1750.0) (float-vector 232.5 136.667 1750.0)))
         (instance face :init :vertices (list (float-vector -257.5 156.667 930.0) (float-vector 232.5 156.667 930.0) (float-vector 232.5 136.667 930.0) (float-vector -257.5 136.667 930.0)))
         (instance face :init :vertices (list (float-vector 232.5 156.667 1750.0) (float-vector 232.5 156.667 930.0) (float-vector -257.5 156.667 930.0) (float-vector -257.5 156.667 1750.0)))
         (instance face :init :vertices (list (float-vector 232.5 136.667 1750.0) (float-vector 232.5 136.667 930.0) (float-vector 232.5 156.667 930.0) (float-vector 232.5 156.667 1750.0)))
         (instance face :init :vertices (list (float-vector -257.5 136.667 1750.0) (float-vector -257.5 136.667 930.0) (float-vector 232.5 136.667 930.0) (float-vector 232.5 136.667 1750.0)))
         (instance face :init :vertices (list (float-vector -257.5 156.667 1750.0) (float-vector -257.5 156.667 930.0) (float-vector -257.5 136.667 930.0) (float-vector -257.5 136.667 1750.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 232.5 -136.667 1750.0) (float-vector -257.5 -136.667 1750.0) (float-vector -257.5 -156.667 1750.0) (float-vector 232.5 -156.667 1750.0)))
         (instance face :init :vertices (list (float-vector -257.5 -136.667 930.0) (float-vector 232.5 -136.667 930.0) (float-vector 232.5 -156.667 930.0) (float-vector -257.5 -156.667 930.0)))
         (instance face :init :vertices (list (float-vector 232.5 -136.667 1750.0) (float-vector 232.5 -136.667 930.0) (float-vector -257.5 -136.667 930.0) (float-vector -257.5 -136.667 1750.0)))
         (instance face :init :vertices (list (float-vector 232.5 -156.667 1750.0) (float-vector 232.5 -156.667 930.0) (float-vector 232.5 -136.667 930.0) (float-vector 232.5 -136.667 1750.0)))
         (instance face :init :vertices (list (float-vector -257.5 -156.667 1750.0) (float-vector -257.5 -156.667 930.0) (float-vector 232.5 -156.667 930.0) (float-vector 232.5 -156.667 1750.0)))
         (instance face :init :vertices (list (float-vector -257.5 -136.667 1750.0) (float-vector -257.5 -136.667 930.0) (float-vector -257.5 -156.667 930.0) (float-vector -257.5 -156.667 1750.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :beige)
     (send (elt bc 1) :set-color :beige)
     (send (elt bc 2) :set-color :beige)
     (send (elt bc 3) :set-color :beige)
     (send (elt bc 4) :set-color :beige)
     (send (elt bc 5) :set-color :beige)
     (send (elt bc 6) :set-color :beige)
     (send (elt bc 7) :set-color :beige)
     (send (elt bc 8) :set-color :beige)
     (send (elt bc 9) :set-color :beige)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :root :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :naiki-6door-closet-bodyset2
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 0.0 -0.5 820.0) (float-vector -25.0 -0.5 820.0) (float-vector -25.0 -280.5 820.0) (float-vector 0.0 -280.5 820.0)))
         (instance face :init :vertices (list (float-vector -25.0 -0.5 0.0) (float-vector 0.0 -0.5 0.0) (float-vector 0.0 -280.5 0.0) (float-vector -25.0 -280.5 0.0)))
         (instance face :init :vertices (list (float-vector 0.0 -0.5 820.0) (float-vector 0.0 -0.5 0.0) (float-vector -25.0 -0.5 0.0) (float-vector -25.0 -0.5 820.0)))
         (instance face :init :vertices (list (float-vector 0.0 -280.5 820.0) (float-vector 0.0 -280.5 0.0) (float-vector 0.0 -0.5 0.0) (float-vector 0.0 -0.5 820.0)))
         (instance face :init :vertices (list (float-vector -25.0 -280.5 820.0) (float-vector -25.0 -280.5 0.0) (float-vector 0.0 -280.5 0.0) (float-vector 0.0 -280.5 820.0)))
         (instance face :init :vertices (list (float-vector -25.0 -0.5 820.0) (float-vector -25.0 -0.5 0.0) (float-vector -25.0 -280.5 0.0) (float-vector -25.0 -280.5 820.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :beige)
     (setq blink6 (instance bodyset-link :init (make-cascoords) :bodies bc :name :naiki-6door-closet-bodyset2 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :naiki-6door-closet-bodyset3
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 0.0 -0.5 820.0) (float-vector -25.0 -0.5 820.0) (float-vector -25.0 -280.5 820.0) (float-vector 0.0 -280.5 820.0)))
         (instance face :init :vertices (list (float-vector -25.0 -0.5 0.0) (float-vector 0.0 -0.5 0.0) (float-vector 0.0 -280.5 0.0) (float-vector -25.0 -280.5 0.0)))
         (instance face :init :vertices (list (float-vector 0.0 -0.5 820.0) (float-vector 0.0 -0.5 0.0) (float-vector -25.0 -0.5 0.0) (float-vector -25.0 -0.5 820.0)))
         (instance face :init :vertices (list (float-vector 0.0 -280.5 820.0) (float-vector 0.0 -280.5 0.0) (float-vector 0.0 -0.5 0.0) (float-vector 0.0 -0.5 820.0)))
         (instance face :init :vertices (list (float-vector -25.0 -280.5 820.0) (float-vector -25.0 -280.5 0.0) (float-vector 0.0 -280.5 0.0) (float-vector 0.0 -280.5 820.0)))
         (instance face :init :vertices (list (float-vector -25.0 -0.5 820.0) (float-vector -25.0 -0.5 0.0) (float-vector -25.0 -280.5 0.0) (float-vector -25.0 -280.5 820.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :beige)
     (setq blink5 (instance bodyset-link :init (make-cascoords) :bodies bc :name :naiki-6door-closet-bodyset3 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :naiki-6door-closet-bodyset4
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 0.0 -0.5 820.0) (float-vector -25.0 -0.5 820.0) (float-vector -25.0 -280.5 820.0) (float-vector 0.0 -280.5 820.0)))
         (instance face :init :vertices (list (float-vector -25.0 -0.5 0.0) (float-vector 0.0 -0.5 0.0) (float-vector 0.0 -280.5 0.0) (float-vector -25.0 -280.5 0.0)))
         (instance face :init :vertices (list (float-vector 0.0 -0.5 820.0) (float-vector 0.0 -0.5 0.0) (float-vector -25.0 -0.5 0.0) (float-vector -25.0 -0.5 820.0)))
         (instance face :init :vertices (list (float-vector 0.0 -280.5 820.0) (float-vector 0.0 -280.5 0.0) (float-vector 0.0 -0.5 0.0) (float-vector 0.0 -0.5 820.0)))
         (instance face :init :vertices (list (float-vector -25.0 -280.5 820.0) (float-vector -25.0 -280.5 0.0) (float-vector 0.0 -280.5 0.0) (float-vector 0.0 -280.5 820.0)))
         (instance face :init :vertices (list (float-vector -25.0 -0.5 820.0) (float-vector -25.0 -0.5 0.0) (float-vector -25.0 -280.5 0.0) (float-vector -25.0 -280.5 820.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :beige)
     (setq blink4 (instance bodyset-link :init (make-cascoords) :bodies bc :name :naiki-6door-closet-bodyset4 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :naiki-6door-closet-bodyset5
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 0.0 -0.5 820.0) (float-vector -25.0 -0.5 820.0) (float-vector -25.0 -280.5 820.0) (float-vector 0.0 -280.5 820.0)))
         (instance face :init :vertices (list (float-vector -25.0 -0.5 0.0) (float-vector 0.0 -0.5 0.0) (float-vector 0.0 -280.5 0.0) (float-vector -25.0 -280.5 0.0)))
         (instance face :init :vertices (list (float-vector 0.0 -0.5 820.0) (float-vector 0.0 -0.5 0.0) (float-vector -25.0 -0.5 0.0) (float-vector -25.0 -0.5 820.0)))
         (instance face :init :vertices (list (float-vector 0.0 -280.5 820.0) (float-vector 0.0 -280.5 0.0) (float-vector 0.0 -0.5 0.0) (float-vector 0.0 -0.5 820.0)))
         (instance face :init :vertices (list (float-vector -25.0 -280.5 820.0) (float-vector -25.0 -280.5 0.0) (float-vector 0.0 -280.5 0.0) (float-vector 0.0 -280.5 820.0)))
         (instance face :init :vertices (list (float-vector -25.0 -0.5 820.0) (float-vector -25.0 -0.5 0.0) (float-vector -25.0 -280.5 0.0) (float-vector -25.0 -280.5 820.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :beige)
     (setq blink3 (instance bodyset-link :init (make-cascoords) :bodies bc :name :naiki-6door-closet-bodyset5 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :naiki-6door-closet-bodyset6
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 0.0 -0.5 820.0) (float-vector -25.0 -0.5 820.0) (float-vector -25.0 -280.5 820.0) (float-vector 0.0 -280.5 820.0)))
         (instance face :init :vertices (list (float-vector -25.0 -0.5 0.0) (float-vector 0.0 -0.5 0.0) (float-vector 0.0 -280.5 0.0) (float-vector -25.0 -280.5 0.0)))
         (instance face :init :vertices (list (float-vector 0.0 -0.5 820.0) (float-vector 0.0 -0.5 0.0) (float-vector -25.0 -0.5 0.0) (float-vector -25.0 -0.5 820.0)))
         (instance face :init :vertices (list (float-vector 0.0 -280.5 820.0) (float-vector 0.0 -280.5 0.0) (float-vector 0.0 -0.5 0.0) (float-vector 0.0 -0.5 820.0)))
         (instance face :init :vertices (list (float-vector -25.0 -280.5 820.0) (float-vector -25.0 -280.5 0.0) (float-vector 0.0 -280.5 0.0) (float-vector 0.0 -280.5 820.0)))
         (instance face :init :vertices (list (float-vector -25.0 -0.5 820.0) (float-vector -25.0 -0.5 0.0) (float-vector -25.0 -280.5 0.0) (float-vector -25.0 -280.5 820.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :beige)
     (setq blink2 (instance bodyset-link :init (make-cascoords) :bodies bc :name :naiki-6door-closet-bodyset6 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :naiki-6door-closet-bodyset7
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 0.0 -0.5 820.0) (float-vector -25.0 -0.5 820.0) (float-vector -25.0 -280.5 820.0) (float-vector 0.0 -280.5 820.0)))
         (instance face :init :vertices (list (float-vector -25.0 -0.5 0.0) (float-vector 0.0 -0.5 0.0) (float-vector 0.0 -280.5 0.0) (float-vector -25.0 -280.5 0.0)))
         (instance face :init :vertices (list (float-vector 0.0 -0.5 820.0) (float-vector 0.0 -0.5 0.0) (float-vector -25.0 -0.5 0.0) (float-vector -25.0 -0.5 820.0)))
         (instance face :init :vertices (list (float-vector 0.0 -280.5 820.0) (float-vector 0.0 -280.5 0.0) (float-vector 0.0 -0.5 0.0) (float-vector 0.0 -0.5 820.0)))
         (instance face :init :vertices (list (float-vector -25.0 -280.5 820.0) (float-vector -25.0 -280.5 0.0) (float-vector 0.0 -280.5 0.0) (float-vector 0.0 -280.5 820.0)))
         (instance face :init :vertices (list (float-vector -25.0 -0.5 820.0) (float-vector -25.0 -0.5 0.0) (float-vector -25.0 -280.5 0.0) (float-vector -25.0 -280.5 820.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :beige)
     (setq blink1 (instance bodyset-link :init (make-cascoords) :bodies bc :name :naiki-6door-closet-bodyset7 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send blink1 :newcoords (make-coords :pos (float-vector 255.5 -148.667 930.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink1)
     (send blink2 :newcoords (make-coords :pos (float-vector 255.5 144.667 930.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink2)
     (send blink3 :newcoords (make-coords :pos (float-vector 255.5 438.0 930.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink3)
     (send blink4 :newcoords (make-coords :pos (float-vector 255.5 -148.667 110.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink4)
     (send blink5 :newcoords (make-coords :pos (float-vector 255.5 144.667 110.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink5)
     (send blink6 :newcoords (make-coords :pos (float-vector 255.5 438.0 110.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink6)
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     ;; definition of :door0
     (setq joint0 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink1 :name :door0     :axis :z 
			     :min    0.0 :max   90.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :door1
     (setq joint1 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink2 :name :door1     :axis :z 
			     :min    0.0 :max   90.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :door2
     (setq joint2 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink3 :name :door2     :axis :z 
			     :min    0.0 :max   90.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :door3
     (setq joint3 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink4 :name :door3     :axis :z 
			     :min    0.0 :max   90.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :door4
     (setq joint4 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink5 :name :door4     :axis :z 
			     :min    0.0 :max   90.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :door5
     (setq joint5 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink6 :name :door5     :axis :z 
			     :min    0.0 :max   90.0 :max-joint-velocity 5 :max-joint-torque 100))


     ;; definition of :handle
     (setq handle0 (make-cascoords :pos (float-vector 0.0 0.0 0.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name "handle0"))
     (send blink0 :assoc handle0)

     ;; init-ending 
     (setq links (list blink0 blink1 blink2 blink3 blink4 blink5 blink6))
     (setq joint-list (list joint0 joint1 joint2 joint3 joint4 joint5))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:door0 (&rest args) (forward-message-to joint0 args))
  (:door1 (&rest args) (forward-message-to joint1 args))
  (:door2 (&rest args) (forward-message-to joint2 args))
  (:door3 (&rest args) (forward-message-to joint3 args))
  (:door4 (&rest args) (forward-message-to joint4 args))
  (:door5 (&rest args) (forward-message-to joint5 args))
  (:handle (&rest args) (forward-message-to-all (list  handle0) args))
  (:handle-handle0 (&rest args) (forward-message-to handle0 args))
  (:attention (&rest args) (forward-message-to-all (list ) args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun naiki-6door-closet (&rest args) (instance* naiki-6door-closet-object :init args))
;; (format *error-output* "(instance naiki-6door-closet-object :init) for generating model~%")
