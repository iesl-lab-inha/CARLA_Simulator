;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass square-600-closet-object
  :super cascaded-link
  :slots (sensors
         handle0 handle1 handle2 handle3 handle4 handle5
         joint0 joint1 joint2 joint3 joint4 joint5 ))
(defmethod square-600-closet-object
  (:init
   (&rest args &key (name "square-600-closet") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0 blink1 blink2 blink3 blink4 blink5 blink6
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :root
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 290.0 300.0 1720.0) (float-vector -290.0 300.0 1720.0) (float-vector -290.0 -300.0 1720.0) (float-vector 290.0 -300.0 1720.0)))
         (instance face :init :vertices (list (float-vector -290.0 300.0 1690.0) (float-vector 290.0 300.0 1690.0) (float-vector 290.0 -300.0 1690.0) (float-vector -290.0 -300.0 1690.0)))
         (instance face :init :vertices (list (float-vector 290.0 300.0 1720.0) (float-vector 290.0 300.0 1690.0) (float-vector -290.0 300.0 1690.0) (float-vector -290.0 300.0 1720.0)))
         (instance face :init :vertices (list (float-vector 290.0 -300.0 1720.0) (float-vector 290.0 -300.0 1690.0) (float-vector 290.0 300.0 1690.0) (float-vector 290.0 300.0 1720.0)))
         (instance face :init :vertices (list (float-vector -290.0 -300.0 1720.0) (float-vector -290.0 -300.0 1690.0) (float-vector 290.0 -300.0 1690.0) (float-vector 290.0 -300.0 1720.0)))
         (instance face :init :vertices (list (float-vector -290.0 300.0 1720.0) (float-vector -290.0 300.0 1690.0) (float-vector -290.0 -300.0 1690.0) (float-vector -290.0 -300.0 1720.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 290.0 300.0 32.0) (float-vector -290.0 300.0 32.0) (float-vector -290.0 -300.0 32.0) (float-vector 290.0 -300.0 32.0)))
         (instance face :init :vertices (list (float-vector -290.0 300.0 0.0) (float-vector 290.0 300.0 0.0) (float-vector 290.0 -300.0 0.0) (float-vector -290.0 -300.0 0.0)))
         (instance face :init :vertices (list (float-vector 290.0 300.0 32.0) (float-vector 290.0 300.0 0.0) (float-vector -290.0 300.0 0.0) (float-vector -290.0 300.0 32.0)))
         (instance face :init :vertices (list (float-vector 290.0 -300.0 32.0) (float-vector 290.0 -300.0 0.0) (float-vector 290.0 300.0 0.0) (float-vector 290.0 300.0 32.0)))
         (instance face :init :vertices (list (float-vector -290.0 -300.0 32.0) (float-vector -290.0 -300.0 0.0) (float-vector 290.0 -300.0 0.0) (float-vector 290.0 -300.0 32.0)))
         (instance face :init :vertices (list (float-vector -290.0 300.0 32.0) (float-vector -290.0 300.0 0.0) (float-vector -290.0 -300.0 0.0) (float-vector -290.0 -300.0 32.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -272.0 282.0 1690.0) (float-vector -290.0 282.0 1690.0) (float-vector -290.0 -282.0 1690.0) (float-vector -272.0 -282.0 1690.0)))
         (instance face :init :vertices (list (float-vector -290.0 282.0 32.0) (float-vector -272.0 282.0 32.0) (float-vector -272.0 -282.0 32.0) (float-vector -290.0 -282.0 32.0)))
         (instance face :init :vertices (list (float-vector -272.0 282.0 1690.0) (float-vector -272.0 282.0 32.0) (float-vector -290.0 282.0 32.0) (float-vector -290.0 282.0 1690.0)))
         (instance face :init :vertices (list (float-vector -272.0 -282.0 1690.0) (float-vector -272.0 -282.0 32.0) (float-vector -272.0 282.0 32.0) (float-vector -272.0 282.0 1690.0)))
         (instance face :init :vertices (list (float-vector -290.0 -282.0 1690.0) (float-vector -290.0 -282.0 32.0) (float-vector -272.0 -282.0 32.0) (float-vector -272.0 -282.0 1690.0)))
         (instance face :init :vertices (list (float-vector -290.0 282.0 1690.0) (float-vector -290.0 282.0 32.0) (float-vector -290.0 -282.0 32.0) (float-vector -290.0 -282.0 1690.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 272.0 300.0 1690.0) (float-vector -290.0 300.0 1690.0) (float-vector -290.0 282.0 1690.0) (float-vector 272.0 282.0 1690.0)))
         (instance face :init :vertices (list (float-vector -290.0 300.0 32.0) (float-vector 272.0 300.0 32.0) (float-vector 272.0 282.0 32.0) (float-vector -290.0 282.0 32.0)))
         (instance face :init :vertices (list (float-vector 272.0 300.0 1690.0) (float-vector 272.0 300.0 32.0) (float-vector -290.0 300.0 32.0) (float-vector -290.0 300.0 1690.0)))
         (instance face :init :vertices (list (float-vector 272.0 282.0 1690.0) (float-vector 272.0 282.0 32.0) (float-vector 272.0 300.0 32.0) (float-vector 272.0 300.0 1690.0)))
         (instance face :init :vertices (list (float-vector -290.0 282.0 1690.0) (float-vector -290.0 282.0 32.0) (float-vector 272.0 282.0 32.0) (float-vector 272.0 282.0 1690.0)))
         (instance face :init :vertices (list (float-vector -290.0 300.0 1690.0) (float-vector -290.0 300.0 32.0) (float-vector -290.0 282.0 32.0) (float-vector -290.0 282.0 1690.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 272.0 -282.0 1690.0) (float-vector -290.0 -282.0 1690.0) (float-vector -290.0 -300.0 1690.0) (float-vector 272.0 -300.0 1690.0)))
         (instance face :init :vertices (list (float-vector -290.0 -282.0 32.0) (float-vector 272.0 -282.0 32.0) (float-vector 272.0 -300.0 32.0) (float-vector -290.0 -300.0 32.0)))
         (instance face :init :vertices (list (float-vector 272.0 -282.0 1690.0) (float-vector 272.0 -282.0 32.0) (float-vector -290.0 -282.0 32.0) (float-vector -290.0 -282.0 1690.0)))
         (instance face :init :vertices (list (float-vector 272.0 -300.0 1690.0) (float-vector 272.0 -300.0 32.0) (float-vector 272.0 -282.0 32.0) (float-vector 272.0 -282.0 1690.0)))
         (instance face :init :vertices (list (float-vector -290.0 -300.0 1690.0) (float-vector -290.0 -300.0 32.0) (float-vector 272.0 -300.0 32.0) (float-vector 272.0 -300.0 1690.0)))
         (instance face :init :vertices (list (float-vector -290.0 -282.0 1690.0) (float-vector -290.0 -282.0 32.0) (float-vector -290.0 -300.0 32.0) (float-vector -290.0 -300.0 1690.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 272.0 -12.0 740.0) (float-vector -272.0 -12.0 740.0) (float-vector -272.0 -282.0 740.0) (float-vector 272.0 -282.0 740.0)))
         (instance face :init :vertices (list (float-vector -272.0 -12.0 722.0) (float-vector 272.0 -12.0 722.0) (float-vector 272.0 -282.0 722.0) (float-vector -272.0 -282.0 722.0)))
         (instance face :init :vertices (list (float-vector 272.0 -12.0 740.0) (float-vector 272.0 -12.0 722.0) (float-vector -272.0 -12.0 722.0) (float-vector -272.0 -12.0 740.0)))
         (instance face :init :vertices (list (float-vector 272.0 -282.0 740.0) (float-vector 272.0 -282.0 722.0) (float-vector 272.0 -12.0 722.0) (float-vector 272.0 -12.0 740.0)))
         (instance face :init :vertices (list (float-vector -272.0 -282.0 740.0) (float-vector -272.0 -282.0 722.0) (float-vector 272.0 -282.0 722.0) (float-vector 272.0 -282.0 740.0)))
         (instance face :init :vertices (list (float-vector -272.0 -12.0 740.0) (float-vector -272.0 -12.0 722.0) (float-vector -272.0 -282.0 722.0) (float-vector -272.0 -282.0 740.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 272.0 -12.0 588.0) (float-vector -272.0 -12.0 588.0) (float-vector -272.0 -282.0 588.0) (float-vector 272.0 -282.0 588.0)))
         (instance face :init :vertices (list (float-vector -272.0 -12.0 570.0) (float-vector 272.0 -12.0 570.0) (float-vector 272.0 -282.0 570.0) (float-vector -272.0 -282.0 570.0)))
         (instance face :init :vertices (list (float-vector 272.0 -12.0 588.0) (float-vector 272.0 -12.0 570.0) (float-vector -272.0 -12.0 570.0) (float-vector -272.0 -12.0 588.0)))
         (instance face :init :vertices (list (float-vector 272.0 -282.0 588.0) (float-vector 272.0 -282.0 570.0) (float-vector 272.0 -12.0 570.0) (float-vector 272.0 -12.0 588.0)))
         (instance face :init :vertices (list (float-vector -272.0 -282.0 588.0) (float-vector -272.0 -282.0 570.0) (float-vector 272.0 -282.0 570.0) (float-vector 272.0 -282.0 588.0)))
         (instance face :init :vertices (list (float-vector -272.0 -12.0 588.0) (float-vector -272.0 -12.0 570.0) (float-vector -272.0 -282.0 570.0) (float-vector -272.0 -282.0 588.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 272.0 -12.0 437.0) (float-vector -272.0 -12.0 437.0) (float-vector -272.0 -282.0 437.0) (float-vector 272.0 -282.0 437.0)))
         (instance face :init :vertices (list (float-vector -272.0 -12.0 419.0) (float-vector 272.0 -12.0 419.0) (float-vector 272.0 -282.0 419.0) (float-vector -272.0 -282.0 419.0)))
         (instance face :init :vertices (list (float-vector 272.0 -12.0 437.0) (float-vector 272.0 -12.0 419.0) (float-vector -272.0 -12.0 419.0) (float-vector -272.0 -12.0 437.0)))
         (instance face :init :vertices (list (float-vector 272.0 -282.0 437.0) (float-vector 272.0 -282.0 419.0) (float-vector 272.0 -12.0 419.0) (float-vector 272.0 -12.0 437.0)))
         (instance face :init :vertices (list (float-vector -272.0 -282.0 437.0) (float-vector -272.0 -282.0 419.0) (float-vector 272.0 -282.0 419.0) (float-vector 272.0 -282.0 437.0)))
         (instance face :init :vertices (list (float-vector -272.0 -12.0 437.0) (float-vector -272.0 -12.0 419.0) (float-vector -272.0 -282.0 419.0) (float-vector -272.0 -282.0 437.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 272.0 -12.0 235.0) (float-vector -272.0 -12.0 235.0) (float-vector -272.0 -282.0 235.0) (float-vector 272.0 -282.0 235.0)))
         (instance face :init :vertices (list (float-vector -272.0 -12.0 217.0) (float-vector 272.0 -12.0 217.0) (float-vector 272.0 -282.0 217.0) (float-vector -272.0 -282.0 217.0)))
         (instance face :init :vertices (list (float-vector 272.0 -12.0 235.0) (float-vector 272.0 -12.0 217.0) (float-vector -272.0 -12.0 217.0) (float-vector -272.0 -12.0 235.0)))
         (instance face :init :vertices (list (float-vector 272.0 -282.0 235.0) (float-vector 272.0 -282.0 217.0) (float-vector 272.0 -12.0 217.0) (float-vector 272.0 -12.0 235.0)))
         (instance face :init :vertices (list (float-vector -272.0 -282.0 235.0) (float-vector -272.0 -282.0 217.0) (float-vector 272.0 -282.0 217.0) (float-vector 272.0 -282.0 235.0)))
         (instance face :init :vertices (list (float-vector -272.0 -12.0 235.0) (float-vector -272.0 -12.0 217.0) (float-vector -272.0 -282.0 217.0) (float-vector -272.0 -282.0 235.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 263.0 6.0 1690.0) (float-vector -281.0 6.0 1690.0) (float-vector -281.0 -12.0 1690.0) (float-vector 263.0 -12.0 1690.0)))
         (instance face :init :vertices (list (float-vector -281.0 6.0 32.0) (float-vector 263.0 6.0 32.0) (float-vector 263.0 -12.0 32.0) (float-vector -281.0 -12.0 32.0)))
         (instance face :init :vertices (list (float-vector 263.0 6.0 1690.0) (float-vector 263.0 6.0 32.0) (float-vector -281.0 6.0 32.0) (float-vector -281.0 6.0 1690.0)))
         (instance face :init :vertices (list (float-vector 263.0 -12.0 1690.0) (float-vector 263.0 -12.0 32.0) (float-vector 263.0 6.0 32.0) (float-vector 263.0 6.0 1690.0)))
         (instance face :init :vertices (list (float-vector -281.0 -12.0 1690.0) (float-vector -281.0 -12.0 32.0) (float-vector 263.0 -12.0 32.0) (float-vector 263.0 -12.0 1690.0)))
         (instance face :init :vertices (list (float-vector -281.0 6.0 1690.0) (float-vector -281.0 6.0 32.0) (float-vector -281.0 -12.0 32.0) (float-vector -281.0 -12.0 1690.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :sienna4)
     (send (elt bc 1) :set-color :sienna4)
     (send (elt bc 2) :set-color :sienna4)
     (send (elt bc 3) :set-color :sienna4)
     (send (elt bc 4) :set-color :sienna4)
     (send (elt bc 5) :set-color :sienna4)
     (send (elt bc 6) :set-color :sienna4)
     (send (elt bc 7) :set-color :sienna4)
     (send (elt bc 8) :set-color :sienna4)
     (send (elt bc 9) :set-color :sienna4)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :root :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :square-600-closet-bodyset2
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -264.0 129.0 -89.5) (float-vector -264.0 -129.0 -89.5) (float-vector -264.0 -129.0 89.5) (float-vector -264.0 129.0 89.5)))
         (instance face :init :vertices (list (float-vector 264.0 -129.0 -89.5) (float-vector 264.0 -129.0 89.5) (float-vector -264.0 -129.0 89.5) (float-vector -264.0 -129.0 -89.5)))
         (instance face :init :vertices (list (float-vector 264.0 129.0 -89.5) (float-vector 264.0 129.0 89.5) (float-vector 264.0 111.0 89.5) (float-vector 264.0 111.0 -71.5) (float-vector 264.0 -111.0 -71.5) (float-vector 264.0 -111.0 89.5) (float-vector 264.0 -129.0 89.5) (float-vector 264.0 -129.0 -89.5)))
         (instance face :init :vertices (list (float-vector -264.0 129.0 89.5) (float-vector -264.0 -129.0 89.5) (float-vector 264.0 -129.0 89.5) (float-vector 264.0 -111.0 89.5) (float-vector -246.0 -111.0 89.5) (float-vector -246.0 111.0 89.5) (float-vector 264.0 111.0 89.5) (float-vector 264.0 129.0 89.5)))
         (instance face :init :vertices (list (float-vector 264.0 129.0 -89.5) (float-vector 264.0 -129.0 -89.5) (float-vector -264.0 -129.0 -89.5) (float-vector -264.0 129.0 -89.5)))
         (instance face :init :vertices (list (float-vector -264.0 129.0 -89.5) (float-vector -264.0 129.0 89.5) (float-vector 264.0 129.0 89.5) (float-vector 264.0 129.0 -89.5)))
         (instance face :init :vertices (list (float-vector -246.0 111.0 89.5) (float-vector -246.0 -111.0 89.5) (float-vector -246.0 -111.0 -71.5) (float-vector -246.0 111.0 -71.5)))
         (instance face :init :vertices (list (float-vector -246.0 -111.0 -71.5) (float-vector -246.0 -111.0 89.5) (float-vector 264.0 -111.0 89.5) (float-vector 264.0 -111.0 -71.5)))
         (instance face :init :vertices (list (float-vector 264.0 111.0 -71.5) (float-vector 264.0 111.0 89.5) (float-vector -246.0 111.0 89.5) (float-vector -246.0 111.0 -71.5)))
         (instance face :init :vertices (list (float-vector -246.0 111.0 -71.5) (float-vector -246.0 -111.0 -71.5) (float-vector 264.0 -111.0 -71.5) (float-vector 264.0 111.0 -71.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 264.0 147.0 -89.5) (float-vector 264.0 -147.0 -89.5) (float-vector 264.0 -147.0 107.5) (float-vector 264.0 147.0 107.5)))
         (instance face :init :vertices (list (float-vector 282.0 -147.0 -89.5) (float-vector 282.0 -147.0 107.5) (float-vector 264.0 -147.0 107.5) (float-vector 264.0 -147.0 -89.5)))
         (instance face :init :vertices (list (float-vector 282.0 147.0 -89.5) (float-vector 282.0 147.0 107.5) (float-vector 282.0 -147.0 107.5) (float-vector 282.0 -147.0 -89.5))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 282.0 -36.0 -3.5) (float-vector 282.0 -36.0 14.5) (float-vector 282.0 36.0 14.5) (float-vector 282.0 36.0 -3.5)))
))
         (instance face :init :vertices (list (float-vector 264.0 147.0 107.5) (float-vector 264.0 -147.0 107.5) (float-vector 282.0 -147.0 107.5) (float-vector 282.0 147.0 107.5)))
         (instance face :init :vertices (list (float-vector 282.0 147.0 -89.5) (float-vector 282.0 -147.0 -89.5) (float-vector 264.0 -147.0 -89.5) (float-vector 264.0 147.0 -89.5)))
         (instance face :init :vertices (list (float-vector 264.0 147.0 -89.5) (float-vector 264.0 147.0 107.5) (float-vector 282.0 147.0 107.5) (float-vector 282.0 147.0 -89.5)))
         (instance face :init :vertices (list (float-vector 272.0 36.0 14.5) (float-vector 272.0 -36.0 14.5) (float-vector 272.0 -36.0 -3.5) (float-vector 272.0 36.0 -3.5)))
         (instance face :init :vertices (list (float-vector 272.0 -36.0 -3.5) (float-vector 272.0 -36.0 14.5) (float-vector 282.0 -36.0 14.5) (float-vector 282.0 -36.0 -3.5)))
         (instance face :init :vertices (list (float-vector 282.0 36.0 14.5) (float-vector 282.0 -36.0 14.5) (float-vector 272.0 -36.0 14.5) (float-vector 272.0 36.0 14.5)))
         (instance face :init :vertices (list (float-vector 282.0 36.0 -3.5) (float-vector 282.0 36.0 14.5) (float-vector 272.0 36.0 14.5) (float-vector 272.0 36.0 -3.5)))
         (instance face :init :vertices (list (float-vector 272.0 36.0 -3.5) (float-vector 272.0 -36.0 -3.5) (float-vector 282.0 -36.0 -3.5) (float-vector 282.0 36.0 -3.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 282.0 49.0 -12.5) (float-vector 282.0 -49.0 -12.5) (float-vector 282.0 -49.0 27.5) (float-vector 282.0 49.0 27.5))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 282.0 36.0 -3.5) (float-vector 282.0 36.0 14.5) (float-vector 282.0 -36.0 14.5) (float-vector 282.0 -36.0 -3.5)))
))
         (instance face :init :vertices (list (float-vector 287.0 -49.0 -12.5) (float-vector 287.0 -49.0 27.5) (float-vector 282.0 -49.0 27.5) (float-vector 282.0 -49.0 -12.5)))
         (instance face :init :vertices (list (float-vector 287.0 49.0 -12.5) (float-vector 287.0 49.0 27.5) (float-vector 287.0 -49.0 27.5) (float-vector 287.0 -49.0 -12.5))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 287.0 -36.0 -3.5) (float-vector 287.0 -36.0 14.5) (float-vector 287.0 36.0 14.5) (float-vector 287.0 36.0 -3.5)))
))
         (instance face :init :vertices (list (float-vector 282.0 49.0 27.5) (float-vector 282.0 -49.0 27.5) (float-vector 287.0 -49.0 27.5) (float-vector 287.0 49.0 27.5)))
         (instance face :init :vertices (list (float-vector 287.0 49.0 -12.5) (float-vector 287.0 -49.0 -12.5) (float-vector 282.0 -49.0 -12.5) (float-vector 282.0 49.0 -12.5)))
         (instance face :init :vertices (list (float-vector 282.0 49.0 -12.5) (float-vector 282.0 49.0 27.5) (float-vector 287.0 49.0 27.5) (float-vector 287.0 49.0 -12.5)))
         (instance face :init :vertices (list (float-vector 282.0 -36.0 -3.5) (float-vector 282.0 -36.0 14.5) (float-vector 287.0 -36.0 14.5) (float-vector 287.0 -36.0 -3.5)))
         (instance face :init :vertices (list (float-vector 287.0 36.0 14.5) (float-vector 287.0 -36.0 14.5) (float-vector 282.0 -36.0 14.5) (float-vector 282.0 36.0 14.5)))
         (instance face :init :vertices (list (float-vector 287.0 36.0 -3.5) (float-vector 287.0 36.0 14.5) (float-vector 282.0 36.0 14.5) (float-vector 282.0 36.0 -3.5)))
         (instance face :init :vertices (list (float-vector 282.0 36.0 -3.5) (float-vector 282.0 -36.0 -3.5) (float-vector 287.0 -36.0 -3.5) (float-vector 287.0 36.0 -3.5)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :wheat1)
     (send (elt bc 1) :set-color :sienna4)
     (send (elt bc 2) :set-color :gainsboro)
     (setq blink6 (instance bodyset-link :init (make-cascoords) :bodies bc :name :square-600-closet-bodyset2 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :square-600-closet-bodyset3
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -264.0 129.0 -89.5) (float-vector -264.0 -129.0 -89.5) (float-vector -264.0 -129.0 89.5) (float-vector -264.0 129.0 89.5)))
         (instance face :init :vertices (list (float-vector 264.0 -129.0 -89.5) (float-vector 264.0 -129.0 89.5) (float-vector -264.0 -129.0 89.5) (float-vector -264.0 -129.0 -89.5)))
         (instance face :init :vertices (list (float-vector 264.0 129.0 -89.5) (float-vector 264.0 129.0 89.5) (float-vector 264.0 111.0 89.5) (float-vector 264.0 111.0 -71.5) (float-vector 264.0 -111.0 -71.5) (float-vector 264.0 -111.0 89.5) (float-vector 264.0 -129.0 89.5) (float-vector 264.0 -129.0 -89.5)))
         (instance face :init :vertices (list (float-vector -264.0 129.0 89.5) (float-vector -264.0 -129.0 89.5) (float-vector 264.0 -129.0 89.5) (float-vector 264.0 -111.0 89.5) (float-vector -246.0 -111.0 89.5) (float-vector -246.0 111.0 89.5) (float-vector 264.0 111.0 89.5) (float-vector 264.0 129.0 89.5)))
         (instance face :init :vertices (list (float-vector 264.0 129.0 -89.5) (float-vector 264.0 -129.0 -89.5) (float-vector -264.0 -129.0 -89.5) (float-vector -264.0 129.0 -89.5)))
         (instance face :init :vertices (list (float-vector -264.0 129.0 -89.5) (float-vector -264.0 129.0 89.5) (float-vector 264.0 129.0 89.5) (float-vector 264.0 129.0 -89.5)))
         (instance face :init :vertices (list (float-vector -246.0 111.0 89.5) (float-vector -246.0 -111.0 89.5) (float-vector -246.0 -111.0 -71.5) (float-vector -246.0 111.0 -71.5)))
         (instance face :init :vertices (list (float-vector -246.0 -111.0 -71.5) (float-vector -246.0 -111.0 89.5) (float-vector 264.0 -111.0 89.5) (float-vector 264.0 -111.0 -71.5)))
         (instance face :init :vertices (list (float-vector 264.0 111.0 -71.5) (float-vector 264.0 111.0 89.5) (float-vector -246.0 111.0 89.5) (float-vector -246.0 111.0 -71.5)))
         (instance face :init :vertices (list (float-vector -246.0 111.0 -71.5) (float-vector -246.0 -111.0 -71.5) (float-vector 264.0 -111.0 -71.5) (float-vector 264.0 111.0 -71.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 264.0 147.0 -89.5) (float-vector 264.0 -147.0 -89.5) (float-vector 264.0 -147.0 107.5) (float-vector 264.0 147.0 107.5)))
         (instance face :init :vertices (list (float-vector 282.0 -147.0 -89.5) (float-vector 282.0 -147.0 107.5) (float-vector 264.0 -147.0 107.5) (float-vector 264.0 -147.0 -89.5)))
         (instance face :init :vertices (list (float-vector 282.0 147.0 -89.5) (float-vector 282.0 147.0 107.5) (float-vector 282.0 -147.0 107.5) (float-vector 282.0 -147.0 -89.5))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 282.0 -36.0 -3.5) (float-vector 282.0 -36.0 14.5) (float-vector 282.0 36.0 14.5) (float-vector 282.0 36.0 -3.5)))
))
         (instance face :init :vertices (list (float-vector 264.0 147.0 107.5) (float-vector 264.0 -147.0 107.5) (float-vector 282.0 -147.0 107.5) (float-vector 282.0 147.0 107.5)))
         (instance face :init :vertices (list (float-vector 282.0 147.0 -89.5) (float-vector 282.0 -147.0 -89.5) (float-vector 264.0 -147.0 -89.5) (float-vector 264.0 147.0 -89.5)))
         (instance face :init :vertices (list (float-vector 264.0 147.0 -89.5) (float-vector 264.0 147.0 107.5) (float-vector 282.0 147.0 107.5) (float-vector 282.0 147.0 -89.5)))
         (instance face :init :vertices (list (float-vector 272.0 36.0 14.5) (float-vector 272.0 -36.0 14.5) (float-vector 272.0 -36.0 -3.5) (float-vector 272.0 36.0 -3.5)))
         (instance face :init :vertices (list (float-vector 272.0 -36.0 -3.5) (float-vector 272.0 -36.0 14.5) (float-vector 282.0 -36.0 14.5) (float-vector 282.0 -36.0 -3.5)))
         (instance face :init :vertices (list (float-vector 282.0 36.0 14.5) (float-vector 282.0 -36.0 14.5) (float-vector 272.0 -36.0 14.5) (float-vector 272.0 36.0 14.5)))
         (instance face :init :vertices (list (float-vector 282.0 36.0 -3.5) (float-vector 282.0 36.0 14.5) (float-vector 272.0 36.0 14.5) (float-vector 272.0 36.0 -3.5)))
         (instance face :init :vertices (list (float-vector 272.0 36.0 -3.5) (float-vector 272.0 -36.0 -3.5) (float-vector 282.0 -36.0 -3.5) (float-vector 282.0 36.0 -3.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 282.0 49.0 -12.5) (float-vector 282.0 -49.0 -12.5) (float-vector 282.0 -49.0 27.5) (float-vector 282.0 49.0 27.5))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 282.0 36.0 -3.5) (float-vector 282.0 36.0 14.5) (float-vector 282.0 -36.0 14.5) (float-vector 282.0 -36.0 -3.5)))
))
         (instance face :init :vertices (list (float-vector 287.0 -49.0 -12.5) (float-vector 287.0 -49.0 27.5) (float-vector 282.0 -49.0 27.5) (float-vector 282.0 -49.0 -12.5)))
         (instance face :init :vertices (list (float-vector 287.0 49.0 -12.5) (float-vector 287.0 49.0 27.5) (float-vector 287.0 -49.0 27.5) (float-vector 287.0 -49.0 -12.5))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 287.0 -36.0 -3.5) (float-vector 287.0 -36.0 14.5) (float-vector 287.0 36.0 14.5) (float-vector 287.0 36.0 -3.5)))
))
         (instance face :init :vertices (list (float-vector 282.0 49.0 27.5) (float-vector 282.0 -49.0 27.5) (float-vector 287.0 -49.0 27.5) (float-vector 287.0 49.0 27.5)))
         (instance face :init :vertices (list (float-vector 287.0 49.0 -12.5) (float-vector 287.0 -49.0 -12.5) (float-vector 282.0 -49.0 -12.5) (float-vector 282.0 49.0 -12.5)))
         (instance face :init :vertices (list (float-vector 282.0 49.0 -12.5) (float-vector 282.0 49.0 27.5) (float-vector 287.0 49.0 27.5) (float-vector 287.0 49.0 -12.5)))
         (instance face :init :vertices (list (float-vector 282.0 -36.0 -3.5) (float-vector 282.0 -36.0 14.5) (float-vector 287.0 -36.0 14.5) (float-vector 287.0 -36.0 -3.5)))
         (instance face :init :vertices (list (float-vector 287.0 36.0 14.5) (float-vector 287.0 -36.0 14.5) (float-vector 282.0 -36.0 14.5) (float-vector 282.0 36.0 14.5)))
         (instance face :init :vertices (list (float-vector 287.0 36.0 -3.5) (float-vector 287.0 36.0 14.5) (float-vector 282.0 36.0 14.5) (float-vector 282.0 36.0 -3.5)))
         (instance face :init :vertices (list (float-vector 282.0 36.0 -3.5) (float-vector 282.0 -36.0 -3.5) (float-vector 287.0 -36.0 -3.5) (float-vector 287.0 36.0 -3.5)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :wheat1)
     (send (elt bc 1) :set-color :sienna4)
     (send (elt bc 2) :set-color :gainsboro)
     (setq blink5 (instance bodyset-link :init (make-cascoords) :bodies bc :name :square-600-closet-bodyset3 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :square-600-closet-bodyset4
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -264.0 129.0 -64.0) (float-vector -264.0 -129.0 -64.0) (float-vector -264.0 -129.0 64.0) (float-vector -264.0 129.0 64.0)))
         (instance face :init :vertices (list (float-vector 264.0 -129.0 -64.0) (float-vector 264.0 -129.0 64.0) (float-vector -264.0 -129.0 64.0) (float-vector -264.0 -129.0 -64.0)))
         (instance face :init :vertices (list (float-vector 264.0 129.0 -64.0) (float-vector 264.0 129.0 64.0) (float-vector 264.0 111.0 64.0) (float-vector 264.0 111.0 -46.0) (float-vector 264.0 -111.0 -46.0) (float-vector 264.0 -111.0 64.0) (float-vector 264.0 -129.0 64.0) (float-vector 264.0 -129.0 -64.0)))
         (instance face :init :vertices (list (float-vector -264.0 129.0 64.0) (float-vector -264.0 -129.0 64.0) (float-vector 264.0 -129.0 64.0) (float-vector 264.0 -111.0 64.0) (float-vector -246.0 -111.0 64.0) (float-vector -246.0 111.0 64.0) (float-vector 264.0 111.0 64.0) (float-vector 264.0 129.0 64.0)))
         (instance face :init :vertices (list (float-vector 264.0 129.0 -64.0) (float-vector 264.0 -129.0 -64.0) (float-vector -264.0 -129.0 -64.0) (float-vector -264.0 129.0 -64.0)))
         (instance face :init :vertices (list (float-vector -264.0 129.0 -64.0) (float-vector -264.0 129.0 64.0) (float-vector 264.0 129.0 64.0) (float-vector 264.0 129.0 -64.0)))
         (instance face :init :vertices (list (float-vector -246.0 111.0 64.0) (float-vector -246.0 -111.0 64.0) (float-vector -246.0 -111.0 -46.0) (float-vector -246.0 111.0 -46.0)))
         (instance face :init :vertices (list (float-vector -246.0 -111.0 -46.0) (float-vector -246.0 -111.0 64.0) (float-vector 264.0 -111.0 64.0) (float-vector 264.0 -111.0 -46.0)))
         (instance face :init :vertices (list (float-vector 264.0 111.0 -46.0) (float-vector 264.0 111.0 64.0) (float-vector -246.0 111.0 64.0) (float-vector -246.0 111.0 -46.0)))
         (instance face :init :vertices (list (float-vector -246.0 111.0 -46.0) (float-vector -246.0 -111.0 -46.0) (float-vector 264.0 -111.0 -46.0) (float-vector 264.0 111.0 -46.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 264.0 147.0 -64.0) (float-vector 264.0 -147.0 -64.0) (float-vector 264.0 -147.0 82.0) (float-vector 264.0 147.0 82.0)))
         (instance face :init :vertices (list (float-vector 282.0 -147.0 -64.0) (float-vector 282.0 -147.0 82.0) (float-vector 264.0 -147.0 82.0) (float-vector 264.0 -147.0 -64.0)))
         (instance face :init :vertices (list (float-vector 282.0 147.0 -64.0) (float-vector 282.0 147.0 82.0) (float-vector 282.0 -147.0 82.0) (float-vector 282.0 -147.0 -64.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 282.0 -36.0 -3.5) (float-vector 282.0 -36.0 14.5) (float-vector 282.0 36.0 14.5) (float-vector 282.0 36.0 -3.5)))
))
         (instance face :init :vertices (list (float-vector 264.0 147.0 82.0) (float-vector 264.0 -147.0 82.0) (float-vector 282.0 -147.0 82.0) (float-vector 282.0 147.0 82.0)))
         (instance face :init :vertices (list (float-vector 282.0 147.0 -64.0) (float-vector 282.0 -147.0 -64.0) (float-vector 264.0 -147.0 -64.0) (float-vector 264.0 147.0 -64.0)))
         (instance face :init :vertices (list (float-vector 264.0 147.0 -64.0) (float-vector 264.0 147.0 82.0) (float-vector 282.0 147.0 82.0) (float-vector 282.0 147.0 -64.0)))
         (instance face :init :vertices (list (float-vector 272.0 36.0 14.5) (float-vector 272.0 -36.0 14.5) (float-vector 272.0 -36.0 -3.5) (float-vector 272.0 36.0 -3.5)))
         (instance face :init :vertices (list (float-vector 272.0 -36.0 -3.5) (float-vector 272.0 -36.0 14.5) (float-vector 282.0 -36.0 14.5) (float-vector 282.0 -36.0 -3.5)))
         (instance face :init :vertices (list (float-vector 282.0 36.0 14.5) (float-vector 282.0 -36.0 14.5) (float-vector 272.0 -36.0 14.5) (float-vector 272.0 36.0 14.5)))
         (instance face :init :vertices (list (float-vector 282.0 36.0 -3.5) (float-vector 282.0 36.0 14.5) (float-vector 272.0 36.0 14.5) (float-vector 272.0 36.0 -3.5)))
         (instance face :init :vertices (list (float-vector 272.0 36.0 -3.5) (float-vector 272.0 -36.0 -3.5) (float-vector 282.0 -36.0 -3.5) (float-vector 282.0 36.0 -3.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 282.0 49.0 -12.5) (float-vector 282.0 -49.0 -12.5) (float-vector 282.0 -49.0 27.5) (float-vector 282.0 49.0 27.5))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 282.0 36.0 -3.5) (float-vector 282.0 36.0 14.5) (float-vector 282.0 -36.0 14.5) (float-vector 282.0 -36.0 -3.5)))
))
         (instance face :init :vertices (list (float-vector 287.0 -49.0 -12.5) (float-vector 287.0 -49.0 27.5) (float-vector 282.0 -49.0 27.5) (float-vector 282.0 -49.0 -12.5)))
         (instance face :init :vertices (list (float-vector 287.0 49.0 -12.5) (float-vector 287.0 49.0 27.5) (float-vector 287.0 -49.0 27.5) (float-vector 287.0 -49.0 -12.5))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 287.0 -36.0 -3.5) (float-vector 287.0 -36.0 14.5) (float-vector 287.0 36.0 14.5) (float-vector 287.0 36.0 -3.5)))
))
         (instance face :init :vertices (list (float-vector 282.0 49.0 27.5) (float-vector 282.0 -49.0 27.5) (float-vector 287.0 -49.0 27.5) (float-vector 287.0 49.0 27.5)))
         (instance face :init :vertices (list (float-vector 287.0 49.0 -12.5) (float-vector 287.0 -49.0 -12.5) (float-vector 282.0 -49.0 -12.5) (float-vector 282.0 49.0 -12.5)))
         (instance face :init :vertices (list (float-vector 282.0 49.0 -12.5) (float-vector 282.0 49.0 27.5) (float-vector 287.0 49.0 27.5) (float-vector 287.0 49.0 -12.5)))
         (instance face :init :vertices (list (float-vector 282.0 -36.0 -3.5) (float-vector 282.0 -36.0 14.5) (float-vector 287.0 -36.0 14.5) (float-vector 287.0 -36.0 -3.5)))
         (instance face :init :vertices (list (float-vector 287.0 36.0 14.5) (float-vector 287.0 -36.0 14.5) (float-vector 282.0 -36.0 14.5) (float-vector 282.0 36.0 14.5)))
         (instance face :init :vertices (list (float-vector 287.0 36.0 -3.5) (float-vector 287.0 36.0 14.5) (float-vector 282.0 36.0 14.5) (float-vector 282.0 36.0 -3.5)))
         (instance face :init :vertices (list (float-vector 282.0 36.0 -3.5) (float-vector 282.0 -36.0 -3.5) (float-vector 287.0 -36.0 -3.5) (float-vector 287.0 36.0 -3.5)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :wheat1)
     (send (elt bc 1) :set-color :sienna4)
     (send (elt bc 2) :set-color :gainsboro)
     (setq blink4 (instance bodyset-link :init (make-cascoords) :bodies bc :name :square-600-closet-bodyset4 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :square-600-closet-bodyset5
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -264.0 129.0 -64.5) (float-vector -264.0 -129.0 -64.5) (float-vector -264.0 -129.0 64.5) (float-vector -264.0 129.0 64.5)))
         (instance face :init :vertices (list (float-vector 264.0 -129.0 -64.5) (float-vector 264.0 -129.0 64.5) (float-vector -264.0 -129.0 64.5) (float-vector -264.0 -129.0 -64.5)))
         (instance face :init :vertices (list (float-vector 264.0 129.0 -64.5) (float-vector 264.0 129.0 64.5) (float-vector 264.0 111.0 64.5) (float-vector 264.0 111.0 -46.5) (float-vector 264.0 -111.0 -46.5) (float-vector 264.0 -111.0 64.5) (float-vector 264.0 -129.0 64.5) (float-vector 264.0 -129.0 -64.5)))
         (instance face :init :vertices (list (float-vector -264.0 129.0 64.5) (float-vector -264.0 -129.0 64.5) (float-vector 264.0 -129.0 64.5) (float-vector 264.0 -111.0 64.5) (float-vector -246.0 -111.0 64.5) (float-vector -246.0 111.0 64.5) (float-vector 264.0 111.0 64.5) (float-vector 264.0 129.0 64.5)))
         (instance face :init :vertices (list (float-vector 264.0 129.0 -64.5) (float-vector 264.0 -129.0 -64.5) (float-vector -264.0 -129.0 -64.5) (float-vector -264.0 129.0 -64.5)))
         (instance face :init :vertices (list (float-vector -264.0 129.0 -64.5) (float-vector -264.0 129.0 64.5) (float-vector 264.0 129.0 64.5) (float-vector 264.0 129.0 -64.5)))
         (instance face :init :vertices (list (float-vector -246.0 111.0 64.5) (float-vector -246.0 -111.0 64.5) (float-vector -246.0 -111.0 -46.5) (float-vector -246.0 111.0 -46.5)))
         (instance face :init :vertices (list (float-vector -246.0 -111.0 -46.5) (float-vector -246.0 -111.0 64.5) (float-vector 264.0 -111.0 64.5) (float-vector 264.0 -111.0 -46.5)))
         (instance face :init :vertices (list (float-vector 264.0 111.0 -46.5) (float-vector 264.0 111.0 64.5) (float-vector -246.0 111.0 64.5) (float-vector -246.0 111.0 -46.5)))
         (instance face :init :vertices (list (float-vector -246.0 111.0 -46.5) (float-vector -246.0 -111.0 -46.5) (float-vector 264.0 -111.0 -46.5) (float-vector 264.0 111.0 -46.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 264.0 147.0 -64.5) (float-vector 264.0 -147.0 -64.5) (float-vector 264.0 -147.0 82.5) (float-vector 264.0 147.0 82.5)))
         (instance face :init :vertices (list (float-vector 282.0 -147.0 -64.5) (float-vector 282.0 -147.0 82.5) (float-vector 264.0 -147.0 82.5) (float-vector 264.0 -147.0 -64.5)))
         (instance face :init :vertices (list (float-vector 282.0 147.0 -64.5) (float-vector 282.0 147.0 82.5) (float-vector 282.0 -147.0 82.5) (float-vector 282.0 -147.0 -64.5))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 282.0 -36.0 -3.5) (float-vector 282.0 -36.0 14.5) (float-vector 282.0 36.0 14.5) (float-vector 282.0 36.0 -3.5)))
))
         (instance face :init :vertices (list (float-vector 264.0 147.0 82.5) (float-vector 264.0 -147.0 82.5) (float-vector 282.0 -147.0 82.5) (float-vector 282.0 147.0 82.5)))
         (instance face :init :vertices (list (float-vector 282.0 147.0 -64.5) (float-vector 282.0 -147.0 -64.5) (float-vector 264.0 -147.0 -64.5) (float-vector 264.0 147.0 -64.5)))
         (instance face :init :vertices (list (float-vector 264.0 147.0 -64.5) (float-vector 264.0 147.0 82.5) (float-vector 282.0 147.0 82.5) (float-vector 282.0 147.0 -64.5)))
         (instance face :init :vertices (list (float-vector 272.0 36.0 14.5) (float-vector 272.0 -36.0 14.5) (float-vector 272.0 -36.0 -3.5) (float-vector 272.0 36.0 -3.5)))
         (instance face :init :vertices (list (float-vector 272.0 -36.0 -3.5) (float-vector 272.0 -36.0 14.5) (float-vector 282.0 -36.0 14.5) (float-vector 282.0 -36.0 -3.5)))
         (instance face :init :vertices (list (float-vector 282.0 36.0 14.5) (float-vector 282.0 -36.0 14.5) (float-vector 272.0 -36.0 14.5) (float-vector 272.0 36.0 14.5)))
         (instance face :init :vertices (list (float-vector 282.0 36.0 -3.5) (float-vector 282.0 36.0 14.5) (float-vector 272.0 36.0 14.5) (float-vector 272.0 36.0 -3.5)))
         (instance face :init :vertices (list (float-vector 272.0 36.0 -3.5) (float-vector 272.0 -36.0 -3.5) (float-vector 282.0 -36.0 -3.5) (float-vector 282.0 36.0 -3.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 282.0 49.0 -12.5) (float-vector 282.0 -49.0 -12.5) (float-vector 282.0 -49.0 27.5) (float-vector 282.0 49.0 27.5))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 282.0 36.0 -3.5) (float-vector 282.0 36.0 14.5) (float-vector 282.0 -36.0 14.5) (float-vector 282.0 -36.0 -3.5)))
))
         (instance face :init :vertices (list (float-vector 287.0 -49.0 -12.5) (float-vector 287.0 -49.0 27.5) (float-vector 282.0 -49.0 27.5) (float-vector 282.0 -49.0 -12.5)))
         (instance face :init :vertices (list (float-vector 287.0 49.0 -12.5) (float-vector 287.0 49.0 27.5) (float-vector 287.0 -49.0 27.5) (float-vector 287.0 -49.0 -12.5))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 287.0 -36.0 -3.5) (float-vector 287.0 -36.0 14.5) (float-vector 287.0 36.0 14.5) (float-vector 287.0 36.0 -3.5)))
))
         (instance face :init :vertices (list (float-vector 282.0 49.0 27.5) (float-vector 282.0 -49.0 27.5) (float-vector 287.0 -49.0 27.5) (float-vector 287.0 49.0 27.5)))
         (instance face :init :vertices (list (float-vector 287.0 49.0 -12.5) (float-vector 287.0 -49.0 -12.5) (float-vector 282.0 -49.0 -12.5) (float-vector 282.0 49.0 -12.5)))
         (instance face :init :vertices (list (float-vector 282.0 49.0 -12.5) (float-vector 282.0 49.0 27.5) (float-vector 287.0 49.0 27.5) (float-vector 287.0 49.0 -12.5)))
         (instance face :init :vertices (list (float-vector 282.0 -36.0 -3.5) (float-vector 282.0 -36.0 14.5) (float-vector 287.0 -36.0 14.5) (float-vector 287.0 -36.0 -3.5)))
         (instance face :init :vertices (list (float-vector 287.0 36.0 14.5) (float-vector 287.0 -36.0 14.5) (float-vector 282.0 -36.0 14.5) (float-vector 282.0 36.0 14.5)))
         (instance face :init :vertices (list (float-vector 287.0 36.0 -3.5) (float-vector 287.0 36.0 14.5) (float-vector 282.0 36.0 14.5) (float-vector 282.0 36.0 -3.5)))
         (instance face :init :vertices (list (float-vector 282.0 36.0 -3.5) (float-vector 282.0 -36.0 -3.5) (float-vector 287.0 -36.0 -3.5) (float-vector 287.0 36.0 -3.5)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :wheat1)
     (send (elt bc 1) :set-color :sienna4)
     (send (elt bc 2) :set-color :gainsboro)
     (setq blink3 (instance bodyset-link :init (make-cascoords) :bodies bc :name :square-600-closet-bodyset5 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :square-600-closet-bodyset6
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -9.0 285.0 -0.5) (float-vector -9.0 -9.0 -0.5) (float-vector -9.0 -9.0 948.5) (float-vector -9.0 285.0 948.5)))
         (instance face :init :vertices (list (float-vector 9.0 -9.0 -0.5) (float-vector 9.0 -9.0 948.5) (float-vector -9.0 -9.0 948.5) (float-vector -9.0 -9.0 -0.5)))
         (instance face :init :vertices (list (float-vector 9.0 285.0 -0.5) (float-vector 9.0 285.0 948.5) (float-vector 9.0 -9.0 948.5) (float-vector 9.0 -9.0 -0.5))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 9.0 230.0 438.0) (float-vector 9.0 230.0 510.0) (float-vector 9.0 248.0 510.0) (float-vector 9.0 248.0 438.0)))
))
         (instance face :init :vertices (list (float-vector -9.0 285.0 948.5) (float-vector -9.0 -9.0 948.5) (float-vector 9.0 -9.0 948.5) (float-vector 9.0 285.0 948.5)))
         (instance face :init :vertices (list (float-vector 9.0 285.0 -0.5) (float-vector 9.0 -9.0 -0.5) (float-vector -9.0 -9.0 -0.5) (float-vector -9.0 285.0 -0.5)))
         (instance face :init :vertices (list (float-vector -9.0 285.0 -0.5) (float-vector -9.0 285.0 948.5) (float-vector 9.0 285.0 948.5) (float-vector 9.0 285.0 -0.5)))
         (instance face :init :vertices (list (float-vector -1.0 248.0 510.0) (float-vector -1.0 230.0 510.0) (float-vector -1.0 230.0 438.0) (float-vector -1.0 248.0 438.0)))
         (instance face :init :vertices (list (float-vector -1.0 230.0 438.0) (float-vector -1.0 230.0 510.0) (float-vector 9.0 230.0 510.0) (float-vector 9.0 230.0 438.0)))
         (instance face :init :vertices (list (float-vector 9.0 248.0 510.0) (float-vector 9.0 230.0 510.0) (float-vector -1.0 230.0 510.0) (float-vector -1.0 248.0 510.0)))
         (instance face :init :vertices (list (float-vector 9.0 248.0 438.0) (float-vector 9.0 248.0 510.0) (float-vector -1.0 248.0 510.0) (float-vector -1.0 248.0 438.0)))
         (instance face :init :vertices (list (float-vector -1.0 248.0 438.0) (float-vector -1.0 230.0 438.0) (float-vector 9.0 230.0 438.0) (float-vector 9.0 248.0 438.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 6.5 261.0 425.0) (float-vector 6.5 221.0 425.0) (float-vector 6.5 221.0 523.0) (float-vector 6.5 261.0 523.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 6.5 248.0 438.0) (float-vector 6.5 248.0 510.0) (float-vector 6.5 230.0 510.0) (float-vector 6.5 230.0 438.0)))
))
         (instance face :init :vertices (list (float-vector 11.5 221.0 425.0) (float-vector 11.5 221.0 523.0) (float-vector 6.5 221.0 523.0) (float-vector 6.5 221.0 425.0)))
         (instance face :init :vertices (list (float-vector 11.5 261.0 425.0) (float-vector 11.5 261.0 523.0) (float-vector 11.5 221.0 523.0) (float-vector 11.5 221.0 425.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 11.5 230.0 438.0) (float-vector 11.5 230.0 510.0) (float-vector 11.5 248.0 510.0) (float-vector 11.5 248.0 438.0)))
))
         (instance face :init :vertices (list (float-vector 6.5 261.0 523.0) (float-vector 6.5 221.0 523.0) (float-vector 11.5 221.0 523.0) (float-vector 11.5 261.0 523.0)))
         (instance face :init :vertices (list (float-vector 11.5 261.0 425.0) (float-vector 11.5 221.0 425.0) (float-vector 6.5 221.0 425.0) (float-vector 6.5 261.0 425.0)))
         (instance face :init :vertices (list (float-vector 6.5 261.0 425.0) (float-vector 6.5 261.0 523.0) (float-vector 11.5 261.0 523.0) (float-vector 11.5 261.0 425.0)))
         (instance face :init :vertices (list (float-vector 6.5 230.0 438.0) (float-vector 6.5 230.0 510.0) (float-vector 11.5 230.0 510.0) (float-vector 11.5 230.0 438.0)))
         (instance face :init :vertices (list (float-vector 11.5 248.0 510.0) (float-vector 11.5 230.0 510.0) (float-vector 6.5 230.0 510.0) (float-vector 6.5 248.0 510.0)))
         (instance face :init :vertices (list (float-vector 11.5 248.0 438.0) (float-vector 11.5 248.0 510.0) (float-vector 6.5 248.0 510.0) (float-vector 6.5 248.0 438.0)))
         (instance face :init :vertices (list (float-vector 6.5 248.0 438.0) (float-vector 6.5 230.0 438.0) (float-vector 11.5 230.0 438.0) (float-vector 11.5 248.0 438.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :sienna4)
     (send (elt bc 1) :set-color :gainsboro)
     (setq blink1 (instance bodyset-link :init (make-cascoords) :bodies bc :name :square-600-closet-bodyset6 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :square-600-closet-bodyset7
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -9.0 9.5 -0.5) (float-vector -9.0 -281.5 -0.5) (float-vector -9.0 -281.5 1652.5) (float-vector -9.0 9.5 1652.5)))
         (instance face :init :vertices (list (float-vector 9.0 -281.5 -0.5) (float-vector 9.0 -281.5 1652.5) (float-vector -9.0 -281.5 1652.5) (float-vector -9.0 -281.5 -0.5)))
         (instance face :init :vertices (list (float-vector 9.0 9.5 -0.5) (float-vector 9.0 9.5 1652.5) (float-vector 9.0 -281.5 1652.5) (float-vector 9.0 -281.5 -0.5))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 9.0 -248.0 861.0) (float-vector 9.0 -248.0 933.0) (float-vector 9.0 -230.0 933.0) (float-vector 9.0 -230.0 861.0)))
))
         (instance face :init :vertices (list (float-vector -9.0 9.5 1652.5) (float-vector -9.0 -281.5 1652.5) (float-vector 9.0 -281.5 1652.5) (float-vector 9.0 9.5 1652.5)))
         (instance face :init :vertices (list (float-vector 9.0 9.5 -0.5) (float-vector 9.0 -281.5 -0.5) (float-vector -9.0 -281.5 -0.5) (float-vector -9.0 9.5 -0.5)))
         (instance face :init :vertices (list (float-vector -9.0 9.5 -0.5) (float-vector -9.0 9.5 1652.5) (float-vector 9.0 9.5 1652.5) (float-vector 9.0 9.5 -0.5)))
         (instance face :init :vertices (list (float-vector -1.0 -230.0 933.0) (float-vector -1.0 -248.0 933.0) (float-vector -1.0 -248.0 861.0) (float-vector -1.0 -230.0 861.0)))
         (instance face :init :vertices (list (float-vector -1.0 -248.0 861.0) (float-vector -1.0 -248.0 933.0) (float-vector 9.0 -248.0 933.0) (float-vector 9.0 -248.0 861.0)))
         (instance face :init :vertices (list (float-vector 9.0 -230.0 933.0) (float-vector 9.0 -248.0 933.0) (float-vector -1.0 -248.0 933.0) (float-vector -1.0 -230.0 933.0)))
         (instance face :init :vertices (list (float-vector 9.0 -230.0 861.0) (float-vector 9.0 -230.0 933.0) (float-vector -1.0 -230.0 933.0) (float-vector -1.0 -230.0 861.0)))
         (instance face :init :vertices (list (float-vector -1.0 -230.0 861.0) (float-vector -1.0 -248.0 861.0) (float-vector 9.0 -248.0 861.0) (float-vector 9.0 -230.0 861.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 6.5 -221.0 848.0) (float-vector 6.5 -261.0 848.0) (float-vector 6.5 -261.0 946.0) (float-vector 6.5 -221.0 946.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 6.5 -230.0 861.0) (float-vector 6.5 -230.0 933.0) (float-vector 6.5 -248.0 933.0) (float-vector 6.5 -248.0 861.0)))
))
         (instance face :init :vertices (list (float-vector 11.5 -261.0 848.0) (float-vector 11.5 -261.0 946.0) (float-vector 6.5 -261.0 946.0) (float-vector 6.5 -261.0 848.0)))
         (instance face :init :vertices (list (float-vector 11.5 -221.0 848.0) (float-vector 11.5 -221.0 946.0) (float-vector 11.5 -261.0 946.0) (float-vector 11.5 -261.0 848.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 11.5 -248.0 861.0) (float-vector 11.5 -248.0 933.0) (float-vector 11.5 -230.0 933.0) (float-vector 11.5 -230.0 861.0)))
))
         (instance face :init :vertices (list (float-vector 6.5 -221.0 946.0) (float-vector 6.5 -261.0 946.0) (float-vector 11.5 -261.0 946.0) (float-vector 11.5 -221.0 946.0)))
         (instance face :init :vertices (list (float-vector 11.5 -221.0 848.0) (float-vector 11.5 -261.0 848.0) (float-vector 6.5 -261.0 848.0) (float-vector 6.5 -221.0 848.0)))
         (instance face :init :vertices (list (float-vector 6.5 -221.0 848.0) (float-vector 6.5 -221.0 946.0) (float-vector 11.5 -221.0 946.0) (float-vector 11.5 -221.0 848.0)))
         (instance face :init :vertices (list (float-vector 6.5 -248.0 861.0) (float-vector 6.5 -248.0 933.0) (float-vector 11.5 -248.0 933.0) (float-vector 11.5 -248.0 861.0)))
         (instance face :init :vertices (list (float-vector 11.5 -230.0 933.0) (float-vector 11.5 -248.0 933.0) (float-vector 6.5 -248.0 933.0) (float-vector 6.5 -230.0 933.0)))
         (instance face :init :vertices (list (float-vector 11.5 -230.0 861.0) (float-vector 11.5 -230.0 933.0) (float-vector 6.5 -230.0 933.0) (float-vector 6.5 -230.0 861.0)))
         (instance face :init :vertices (list (float-vector 6.5 -230.0 861.0) (float-vector 6.5 -248.0 861.0) (float-vector 11.5 -248.0 861.0) (float-vector 11.5 -230.0 861.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :sienna4)
     (send (elt bc 1) :set-color :gainsboro)
     (setq blink2 (instance bodyset-link :init (make-cascoords) :bodies bc :name :square-600-closet-bodyset7 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send blink2 :newcoords (make-coords :pos (float-vector 281.0 285.0 34.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink2)
     (send blink1 :newcoords (make-coords :pos (float-vector 281.0 -285.0 738.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink1)
     (send blink3 :newcoords (make-coords :pos (float-vector 8.0 -147.0 652.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink3)
     (send blink4 :newcoords (make-coords :pos (float-vector 8.0 -147.0 501.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink4)
     (send blink5 :newcoords (make-coords :pos (float-vector 8.0 -147.0 324.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink5)
     (send blink6 :newcoords (make-coords :pos (float-vector 8.0 -147.0 123.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink6)
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     ;; definition of :door-left
     (setq joint0 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink1 :name :door-left :axis :-z
			     :min    0.0 :max   90.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :door-right
     (setq joint1 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink2 :name :door-right :axis :z 
			     :min    0.0 :max   90.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :drawer1
     (setq joint2 (instance linear-joint :init
			     :parent-link blink0 :child-link blink3 :name :drawer1   :axis (float-vector 1.0 0.0 0.0)
			     :min    0.0 :max  564.0 :max-joint-velocity 0.785398 :max-joint-torque 100))

     ;; definition of :drawer2
     (setq joint3 (instance linear-joint :init
			     :parent-link blink0 :child-link blink4 :name :drawer2   :axis (float-vector 1.0 0.0 0.0)
			     :min    0.0 :max  564.0 :max-joint-velocity 0.785398 :max-joint-torque 100))

     ;; definition of :drawer3
     (setq joint4 (instance linear-joint :init
			     :parent-link blink0 :child-link blink5 :name :drawer3   :axis (float-vector 1.0 0.0 0.0)
			     :min    0.0 :max  564.0 :max-joint-velocity 0.785398 :max-joint-torque 100))

     ;; definition of :drawer4
     (setq joint5 (instance linear-joint :init
			     :parent-link blink0 :child-link blink6 :name :drawer4   :axis (float-vector 1.0 0.0 0.0)
			     :min    0.0 :max  564.0 :max-joint-velocity 0.785398 :max-joint-torque 100))


     ;; definition of :handle
     (setq handle0 (make-cascoords :pos (float-vector 291.0 -37.0 1211.0) :rot #2f((-0.5 0.866025 0.0) (-0.866025 -0.5 0.0) (0.0 0.0 1.0)) :name "door-left-handle"))
     (send blink1 :assoc handle0)
     (setq handle1 (make-cascoords :pos (float-vector 291.0 46.0 931.0) :rot #2f((-0.5 -0.866025 0.0) (0.866025 -0.5 0.0) (0.0 0.0 1.0)) :name "door-right-handle"))
     (send blink2 :assoc handle1)
     (setq handle2 (make-cascoords :pos (float-vector 308.0 -147.0 657.5) :rot #2f((-0.5 -0.866025 -1.110223e-15) (9.436896e-16 7.216450e-16 -1.0) (0.866025 -0.5 3.885781e-16)) :name "drawer1-handle"))
     (send blink3 :assoc handle2)
     (setq handle3 (make-cascoords :pos (float-vector 308.0 -147.0 506.5) :rot #2f((-0.5 -0.866025 -1.110223e-15) (9.436896e-16 7.216450e-16 -1.0) (0.866025 -0.5 3.885781e-16)) :name "drawer2-handle"))
     (send blink4 :assoc handle3)
     (setq handle4 (make-cascoords :pos (float-vector 308.0 -147.0 329.5) :rot #2f((-0.5 -0.866025 -1.110223e-15) (9.436896e-16 7.216450e-16 -1.0) (0.866025 -0.5 3.885781e-16)) :name "drawer3-handle"))
     (send blink5 :assoc handle4)
     (setq handle5 (make-cascoords :pos (float-vector 308.0 -147.0 128.5) :rot #2f((-0.5 -0.866025 -1.110223e-15) (9.436896e-16 7.216450e-16 -1.0) (0.866025 -0.5 3.885781e-16)) :name "drawer4-handle"))
     (send blink6 :assoc handle5)

     ;; init-ending 
     (setq links (list blink0 blink1 blink2 blink3 blink4 blink5 blink6))
     (setq joint-list (list joint0 joint1 joint2 joint3 joint4 joint5))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:door-left (&rest args) (forward-message-to joint0 args))
  (:door-right (&rest args) (forward-message-to joint1 args))
  (:drawer1 (&rest args) (forward-message-to joint2 args))
  (:drawer2 (&rest args) (forward-message-to joint3 args))
  (:drawer3 (&rest args) (forward-message-to joint4 args))
  (:drawer4 (&rest args) (forward-message-to joint5 args))
  (:handle (&rest args) (forward-message-to-all (list  handle0 handle1 handle2 handle3 handle4 handle5) args))
  (:handle-door-left-handle (&rest args) (forward-message-to handle0 args))
  (:handle-door-right-handle (&rest args) (forward-message-to handle1 args))
  (:handle-drawer1-handle (&rest args) (forward-message-to handle2 args))
  (:handle-drawer2-handle (&rest args) (forward-message-to handle3 args))
  (:handle-drawer3-handle (&rest args) (forward-message-to handle4 args))
  (:handle-drawer4-handle (&rest args) (forward-message-to handle5 args))
  (:attention (&rest args) (forward-message-to-all (list ) args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun square-600-closet (&rest args) (instance* square-600-closet-object :init args))
;; (format *error-output* "(instance square-600-closet-object :init) for generating model~%")
