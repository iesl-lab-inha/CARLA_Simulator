;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass 3t-600-clean-locker-object
  :super cascaded-link
  :slots (sensors
         handle0
         joint0 ))
(defmethod 3t-600-clean-locker-object
  (:init
   (&rest args &key (name "3t-600-clean-locker") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0 blink1
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :root
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 200.0 300.0 1790.0) (float-vector -200.0 300.0 1790.0) (float-vector -200.0 -300.0 1790.0) (float-vector 200.0 -300.0 1790.0)))
         (instance face :init :vertices (list (float-vector -200.0 300.0 1781.0) (float-vector 200.0 300.0 1781.0) (float-vector 200.0 -300.0 1781.0) (float-vector -200.0 -300.0 1781.0)))
         (instance face :init :vertices (list (float-vector 200.0 300.0 1790.0) (float-vector 200.0 300.0 1781.0) (float-vector -200.0 300.0 1781.0) (float-vector -200.0 300.0 1790.0)))
         (instance face :init :vertices (list (float-vector 200.0 -300.0 1790.0) (float-vector 200.0 -300.0 1781.0) (float-vector 200.0 300.0 1781.0) (float-vector 200.0 300.0 1790.0)))
         (instance face :init :vertices (list (float-vector -200.0 -300.0 1790.0) (float-vector -200.0 -300.0 1781.0) (float-vector 200.0 -300.0 1781.0) (float-vector 200.0 -300.0 1790.0)))
         (instance face :init :vertices (list (float-vector -200.0 300.0 1790.0) (float-vector -200.0 300.0 1781.0) (float-vector -200.0 -300.0 1781.0) (float-vector -200.0 -300.0 1790.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 200.0 300.0 44.0) (float-vector -200.0 300.0 44.0) (float-vector -200.0 -300.0 44.0) (float-vector 200.0 -300.0 44.0)))
         (instance face :init :vertices (list (float-vector -200.0 300.0 0.0) (float-vector 200.0 300.0 0.0) (float-vector 200.0 -300.0 0.0) (float-vector -200.0 -300.0 0.0)))
         (instance face :init :vertices (list (float-vector 200.0 300.0 44.0) (float-vector 200.0 300.0 0.0) (float-vector -200.0 300.0 0.0) (float-vector -200.0 300.0 44.0)))
         (instance face :init :vertices (list (float-vector 200.0 -300.0 44.0) (float-vector 200.0 -300.0 0.0) (float-vector 200.0 300.0 0.0) (float-vector 200.0 300.0 44.0)))
         (instance face :init :vertices (list (float-vector -200.0 -300.0 44.0) (float-vector -200.0 -300.0 0.0) (float-vector 200.0 -300.0 0.0) (float-vector 200.0 -300.0 44.0)))
         (instance face :init :vertices (list (float-vector -200.0 300.0 44.0) (float-vector -200.0 300.0 0.0) (float-vector -200.0 -300.0 0.0) (float-vector -200.0 -300.0 44.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -191.5 291.0 1781.5) (float-vector -200.5 291.0 1781.5) (float-vector -200.5 -291.0 1781.5) (float-vector -191.5 -291.0 1781.5)))
         (instance face :init :vertices (list (float-vector -200.5 291.0 44.5) (float-vector -191.5 291.0 44.5) (float-vector -191.5 -291.0 44.5) (float-vector -200.5 -291.0 44.5)))
         (instance face :init :vertices (list (float-vector -191.5 291.0 1781.5) (float-vector -191.5 291.0 44.5) (float-vector -200.5 291.0 44.5) (float-vector -200.5 291.0 1781.5)))
         (instance face :init :vertices (list (float-vector -191.5 -291.0 1781.5) (float-vector -191.5 -291.0 44.5) (float-vector -191.5 291.0 44.5) (float-vector -191.5 291.0 1781.5)))
         (instance face :init :vertices (list (float-vector -200.5 -291.0 1781.5) (float-vector -200.5 -291.0 44.5) (float-vector -191.5 -291.0 44.5) (float-vector -191.5 -291.0 1781.5)))
         (instance face :init :vertices (list (float-vector -200.5 291.0 1781.5) (float-vector -200.5 291.0 44.5) (float-vector -200.5 -291.0 44.5) (float-vector -200.5 -291.0 1781.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 200.0 300.5 1781.5) (float-vector -200.0 300.5 1781.5) (float-vector -200.0 291.5 1781.5) (float-vector 200.0 291.5 1781.5)))
         (instance face :init :vertices (list (float-vector -200.0 300.5 44.5) (float-vector 200.0 300.5 44.5) (float-vector 200.0 291.5 44.5) (float-vector -200.0 291.5 44.5)))
         (instance face :init :vertices (list (float-vector 200.0 300.5 1781.5) (float-vector 200.0 300.5 44.5) (float-vector -200.0 300.5 44.5) (float-vector -200.0 300.5 1781.5)))
         (instance face :init :vertices (list (float-vector 200.0 291.5 1781.5) (float-vector 200.0 291.5 44.5) (float-vector 200.0 300.5 44.5) (float-vector 200.0 300.5 1781.5)))
         (instance face :init :vertices (list (float-vector -200.0 291.5 1781.5) (float-vector -200.0 291.5 44.5) (float-vector 200.0 291.5 44.5) (float-vector 200.0 291.5 1781.5)))
         (instance face :init :vertices (list (float-vector -200.0 300.5 1781.5) (float-vector -200.0 300.5 44.5) (float-vector -200.0 291.5 44.5) (float-vector -200.0 291.5 1781.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 200.0 -291.5 1781.5) (float-vector -200.0 -291.5 1781.5) (float-vector -200.0 -300.5 1781.5) (float-vector 200.0 -300.5 1781.5)))
         (instance face :init :vertices (list (float-vector -200.0 -291.5 44.5) (float-vector 200.0 -291.5 44.5) (float-vector 200.0 -300.5 44.5) (float-vector -200.0 -300.5 44.5)))
         (instance face :init :vertices (list (float-vector 200.0 -291.5 1781.5) (float-vector 200.0 -291.5 44.5) (float-vector -200.0 -291.5 44.5) (float-vector -200.0 -291.5 1781.5)))
         (instance face :init :vertices (list (float-vector 200.0 -300.5 1781.5) (float-vector 200.0 -300.5 44.5) (float-vector 200.0 -291.5 44.5) (float-vector 200.0 -291.5 1781.5)))
         (instance face :init :vertices (list (float-vector -200.0 -300.5 1781.5) (float-vector -200.0 -300.5 44.5) (float-vector 200.0 -300.5 44.5) (float-vector 200.0 -300.5 1781.5)))
         (instance face :init :vertices (list (float-vector -200.0 -291.5 1781.5) (float-vector -200.0 -291.5 44.5) (float-vector -200.0 -300.5 44.5) (float-vector -200.0 -300.5 1781.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -50.5 291.0 1480.5) (float-vector -191.5 291.0 1480.5) (float-vector -191.5 -291.0 1480.5) (float-vector -50.5 -291.0 1480.5)))
         (instance face :init :vertices (list (float-vector -191.5 291.0 1471.5) (float-vector -50.5 291.0 1471.5) (float-vector -50.5 -291.0 1471.5) (float-vector -191.5 -291.0 1471.5)))
         (instance face :init :vertices (list (float-vector -50.5 291.0 1480.5) (float-vector -50.5 291.0 1471.5) (float-vector -191.5 291.0 1471.5) (float-vector -191.5 291.0 1480.5)))
         (instance face :init :vertices (list (float-vector -50.5 -291.0 1480.5) (float-vector -50.5 -291.0 1471.5) (float-vector -50.5 291.0 1471.5) (float-vector -50.5 291.0 1480.5)))
         (instance face :init :vertices (list (float-vector -191.5 -291.0 1480.5) (float-vector -191.5 -291.0 1471.5) (float-vector -50.5 -291.0 1471.5) (float-vector -50.5 -291.0 1480.5)))
         (instance face :init :vertices (list (float-vector -191.5 291.0 1480.5) (float-vector -191.5 291.0 1471.5) (float-vector -191.5 -291.0 1471.5) (float-vector -191.5 -291.0 1480.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 108.66 -291.0 1746.0) (float-vector 110.0 -291.0 1751.0) (float-vector 108.66 -291.0 1756.0) (float-vector 105.0 -291.0 1759.66) (float-vector 100.0 -291.0 1761.0) (float-vector 95.0 -291.0 1759.66) (float-vector 91.3397 -291.0 1756.0) (float-vector 90.0 -291.0 1751.0) (float-vector 91.3397 -291.0 1746.0) (float-vector 95.0 -291.0 1742.34) (float-vector 100.0 -291.0 1741.0) (float-vector 105.0 -291.0 1742.34)))
         (instance face :init :vertices (list (float-vector 110.0 291.0 1751.0) (float-vector 108.66 291.0 1746.0) (float-vector 105.0 291.0 1742.34) (float-vector 100.0 291.0 1741.0) (float-vector 95.0 291.0 1742.34) (float-vector 91.3397 291.0 1746.0) (float-vector 90.0 291.0 1751.0) (float-vector 91.3397 291.0 1756.0) (float-vector 95.0 291.0 1759.66) (float-vector 100.0 291.0 1761.0) (float-vector 105.0 291.0 1759.66) (float-vector 108.66 291.0 1756.0)))
         (instance face :init :vertices (list (float-vector 108.66 -291.0 1746.0) (float-vector 108.66 291.0 1746.0) (float-vector 110.0 291.0 1751.0) (float-vector 110.0 -291.0 1751.0)))
         (instance face :init :vertices (list (float-vector 105.0 -291.0 1742.34) (float-vector 105.0 291.0 1742.34) (float-vector 108.66 291.0 1746.0) (float-vector 108.66 -291.0 1746.0)))
         (instance face :init :vertices (list (float-vector 100.0 -291.0 1741.0) (float-vector 100.0 291.0 1741.0) (float-vector 105.0 291.0 1742.34) (float-vector 105.0 -291.0 1742.34)))
         (instance face :init :vertices (list (float-vector 95.0 -291.0 1742.34) (float-vector 95.0 291.0 1742.34) (float-vector 100.0 291.0 1741.0) (float-vector 100.0 -291.0 1741.0)))
         (instance face :init :vertices (list (float-vector 91.3397 -291.0 1746.0) (float-vector 91.3397 291.0 1746.0) (float-vector 95.0 291.0 1742.34) (float-vector 95.0 -291.0 1742.34)))
         (instance face :init :vertices (list (float-vector 90.0 -291.0 1751.0) (float-vector 90.0 291.0 1751.0) (float-vector 91.3397 291.0 1746.0) (float-vector 91.3397 -291.0 1746.0)))
         (instance face :init :vertices (list (float-vector 91.3397 -291.0 1756.0) (float-vector 91.3397 291.0 1756.0) (float-vector 90.0 291.0 1751.0) (float-vector 90.0 -291.0 1751.0)))
         (instance face :init :vertices (list (float-vector 95.0 -291.0 1759.66) (float-vector 95.0 291.0 1759.66) (float-vector 91.3397 291.0 1756.0) (float-vector 91.3397 -291.0 1756.0)))
         (instance face :init :vertices (list (float-vector 100.0 -291.0 1761.0) (float-vector 100.0 291.0 1761.0) (float-vector 95.0 291.0 1759.66) (float-vector 95.0 -291.0 1759.66)))
         (instance face :init :vertices (list (float-vector 105.0 -291.0 1759.66) (float-vector 105.0 291.0 1759.66) (float-vector 100.0 291.0 1761.0) (float-vector 100.0 -291.0 1761.0)))
         (instance face :init :vertices (list (float-vector 108.66 -291.0 1756.0) (float-vector 108.66 291.0 1756.0) (float-vector 105.0 291.0 1759.66) (float-vector 105.0 -291.0 1759.66)))
         (instance face :init :vertices (list (float-vector 110.0 -291.0 1751.0) (float-vector 110.0 291.0 1751.0) (float-vector 108.66 291.0 1756.0) (float-vector 108.66 -291.0 1756.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray)
     (send (elt bc 1) :set-color :gray)
     (send (elt bc 2) :set-color :gray)
     (send (elt bc 3) :set-color :gray)
     (send (elt bc 4) :set-color :gray)
     (send (elt bc 5) :set-color :gray)
     (send (elt bc 6) :set-color :peru)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :root :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :3t-600-clean-locker-bodyset2
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -9.0 9.0 -0.5) (float-vector -9.0 -573.0 -0.5) (float-vector -9.0 -573.0 1736.5) (float-vector -9.0 9.0 1736.5)))
         (instance face :init :vertices (list (float-vector 9.0 -573.0 -0.5) (float-vector 9.0 -573.0 1736.5) (float-vector -9.0 -573.0 1736.5) (float-vector -9.0 -573.0 -0.5)))
         (instance face :init :vertices (list (float-vector 9.0 9.0 -0.5) (float-vector 9.0 9.0 1736.5) (float-vector 9.0 -573.0 1736.5) (float-vector 9.0 -573.0 -0.5))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 9.0 -558.0 884.0) (float-vector 9.0 -558.0 1010.0) (float-vector 9.0 -528.0 1010.0) (float-vector 9.0 -528.0 884.0)))
))
         (instance face :init :vertices (list (float-vector -9.0 9.0 1736.5) (float-vector -9.0 -573.0 1736.5) (float-vector 9.0 -573.0 1736.5) (float-vector 9.0 9.0 1736.5)))
         (instance face :init :vertices (list (float-vector 9.0 9.0 -0.5) (float-vector 9.0 -573.0 -0.5) (float-vector -9.0 -573.0 -0.5) (float-vector -9.0 9.0 -0.5)))
         (instance face :init :vertices (list (float-vector -9.0 9.0 -0.5) (float-vector -9.0 9.0 1736.5) (float-vector 9.0 9.0 1736.5) (float-vector 9.0 9.0 -0.5)))
         (instance face :init :vertices (list (float-vector -6.0 -528.0 1010.0) (float-vector -6.0 -558.0 1010.0) (float-vector -6.0 -558.0 884.0) (float-vector -6.0 -528.0 884.0)))
         (instance face :init :vertices (list (float-vector -6.0 -558.0 884.0) (float-vector -6.0 -558.0 1010.0) (float-vector 9.0 -558.0 1010.0) (float-vector 9.0 -558.0 884.0)))
         (instance face :init :vertices (list (float-vector 9.0 -528.0 1010.0) (float-vector 9.0 -558.0 1010.0) (float-vector -6.0 -558.0 1010.0) (float-vector -6.0 -528.0 1010.0)))
         (instance face :init :vertices (list (float-vector 9.0 -528.0 884.0) (float-vector 9.0 -528.0 1010.0) (float-vector -6.0 -528.0 1010.0) (float-vector -6.0 -528.0 884.0)))
         (instance face :init :vertices (list (float-vector -6.0 -528.0 884.0) (float-vector -6.0 -558.0 884.0) (float-vector 9.0 -558.0 884.0) (float-vector 9.0 -528.0 884.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray)
     (setq blink1 (instance bodyset-link :init (make-cascoords) :bodies bc :name :3t-600-clean-locker-bodyset2 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send blink1 :newcoords (make-coords :pos (float-vector 191.0 282.0 44.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink1)
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     ;; definition of :door
     (setq joint0 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink1 :name :door      :axis :z 
			     :min    0.0 :max   90.0 :max-joint-velocity 5 :max-joint-torque 100))


     ;; definition of :handle
     (setq handle0 (make-cascoords :pos (float-vector 200.0 -268.5 991.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name "door-handle"))
     (send blink1 :assoc handle0)

     ;; init-ending 
     (setq links (list blink0 blink1))
     (setq joint-list (list joint0))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:door (&rest args) (forward-message-to joint0 args))
  (:handle (&rest args) (forward-message-to-all (list  handle0) args))
  (:handle-door-handle (&rest args) (forward-message-to handle0 args))
  (:attention (&rest args) (forward-message-to-all (list ) args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun 3t-600-clean-locker (&rest args) (instance* 3t-600-clean-locker-object :init args))
;; (format *error-output* "(instance 3t-600-clean-locker-object :init) for generating model~%")
