;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass itoki-900-slide-shelf-object
  :super cascaded-link
  :slots (sensors
         handle0
         joint0 joint1 joint2 ))
(defmethod itoki-900-slide-shelf-object
  (:init
   (&rest args &key (name "itoki-900-slide-shelf") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0 blink1 blink2 blink3
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :root
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 225.0 450.0 1040.0) (float-vector -225.0 450.0 1040.0) (float-vector -225.0 -450.0 1040.0) (float-vector 225.0 -450.0 1040.0)))
         (instance face :init :vertices (list (float-vector -225.0 450.0 1020.0) (float-vector 225.0 450.0 1020.0) (float-vector 225.0 -450.0 1020.0) (float-vector -225.0 -450.0 1020.0)))
         (instance face :init :vertices (list (float-vector 225.0 450.0 1040.0) (float-vector 225.0 450.0 1020.0) (float-vector -225.0 450.0 1020.0) (float-vector -225.0 450.0 1040.0)))
         (instance face :init :vertices (list (float-vector 225.0 -450.0 1040.0) (float-vector 225.0 -450.0 1020.0) (float-vector 225.0 450.0 1020.0) (float-vector 225.0 450.0 1040.0)))
         (instance face :init :vertices (list (float-vector -225.0 -450.0 1040.0) (float-vector -225.0 -450.0 1020.0) (float-vector 225.0 -450.0 1020.0) (float-vector 225.0 -450.0 1040.0)))
         (instance face :init :vertices (list (float-vector -225.0 450.0 1040.0) (float-vector -225.0 450.0 1020.0) (float-vector -225.0 -450.0 1020.0) (float-vector -225.0 -450.0 1040.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 225.0 450.0 20.0) (float-vector -225.0 450.0 20.0) (float-vector -225.0 -450.0 20.0) (float-vector 225.0 -450.0 20.0)))
         (instance face :init :vertices (list (float-vector -225.0 450.0 0.0) (float-vector 225.0 450.0 0.0) (float-vector 225.0 -450.0 0.0) (float-vector -225.0 -450.0 0.0)))
         (instance face :init :vertices (list (float-vector 225.0 450.0 20.0) (float-vector 225.0 450.0 0.0) (float-vector -225.0 450.0 0.0) (float-vector -225.0 450.0 20.0)))
         (instance face :init :vertices (list (float-vector 225.0 -450.0 20.0) (float-vector 225.0 -450.0 0.0) (float-vector 225.0 450.0 0.0) (float-vector 225.0 450.0 20.0)))
         (instance face :init :vertices (list (float-vector -225.0 -450.0 20.0) (float-vector -225.0 -450.0 0.0) (float-vector 225.0 -450.0 0.0) (float-vector 225.0 -450.0 20.0)))
         (instance face :init :vertices (list (float-vector -225.0 450.0 20.0) (float-vector -225.0 450.0 0.0) (float-vector -225.0 -450.0 0.0) (float-vector -225.0 -450.0 20.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -205.0 430.0 1020.0) (float-vector -225.0 430.0 1020.0) (float-vector -225.0 -430.0 1020.0) (float-vector -205.0 -430.0 1020.0)))
         (instance face :init :vertices (list (float-vector -225.0 430.0 20.0) (float-vector -205.0 430.0 20.0) (float-vector -205.0 -430.0 20.0) (float-vector -225.0 -430.0 20.0)))
         (instance face :init :vertices (list (float-vector -205.0 430.0 1020.0) (float-vector -205.0 430.0 20.0) (float-vector -225.0 430.0 20.0) (float-vector -225.0 430.0 1020.0)))
         (instance face :init :vertices (list (float-vector -205.0 -430.0 1020.0) (float-vector -205.0 -430.0 20.0) (float-vector -205.0 430.0 20.0) (float-vector -205.0 430.0 1020.0)))
         (instance face :init :vertices (list (float-vector -225.0 -430.0 1020.0) (float-vector -225.0 -430.0 20.0) (float-vector -205.0 -430.0 20.0) (float-vector -205.0 -430.0 1020.0)))
         (instance face :init :vertices (list (float-vector -225.0 430.0 1020.0) (float-vector -225.0 430.0 20.0) (float-vector -225.0 -430.0 20.0) (float-vector -225.0 -430.0 1020.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 225.0 450.0 1020.0) (float-vector -225.0 450.0 1020.0) (float-vector -225.0 430.0 1020.0) (float-vector 225.0 430.0 1020.0)))
         (instance face :init :vertices (list (float-vector -225.0 450.0 20.0) (float-vector 225.0 450.0 20.0) (float-vector 225.0 430.0 20.0) (float-vector -225.0 430.0 20.0)))
         (instance face :init :vertices (list (float-vector 225.0 450.0 1020.0) (float-vector 225.0 450.0 20.0) (float-vector -225.0 450.0 20.0) (float-vector -225.0 450.0 1020.0)))
         (instance face :init :vertices (list (float-vector 225.0 430.0 1020.0) (float-vector 225.0 430.0 20.0) (float-vector 225.0 450.0 20.0) (float-vector 225.0 450.0 1020.0)))
         (instance face :init :vertices (list (float-vector -225.0 430.0 1020.0) (float-vector -225.0 430.0 20.0) (float-vector 225.0 430.0 20.0) (float-vector 225.0 430.0 1020.0)))
         (instance face :init :vertices (list (float-vector -225.0 450.0 1020.0) (float-vector -225.0 450.0 20.0) (float-vector -225.0 430.0 20.0) (float-vector -225.0 430.0 1020.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 225.0 -430.0 1020.0) (float-vector -225.0 -430.0 1020.0) (float-vector -225.0 -450.0 1020.0) (float-vector 225.0 -450.0 1020.0)))
         (instance face :init :vertices (list (float-vector -225.0 -430.0 20.0) (float-vector 225.0 -430.0 20.0) (float-vector 225.0 -450.0 20.0) (float-vector -225.0 -450.0 20.0)))
         (instance face :init :vertices (list (float-vector 225.0 -430.0 1020.0) (float-vector 225.0 -430.0 20.0) (float-vector -225.0 -430.0 20.0) (float-vector -225.0 -430.0 1020.0)))
         (instance face :init :vertices (list (float-vector 225.0 -450.0 1020.0) (float-vector 225.0 -450.0 20.0) (float-vector 225.0 -430.0 20.0) (float-vector 225.0 -430.0 1020.0)))
         (instance face :init :vertices (list (float-vector -225.0 -450.0 1020.0) (float-vector -225.0 -450.0 20.0) (float-vector 225.0 -450.0 20.0) (float-vector 225.0 -450.0 1020.0)))
         (instance face :init :vertices (list (float-vector -225.0 -430.0 1020.0) (float-vector -225.0 -430.0 20.0) (float-vector -225.0 -450.0 20.0) (float-vector -225.0 -450.0 1020.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 145.0 430.0 700.0) (float-vector -205.0 430.0 700.0) (float-vector -205.0 -430.0 700.0) (float-vector 145.0 -430.0 700.0)))
         (instance face :init :vertices (list (float-vector -205.0 430.0 680.0) (float-vector 145.0 430.0 680.0) (float-vector 145.0 -430.0 680.0) (float-vector -205.0 -430.0 680.0)))
         (instance face :init :vertices (list (float-vector 145.0 430.0 700.0) (float-vector 145.0 430.0 680.0) (float-vector -205.0 430.0 680.0) (float-vector -205.0 430.0 700.0)))
         (instance face :init :vertices (list (float-vector 145.0 -430.0 700.0) (float-vector 145.0 -430.0 680.0) (float-vector 145.0 430.0 680.0) (float-vector 145.0 430.0 700.0)))
         (instance face :init :vertices (list (float-vector -205.0 -430.0 700.0) (float-vector -205.0 -430.0 680.0) (float-vector 145.0 -430.0 680.0) (float-vector 145.0 -430.0 700.0)))
         (instance face :init :vertices (list (float-vector -205.0 430.0 700.0) (float-vector -205.0 430.0 680.0) (float-vector -205.0 -430.0 680.0) (float-vector -205.0 -430.0 700.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 145.0 430.0 360.0) (float-vector -205.0 430.0 360.0) (float-vector -205.0 -430.0 360.0) (float-vector 145.0 -430.0 360.0)))
         (instance face :init :vertices (list (float-vector -205.0 430.0 340.0) (float-vector 145.0 430.0 340.0) (float-vector 145.0 -430.0 340.0) (float-vector -205.0 -430.0 340.0)))
         (instance face :init :vertices (list (float-vector 145.0 430.0 360.0) (float-vector 145.0 430.0 340.0) (float-vector -205.0 430.0 340.0) (float-vector -205.0 430.0 360.0)))
         (instance face :init :vertices (list (float-vector 145.0 -430.0 360.0) (float-vector 145.0 -430.0 340.0) (float-vector 145.0 430.0 340.0) (float-vector 145.0 430.0 360.0)))
         (instance face :init :vertices (list (float-vector -205.0 -430.0 360.0) (float-vector -205.0 -430.0 340.0) (float-vector 145.0 -430.0 340.0) (float-vector 145.0 -430.0 360.0)))
         (instance face :init :vertices (list (float-vector -205.0 430.0 360.0) (float-vector -205.0 430.0 340.0) (float-vector -205.0 -430.0 340.0) (float-vector -205.0 -430.0 360.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :beige)
     (send (elt bc 1) :set-color :beige)
     (send (elt bc 2) :set-color :beige)
     (send (elt bc 3) :set-color :beige)
     (send (elt bc 4) :set-color :beige)
     (send (elt bc 5) :set-color :beige)
     (send (elt bc 6) :set-color :beige)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :root :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :itoki-900-slide-shelf-bodyset2
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -10.0 0.0 0.0) (float-vector -10.0 -286.667 0.0) (float-vector -10.0 -286.667 1000.0) (float-vector -10.0 0.0 1000.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector -10.0 -50.0 100.0) (float-vector -10.0 -50.0 950.0) (float-vector -10.0 -236.667 950.0) (float-vector -10.0 -236.667 100.0)))
))
         (instance face :init :vertices (list (float-vector 10.0 -286.667 0.0) (float-vector 10.0 -286.667 1000.0) (float-vector -10.0 -286.667 1000.0) (float-vector -10.0 -286.667 0.0)))
         (instance face :init :vertices (list (float-vector 10.0 0.0 0.0) (float-vector 10.0 0.0 1000.0) (float-vector 10.0 -286.667 1000.0) (float-vector 10.0 -286.667 0.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 10.0 -236.667 100.0) (float-vector 10.0 -236.667 950.0) (float-vector 10.0 -50.0 950.0) (float-vector 10.0 -50.0 100.0)))
))
         (instance face :init :vertices (list (float-vector -10.0 0.0 1000.0) (float-vector -10.0 -286.667 1000.0) (float-vector 10.0 -286.667 1000.0) (float-vector 10.0 0.0 1000.0)))
         (instance face :init :vertices (list (float-vector 10.0 0.0 0.0) (float-vector 10.0 -286.667 0.0) (float-vector -10.0 -286.667 0.0) (float-vector -10.0 0.0 0.0)))
         (instance face :init :vertices (list (float-vector -10.0 0.0 0.0) (float-vector -10.0 0.0 1000.0) (float-vector 10.0 0.0 1000.0) (float-vector 10.0 0.0 0.0)))
         (instance face :init :vertices (list (float-vector -10.0 -236.667 100.0) (float-vector -10.0 -236.667 950.0) (float-vector 10.0 -236.667 950.0) (float-vector 10.0 -236.667 100.0)))
         (instance face :init :vertices (list (float-vector 10.0 -50.0 950.0) (float-vector 10.0 -236.667 950.0) (float-vector -10.0 -236.667 950.0) (float-vector -10.0 -50.0 950.0)))
         (instance face :init :vertices (list (float-vector 10.0 -50.0 100.0) (float-vector 10.0 -50.0 950.0) (float-vector -10.0 -50.0 950.0) (float-vector -10.0 -50.0 100.0)))
         (instance face :init :vertices (list (float-vector -10.0 -50.0 100.0) (float-vector -10.0 -236.667 100.0) (float-vector 10.0 -236.667 100.0) (float-vector 10.0 -50.0 100.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 5.0 -50.0 950.0) (float-vector -5.0 -50.0 950.0) (float-vector -5.0 -236.667 950.0) (float-vector 5.0 -236.667 950.0)))
         (instance face :init :vertices (list (float-vector -5.0 -50.0 100.0) (float-vector 5.0 -50.0 100.0) (float-vector 5.0 -236.667 100.0) (float-vector -5.0 -236.667 100.0)))
         (instance face :init :vertices (list (float-vector 5.0 -50.0 950.0) (float-vector 5.0 -50.0 100.0) (float-vector -5.0 -50.0 100.0) (float-vector -5.0 -50.0 950.0)))
         (instance face :init :vertices (list (float-vector 5.0 -236.667 950.0) (float-vector 5.0 -236.667 100.0) (float-vector 5.0 -50.0 100.0) (float-vector 5.0 -50.0 950.0)))
         (instance face :init :vertices (list (float-vector -5.0 -236.667 950.0) (float-vector -5.0 -236.667 100.0) (float-vector 5.0 -236.667 100.0) (float-vector 5.0 -236.667 950.0)))
         (instance face :init :vertices (list (float-vector -5.0 -50.0 950.0) (float-vector -5.0 -50.0 100.0) (float-vector -5.0 -236.667 100.0) (float-vector -5.0 -236.667 950.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :beige)
     (send (elt bc 1) :set-color :white)
     (gl::transparent (elt bc 1) 0.3)
     (setq blink3 (instance bodyset-link :init (make-cascoords) :bodies bc :name :itoki-900-slide-shelf-bodyset2 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :itoki-900-slide-shelf-bodyset3
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -10.0 0.0 0.0) (float-vector -10.0 -286.667 0.0) (float-vector -10.0 -286.667 1000.0) (float-vector -10.0 0.0 1000.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector -10.0 -50.0 100.0) (float-vector -10.0 -50.0 950.0) (float-vector -10.0 -236.667 950.0) (float-vector -10.0 -236.667 100.0)))
))
         (instance face :init :vertices (list (float-vector 10.0 -286.667 0.0) (float-vector 10.0 -286.667 1000.0) (float-vector -10.0 -286.667 1000.0) (float-vector -10.0 -286.667 0.0)))
         (instance face :init :vertices (list (float-vector 10.0 0.0 0.0) (float-vector 10.0 0.0 1000.0) (float-vector 10.0 -286.667 1000.0) (float-vector 10.0 -286.667 0.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 10.0 -236.667 100.0) (float-vector 10.0 -236.667 950.0) (float-vector 10.0 -50.0 950.0) (float-vector 10.0 -50.0 100.0)))
))
         (instance face :init :vertices (list (float-vector -10.0 0.0 1000.0) (float-vector -10.0 -286.667 1000.0) (float-vector 10.0 -286.667 1000.0) (float-vector 10.0 0.0 1000.0)))
         (instance face :init :vertices (list (float-vector 10.0 0.0 0.0) (float-vector 10.0 -286.667 0.0) (float-vector -10.0 -286.667 0.0) (float-vector -10.0 0.0 0.0)))
         (instance face :init :vertices (list (float-vector -10.0 0.0 0.0) (float-vector -10.0 0.0 1000.0) (float-vector 10.0 0.0 1000.0) (float-vector 10.0 0.0 0.0)))
         (instance face :init :vertices (list (float-vector -10.0 -236.667 100.0) (float-vector -10.0 -236.667 950.0) (float-vector 10.0 -236.667 950.0) (float-vector 10.0 -236.667 100.0)))
         (instance face :init :vertices (list (float-vector 10.0 -50.0 950.0) (float-vector 10.0 -236.667 950.0) (float-vector -10.0 -236.667 950.0) (float-vector -10.0 -50.0 950.0)))
         (instance face :init :vertices (list (float-vector 10.0 -50.0 100.0) (float-vector 10.0 -50.0 950.0) (float-vector -10.0 -50.0 950.0) (float-vector -10.0 -50.0 100.0)))
         (instance face :init :vertices (list (float-vector -10.0 -50.0 100.0) (float-vector -10.0 -236.667 100.0) (float-vector 10.0 -236.667 100.0) (float-vector 10.0 -50.0 100.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 5.0 -50.0 950.0) (float-vector -5.0 -50.0 950.0) (float-vector -5.0 -236.667 950.0) (float-vector 5.0 -236.667 950.0)))
         (instance face :init :vertices (list (float-vector -5.0 -50.0 100.0) (float-vector 5.0 -50.0 100.0) (float-vector 5.0 -236.667 100.0) (float-vector -5.0 -236.667 100.0)))
         (instance face :init :vertices (list (float-vector 5.0 -50.0 950.0) (float-vector 5.0 -50.0 100.0) (float-vector -5.0 -50.0 100.0) (float-vector -5.0 -50.0 950.0)))
         (instance face :init :vertices (list (float-vector 5.0 -236.667 950.0) (float-vector 5.0 -236.667 100.0) (float-vector 5.0 -50.0 100.0) (float-vector 5.0 -50.0 950.0)))
         (instance face :init :vertices (list (float-vector -5.0 -236.667 950.0) (float-vector -5.0 -236.667 100.0) (float-vector 5.0 -236.667 100.0) (float-vector 5.0 -236.667 950.0)))
         (instance face :init :vertices (list (float-vector -5.0 -50.0 950.0) (float-vector -5.0 -50.0 100.0) (float-vector -5.0 -236.667 100.0) (float-vector -5.0 -236.667 950.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :beige)
     (send (elt bc 1) :set-color :white)
     (gl::transparent (elt bc 1) 0.3)
     (setq blink2 (instance bodyset-link :init (make-cascoords) :bodies bc :name :itoki-900-slide-shelf-bodyset3 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :itoki-900-slide-shelf-bodyset4
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -10.0 286.667 0.0) (float-vector -10.0 0.0 0.0) (float-vector -10.0 0.0 1000.0) (float-vector -10.0 286.667 1000.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector -10.0 236.667 100.0) (float-vector -10.0 236.667 950.0) (float-vector -10.0 50.0 950.0) (float-vector -10.0 50.0 100.0)))
))
         (instance face :init :vertices (list (float-vector 10.0 0.0 0.0) (float-vector 10.0 0.0 1000.0) (float-vector -10.0 0.0 1000.0) (float-vector -10.0 0.0 0.0)))
         (instance face :init :vertices (list (float-vector 10.0 286.667 0.0) (float-vector 10.0 286.667 1000.0) (float-vector 10.0 0.0 1000.0) (float-vector 10.0 0.0 0.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 10.0 50.0 100.0) (float-vector 10.0 50.0 950.0) (float-vector 10.0 236.667 950.0) (float-vector 10.0 236.667 100.0)))
))
         (instance face :init :vertices (list (float-vector -10.0 286.667 1000.0) (float-vector -10.0 0.0 1000.0) (float-vector 10.0 0.0 1000.0) (float-vector 10.0 286.667 1000.0)))
         (instance face :init :vertices (list (float-vector 10.0 286.667 0.0) (float-vector 10.0 0.0 0.0) (float-vector -10.0 0.0 0.0) (float-vector -10.0 286.667 0.0)))
         (instance face :init :vertices (list (float-vector -10.0 286.667 0.0) (float-vector -10.0 286.667 1000.0) (float-vector 10.0 286.667 1000.0) (float-vector 10.0 286.667 0.0)))
         (instance face :init :vertices (list (float-vector -10.0 50.0 100.0) (float-vector -10.0 50.0 950.0) (float-vector 10.0 50.0 950.0) (float-vector 10.0 50.0 100.0)))
         (instance face :init :vertices (list (float-vector 10.0 236.667 950.0) (float-vector 10.0 50.0 950.0) (float-vector -10.0 50.0 950.0) (float-vector -10.0 236.667 950.0)))
         (instance face :init :vertices (list (float-vector 10.0 236.667 100.0) (float-vector 10.0 236.667 950.0) (float-vector -10.0 236.667 950.0) (float-vector -10.0 236.667 100.0)))
         (instance face :init :vertices (list (float-vector -10.0 236.667 100.0) (float-vector -10.0 50.0 100.0) (float-vector 10.0 50.0 100.0) (float-vector 10.0 236.667 100.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 5.0 236.667 950.0) (float-vector -5.0 236.667 950.0) (float-vector -5.0 50.0 950.0) (float-vector 5.0 50.0 950.0)))
         (instance face :init :vertices (list (float-vector -5.0 236.667 100.0) (float-vector 5.0 236.667 100.0) (float-vector 5.0 50.0 100.0) (float-vector -5.0 50.0 100.0)))
         (instance face :init :vertices (list (float-vector 5.0 236.667 950.0) (float-vector 5.0 236.667 100.0) (float-vector -5.0 236.667 100.0) (float-vector -5.0 236.667 950.0)))
         (instance face :init :vertices (list (float-vector 5.0 50.0 950.0) (float-vector 5.0 50.0 100.0) (float-vector 5.0 236.667 100.0) (float-vector 5.0 236.667 950.0)))
         (instance face :init :vertices (list (float-vector -5.0 50.0 950.0) (float-vector -5.0 50.0 100.0) (float-vector 5.0 50.0 100.0) (float-vector 5.0 50.0 950.0)))
         (instance face :init :vertices (list (float-vector -5.0 236.667 950.0) (float-vector -5.0 236.667 100.0) (float-vector -5.0 50.0 100.0) (float-vector -5.0 50.0 950.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :beige)
     (send (elt bc 1) :set-color :white)
     (gl::transparent (elt bc 1) 0.3)
     (setq blink1 (instance bodyset-link :init (make-cascoords) :bodies bc :name :itoki-900-slide-shelf-bodyset4 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send blink1 :newcoords (make-coords :pos (float-vector 155.0 -430.0 20.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink1)
     (send blink2 :newcoords (make-coords :pos (float-vector 175.0 143.333 20.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink2)
     (send blink3 :newcoords (make-coords :pos (float-vector 195.0 430.0 20.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink3)
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     ;; definition of :door0
     (setq joint0 (instance linear-joint :init
			     :parent-link blink0 :child-link blink1 :name :door0     :axis (float-vector 0.0 1.0 0.0)
			     :min    0.0 :max  573.3 :max-joint-velocity 0.785398 :max-joint-torque 100))

     ;; definition of :door1
     (setq joint1 (instance linear-joint :init
			     :parent-link blink0 :child-link blink2 :name :door1     :axis (float-vector 0.0 -1.0 0.0)
			     :min -286.7 :max  286.7 :max-joint-velocity 0.785398 :max-joint-torque 100))

     ;; definition of :door2
     (setq joint2 (instance linear-joint :init
			     :parent-link blink0 :child-link blink3 :name :door2     :axis (float-vector 0.0 -1.0 0.0)
			     :min    0.0 :max  573.3 :max-joint-velocity 0.785398 :max-joint-torque 100))


     ;; definition of :handle
     (setq handle0 (make-cascoords :pos (float-vector 0.0 0.0 0.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name "handle0"))
     (send blink0 :assoc handle0)

     ;; init-ending 
     (setq links (list blink0 blink1 blink2 blink3))
     (setq joint-list (list joint0 joint1 joint2))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:door0 (&rest args) (forward-message-to joint0 args))
  (:door1 (&rest args) (forward-message-to joint1 args))
  (:door2 (&rest args) (forward-message-to joint2 args))
  (:handle (&rest args) (forward-message-to-all (list  handle0) args))
  (:handle-handle0 (&rest args) (forward-message-to handle0 args))
  (:attention (&rest args) (forward-message-to-all (list ) args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun itoki-900-slide-shelf (&rest args) (instance* itoki-900-slide-shelf-object :init args))
;; (format *error-output* "(instance itoki-900-slide-shelf-object :init) for generating model~%")
