;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass brown-board-object
  :super cascaded-link
  :slots (sensors
         handle0
         joint0 joint1 joint2 ))
(defmethod brown-board-object
  (:init
   (&rest args &key (name "brown-board") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0 blink1 blink2 blink3
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :root
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 250.0 185.0 620.0) (float-vector -250.0 185.0 620.0) (float-vector -250.0 -185.0 620.0) (float-vector 250.0 -185.0 620.0)))
         (instance face :init :vertices (list (float-vector -250.0 185.0 600.0) (float-vector 250.0 185.0 600.0) (float-vector 250.0 -185.0 600.0) (float-vector -250.0 -185.0 600.0)))
         (instance face :init :vertices (list (float-vector 250.0 185.0 620.0) (float-vector 250.0 185.0 600.0) (float-vector -250.0 185.0 600.0) (float-vector -250.0 185.0 620.0)))
         (instance face :init :vertices (list (float-vector 250.0 -185.0 620.0) (float-vector 250.0 -185.0 600.0) (float-vector 250.0 185.0 600.0) (float-vector 250.0 185.0 620.0)))
         (instance face :init :vertices (list (float-vector -250.0 -185.0 620.0) (float-vector -250.0 -185.0 600.0) (float-vector 250.0 -185.0 600.0) (float-vector 250.0 -185.0 620.0)))
         (instance face :init :vertices (list (float-vector -250.0 185.0 620.0) (float-vector -250.0 185.0 600.0) (float-vector -250.0 -185.0 600.0) (float-vector -250.0 -185.0 620.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 240.0 185.0 84.5) (float-vector -250.0 185.0 84.5) (float-vector -250.0 -185.0 84.5) (float-vector 240.0 -185.0 84.5)))
         (instance face :init :vertices (list (float-vector -250.0 185.0 -0.5) (float-vector 240.0 185.0 -0.5) (float-vector 240.0 -185.0 -0.5) (float-vector -250.0 -185.0 -0.5)))
         (instance face :init :vertices (list (float-vector 240.0 185.0 84.5) (float-vector 240.0 185.0 -0.5) (float-vector -250.0 185.0 -0.5) (float-vector -250.0 185.0 84.5)))
         (instance face :init :vertices (list (float-vector 240.0 -185.0 84.5) (float-vector 240.0 -185.0 -0.5) (float-vector 240.0 185.0 -0.5) (float-vector 240.0 185.0 84.5)))
         (instance face :init :vertices (list (float-vector -250.0 -185.0 84.5) (float-vector -250.0 -185.0 -0.5) (float-vector 240.0 -185.0 -0.5) (float-vector 240.0 -185.0 84.5)))
         (instance face :init :vertices (list (float-vector -250.0 185.0 84.5) (float-vector -250.0 185.0 -0.5) (float-vector -250.0 -185.0 -0.5) (float-vector -250.0 -185.0 84.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -220.0 155.0 599.5) (float-vector -250.0 155.0 599.5) (float-vector -250.0 -155.0 599.5) (float-vector -220.0 -155.0 599.5)))
         (instance face :init :vertices (list (float-vector -250.0 155.0 84.5) (float-vector -220.0 155.0 84.5) (float-vector -220.0 -155.0 84.5) (float-vector -250.0 -155.0 84.5)))
         (instance face :init :vertices (list (float-vector -220.0 155.0 599.5) (float-vector -220.0 155.0 84.5) (float-vector -250.0 155.0 84.5) (float-vector -250.0 155.0 599.5)))
         (instance face :init :vertices (list (float-vector -220.0 -155.0 599.5) (float-vector -220.0 -155.0 84.5) (float-vector -220.0 155.0 84.5) (float-vector -220.0 155.0 599.5)))
         (instance face :init :vertices (list (float-vector -250.0 -155.0 599.5) (float-vector -250.0 -155.0 84.5) (float-vector -220.0 -155.0 84.5) (float-vector -220.0 -155.0 599.5)))
         (instance face :init :vertices (list (float-vector -250.0 155.0 599.5) (float-vector -250.0 155.0 84.5) (float-vector -250.0 -155.0 84.5) (float-vector -250.0 -155.0 599.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 240.0 185.0 599.5) (float-vector -250.0 185.0 599.5) (float-vector -250.0 155.0 599.5) (float-vector 240.0 155.0 599.5)))
         (instance face :init :vertices (list (float-vector -250.0 185.0 84.5) (float-vector 240.0 185.0 84.5) (float-vector 240.0 155.0 84.5) (float-vector -250.0 155.0 84.5)))
         (instance face :init :vertices (list (float-vector 240.0 185.0 599.5) (float-vector 240.0 185.0 84.5) (float-vector -250.0 185.0 84.5) (float-vector -250.0 185.0 599.5)))
         (instance face :init :vertices (list (float-vector 240.0 155.0 599.5) (float-vector 240.0 155.0 84.5) (float-vector 240.0 185.0 84.5) (float-vector 240.0 185.0 599.5)))
         (instance face :init :vertices (list (float-vector -250.0 155.0 599.5) (float-vector -250.0 155.0 84.5) (float-vector 240.0 155.0 84.5) (float-vector 240.0 155.0 599.5)))
         (instance face :init :vertices (list (float-vector -250.0 185.0 599.5) (float-vector -250.0 185.0 84.5) (float-vector -250.0 155.0 84.5) (float-vector -250.0 155.0 599.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 240.0 -155.0 599.5) (float-vector -250.0 -155.0 599.5) (float-vector -250.0 -185.0 599.5) (float-vector 240.0 -185.0 599.5)))
         (instance face :init :vertices (list (float-vector -250.0 -155.0 84.5) (float-vector 240.0 -155.0 84.5) (float-vector 240.0 -185.0 84.5) (float-vector -250.0 -185.0 84.5)))
         (instance face :init :vertices (list (float-vector 240.0 -155.0 599.5) (float-vector 240.0 -155.0 84.5) (float-vector -250.0 -155.0 84.5) (float-vector -250.0 -155.0 599.5)))
         (instance face :init :vertices (list (float-vector 240.0 -185.0 599.5) (float-vector 240.0 -185.0 84.5) (float-vector 240.0 -155.0 84.5) (float-vector 240.0 -155.0 599.5)))
         (instance face :init :vertices (list (float-vector -250.0 -185.0 599.5) (float-vector -250.0 -185.0 84.5) (float-vector 240.0 -185.0 84.5) (float-vector 240.0 -185.0 599.5)))
         (instance face :init :vertices (list (float-vector -250.0 -155.0 599.5) (float-vector -250.0 -155.0 84.5) (float-vector -250.0 -185.0 84.5) (float-vector -250.0 -185.0 599.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 240.0 155.0 340.0) (float-vector -220.0 155.0 340.0) (float-vector -220.0 -155.0 340.0) (float-vector 240.0 -155.0 340.0)))
         (instance face :init :vertices (list (float-vector -220.0 155.0 310.0) (float-vector 240.0 155.0 310.0) (float-vector 240.0 -155.0 310.0) (float-vector -220.0 -155.0 310.0)))
         (instance face :init :vertices (list (float-vector 240.0 155.0 340.0) (float-vector 240.0 155.0 310.0) (float-vector -220.0 155.0 310.0) (float-vector -220.0 155.0 340.0)))
         (instance face :init :vertices (list (float-vector 240.0 -155.0 340.0) (float-vector 240.0 -155.0 310.0) (float-vector 240.0 155.0 310.0) (float-vector 240.0 155.0 340.0)))
         (instance face :init :vertices (list (float-vector -220.0 -155.0 340.0) (float-vector -220.0 -155.0 310.0) (float-vector 240.0 -155.0 310.0) (float-vector 240.0 -155.0 340.0)))
         (instance face :init :vertices (list (float-vector -220.0 155.0 340.0) (float-vector -220.0 155.0 310.0) (float-vector -220.0 -155.0 310.0) (float-vector -220.0 -155.0 340.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 240.0 155.0 460.0) (float-vector -220.0 155.0 460.0) (float-vector -220.0 -155.0 460.0) (float-vector 240.0 -155.0 460.0)))
         (instance face :init :vertices (list (float-vector -220.0 155.0 430.0) (float-vector 240.0 155.0 430.0) (float-vector 240.0 -155.0 430.0) (float-vector -220.0 -155.0 430.0)))
         (instance face :init :vertices (list (float-vector 240.0 155.0 460.0) (float-vector 240.0 155.0 430.0) (float-vector -220.0 155.0 430.0) (float-vector -220.0 155.0 460.0)))
         (instance face :init :vertices (list (float-vector 240.0 -155.0 460.0) (float-vector 240.0 -155.0 430.0) (float-vector 240.0 155.0 430.0) (float-vector 240.0 155.0 460.0)))
         (instance face :init :vertices (list (float-vector -220.0 -155.0 460.0) (float-vector -220.0 -155.0 430.0) (float-vector 240.0 -155.0 430.0) (float-vector 240.0 -155.0 460.0)))
         (instance face :init :vertices (list (float-vector -220.0 155.0 460.0) (float-vector -220.0 155.0 430.0) (float-vector -220.0 -155.0 430.0) (float-vector -220.0 -155.0 460.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 240.0 155.0 590.0) (float-vector -220.0 155.0 590.0) (float-vector -220.0 -155.0 590.0) (float-vector 240.0 -155.0 590.0)))
         (instance face :init :vertices (list (float-vector -220.0 155.0 560.0) (float-vector 240.0 155.0 560.0) (float-vector 240.0 -155.0 560.0) (float-vector -220.0 -155.0 560.0)))
         (instance face :init :vertices (list (float-vector 240.0 155.0 590.0) (float-vector 240.0 155.0 560.0) (float-vector -220.0 155.0 560.0) (float-vector -220.0 155.0 590.0)))
         (instance face :init :vertices (list (float-vector 240.0 -155.0 590.0) (float-vector 240.0 -155.0 560.0) (float-vector 240.0 155.0 560.0) (float-vector 240.0 155.0 590.0)))
         (instance face :init :vertices (list (float-vector -220.0 -155.0 590.0) (float-vector -220.0 -155.0 560.0) (float-vector 240.0 -155.0 560.0) (float-vector 240.0 -155.0 590.0)))
         (instance face :init :vertices (list (float-vector -220.0 155.0 590.0) (float-vector -220.0 155.0 560.0) (float-vector -220.0 -155.0 560.0) (float-vector -220.0 -155.0 590.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :brown)
     (send (elt bc 1) :set-color :brown)
     (send (elt bc 2) :set-color :brown)
     (send (elt bc 3) :set-color :brown)
     (send (elt bc 4) :set-color :brown)
     (send (elt bc 5) :set-color :brown)
     (send (elt bc 6) :set-color :brown)
     (send (elt bc 7) :set-color :brown)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :root :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :brown-board-bodyset2
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -240.0 145.0 -55.0) (float-vector -240.0 -145.0 -55.0) (float-vector -240.0 -145.0 55.0) (float-vector -240.0 145.0 55.0)))
         (instance face :init :vertices (list (float-vector 240.0 -145.0 -55.0) (float-vector 240.0 -145.0 55.0) (float-vector -240.0 -145.0 55.0) (float-vector -240.0 -145.0 -55.0)))
         (instance face :init :vertices (list (float-vector 240.0 145.0 -55.0) (float-vector 240.0 145.0 55.0) (float-vector 240.0 135.0 55.0) (float-vector 240.0 135.0 -45.0) (float-vector 240.0 -135.0 -45.0) (float-vector 240.0 -135.0 55.0) (float-vector 240.0 -145.0 55.0) (float-vector 240.0 -145.0 -55.0)))
         (instance face :init :vertices (list (float-vector -240.0 145.0 55.0) (float-vector -240.0 -145.0 55.0) (float-vector 240.0 -145.0 55.0) (float-vector 240.0 -135.0 55.0) (float-vector -230.0 -135.0 55.0) (float-vector -230.0 135.0 55.0) (float-vector 240.0 135.0 55.0) (float-vector 240.0 145.0 55.0)))
         (instance face :init :vertices (list (float-vector 240.0 145.0 -55.0) (float-vector 240.0 -145.0 -55.0) (float-vector -240.0 -145.0 -55.0) (float-vector -240.0 145.0 -55.0)))
         (instance face :init :vertices (list (float-vector -240.0 145.0 -55.0) (float-vector -240.0 145.0 55.0) (float-vector 240.0 145.0 55.0) (float-vector 240.0 145.0 -55.0)))
         (instance face :init :vertices (list (float-vector -230.0 135.0 55.0) (float-vector -230.0 -135.0 55.0) (float-vector -230.0 -135.0 -45.0) (float-vector -230.0 135.0 -45.0)))
         (instance face :init :vertices (list (float-vector -230.0 -135.0 -45.0) (float-vector -230.0 -135.0 55.0) (float-vector 240.0 -135.0 55.0) (float-vector 240.0 -135.0 -45.0)))
         (instance face :init :vertices (list (float-vector 240.0 135.0 -45.0) (float-vector 240.0 135.0 55.0) (float-vector -230.0 135.0 55.0) (float-vector -230.0 135.0 -45.0)))
         (instance face :init :vertices (list (float-vector -230.0 135.0 -45.0) (float-vector -230.0 -135.0 -45.0) (float-vector 240.0 -135.0 -45.0) (float-vector 240.0 135.0 -45.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 250.0 155.0 65.0) (float-vector 240.0 155.0 65.0) (float-vector 240.0 -155.0 65.0) (float-vector 250.0 -155.0 65.0)))
         (instance face :init :vertices (list (float-vector 240.0 155.0 -55.0) (float-vector 250.0 155.0 -55.0) (float-vector 250.0 -155.0 -55.0) (float-vector 240.0 -155.0 -55.0)))
         (instance face :init :vertices (list (float-vector 250.0 155.0 65.0) (float-vector 250.0 155.0 -55.0) (float-vector 240.0 155.0 -55.0) (float-vector 240.0 155.0 65.0)))
         (instance face :init :vertices (list (float-vector 250.0 -155.0 65.0) (float-vector 250.0 -155.0 -55.0) (float-vector 250.0 155.0 -55.0) (float-vector 250.0 155.0 65.0)))
         (instance face :init :vertices (list (float-vector 240.0 -155.0 65.0) (float-vector 240.0 -155.0 -55.0) (float-vector 250.0 -155.0 -55.0) (float-vector 250.0 -155.0 65.0)))
         (instance face :init :vertices (list (float-vector 240.0 155.0 65.0) (float-vector 240.0 155.0 -55.0) (float-vector 240.0 -155.0 -55.0) (float-vector 240.0 -155.0 65.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :white)
     (setq blink3 (instance bodyset-link :init (make-cascoords) :bodies bc :name :brown-board-bodyset2 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :brown-board-bodyset3
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -240.0 145.0 -55.0) (float-vector -240.0 -145.0 -55.0) (float-vector -240.0 -145.0 55.0) (float-vector -240.0 145.0 55.0)))
         (instance face :init :vertices (list (float-vector 240.0 -145.0 -55.0) (float-vector 240.0 -145.0 55.0) (float-vector -240.0 -145.0 55.0) (float-vector -240.0 -145.0 -55.0)))
         (instance face :init :vertices (list (float-vector 240.0 145.0 -55.0) (float-vector 240.0 145.0 55.0) (float-vector 240.0 135.0 55.0) (float-vector 240.0 135.0 -45.0) (float-vector 240.0 -135.0 -45.0) (float-vector 240.0 -135.0 55.0) (float-vector 240.0 -145.0 55.0) (float-vector 240.0 -145.0 -55.0)))
         (instance face :init :vertices (list (float-vector -240.0 145.0 55.0) (float-vector -240.0 -145.0 55.0) (float-vector 240.0 -145.0 55.0) (float-vector 240.0 -135.0 55.0) (float-vector -230.0 -135.0 55.0) (float-vector -230.0 135.0 55.0) (float-vector 240.0 135.0 55.0) (float-vector 240.0 145.0 55.0)))
         (instance face :init :vertices (list (float-vector 240.0 145.0 -55.0) (float-vector 240.0 -145.0 -55.0) (float-vector -240.0 -145.0 -55.0) (float-vector -240.0 145.0 -55.0)))
         (instance face :init :vertices (list (float-vector -240.0 145.0 -55.0) (float-vector -240.0 145.0 55.0) (float-vector 240.0 145.0 55.0) (float-vector 240.0 145.0 -55.0)))
         (instance face :init :vertices (list (float-vector -230.0 135.0 55.0) (float-vector -230.0 -135.0 55.0) (float-vector -230.0 -135.0 -45.0) (float-vector -230.0 135.0 -45.0)))
         (instance face :init :vertices (list (float-vector -230.0 -135.0 -45.0) (float-vector -230.0 -135.0 55.0) (float-vector 240.0 -135.0 55.0) (float-vector 240.0 -135.0 -45.0)))
         (instance face :init :vertices (list (float-vector 240.0 135.0 -45.0) (float-vector 240.0 135.0 55.0) (float-vector -230.0 135.0 55.0) (float-vector -230.0 135.0 -45.0)))
         (instance face :init :vertices (list (float-vector -230.0 135.0 -45.0) (float-vector -230.0 -135.0 -45.0) (float-vector 240.0 -135.0 -45.0) (float-vector 240.0 135.0 -45.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 250.0 155.0 65.0) (float-vector 240.0 155.0 65.0) (float-vector 240.0 -155.0 65.0) (float-vector 250.0 -155.0 65.0)))
         (instance face :init :vertices (list (float-vector 240.0 155.0 -55.0) (float-vector 250.0 155.0 -55.0) (float-vector 250.0 -155.0 -55.0) (float-vector 240.0 -155.0 -55.0)))
         (instance face :init :vertices (list (float-vector 250.0 155.0 65.0) (float-vector 250.0 155.0 -55.0) (float-vector 240.0 155.0 -55.0) (float-vector 240.0 155.0 65.0)))
         (instance face :init :vertices (list (float-vector 250.0 -155.0 65.0) (float-vector 250.0 -155.0 -55.0) (float-vector 250.0 155.0 -55.0) (float-vector 250.0 155.0 65.0)))
         (instance face :init :vertices (list (float-vector 240.0 -155.0 65.0) (float-vector 240.0 -155.0 -55.0) (float-vector 250.0 -155.0 -55.0) (float-vector 250.0 -155.0 65.0)))
         (instance face :init :vertices (list (float-vector 240.0 155.0 65.0) (float-vector 240.0 155.0 -55.0) (float-vector 240.0 -155.0 -55.0) (float-vector 240.0 -155.0 65.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :white)
     (setq blink2 (instance bodyset-link :init (make-cascoords) :bodies bc :name :brown-board-bodyset3 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :brown-board-bodyset4
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -240.0 145.0 -150.0) (float-vector -240.0 -145.0 -150.0) (float-vector -240.0 -145.0 150.0) (float-vector -240.0 145.0 150.0)))
         (instance face :init :vertices (list (float-vector 240.0 -145.0 -150.0) (float-vector 240.0 -145.0 150.0) (float-vector -240.0 -145.0 150.0) (float-vector -240.0 -145.0 -150.0)))
         (instance face :init :vertices (list (float-vector 240.0 145.0 -150.0) (float-vector 240.0 145.0 150.0) (float-vector 240.0 135.0 150.0) (float-vector 240.0 135.0 -140.0) (float-vector 240.0 -135.0 -140.0) (float-vector 240.0 -135.0 150.0) (float-vector 240.0 -145.0 150.0) (float-vector 240.0 -145.0 -150.0)))
         (instance face :init :vertices (list (float-vector -240.0 145.0 150.0) (float-vector -240.0 -145.0 150.0) (float-vector 240.0 -145.0 150.0) (float-vector 240.0 -135.0 150.0) (float-vector -230.0 -135.0 150.0) (float-vector -230.0 135.0 150.0) (float-vector 240.0 135.0 150.0) (float-vector 240.0 145.0 150.0)))
         (instance face :init :vertices (list (float-vector 240.0 145.0 -150.0) (float-vector 240.0 -145.0 -150.0) (float-vector -240.0 -145.0 -150.0) (float-vector -240.0 145.0 -150.0)))
         (instance face :init :vertices (list (float-vector -240.0 145.0 -150.0) (float-vector -240.0 145.0 150.0) (float-vector 240.0 145.0 150.0) (float-vector 240.0 145.0 -150.0)))
         (instance face :init :vertices (list (float-vector -230.0 135.0 150.0) (float-vector -230.0 -135.0 150.0) (float-vector -230.0 -135.0 -140.0) (float-vector -230.0 135.0 -140.0)))
         (instance face :init :vertices (list (float-vector -230.0 -135.0 -140.0) (float-vector -230.0 -135.0 150.0) (float-vector 240.0 -135.0 150.0) (float-vector 240.0 -135.0 -140.0)))
         (instance face :init :vertices (list (float-vector 240.0 135.0 -140.0) (float-vector 240.0 135.0 150.0) (float-vector -230.0 135.0 150.0) (float-vector -230.0 135.0 -140.0)))
         (instance face :init :vertices (list (float-vector -230.0 135.0 -140.0) (float-vector -230.0 -135.0 -140.0) (float-vector 240.0 -135.0 -140.0) (float-vector 240.0 135.0 -140.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 250.0 155.0 160.0) (float-vector 240.0 155.0 160.0) (float-vector 240.0 -155.0 160.0) (float-vector 250.0 -155.0 160.0)))
         (instance face :init :vertices (list (float-vector 240.0 155.0 -150.0) (float-vector 250.0 155.0 -150.0) (float-vector 250.0 -155.0 -150.0) (float-vector 240.0 -155.0 -150.0)))
         (instance face :init :vertices (list (float-vector 250.0 155.0 160.0) (float-vector 250.0 155.0 -150.0) (float-vector 240.0 155.0 -150.0) (float-vector 240.0 155.0 160.0)))
         (instance face :init :vertices (list (float-vector 250.0 -155.0 160.0) (float-vector 250.0 -155.0 -150.0) (float-vector 250.0 155.0 -150.0) (float-vector 250.0 155.0 160.0)))
         (instance face :init :vertices (list (float-vector 240.0 -155.0 160.0) (float-vector 240.0 -155.0 -150.0) (float-vector 250.0 -155.0 -150.0) (float-vector 250.0 -155.0 160.0)))
         (instance face :init :vertices (list (float-vector 240.0 155.0 160.0) (float-vector 240.0 155.0 -150.0) (float-vector 240.0 -155.0 -150.0) (float-vector 240.0 -155.0 160.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :white)
     (setq blink1 (instance bodyset-link :init (make-cascoords) :bodies bc :name :brown-board-bodyset4 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send blink1 :newcoords (make-coords :pos (float-vector 0.0 0.0 200.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink1)
     (send blink2 :newcoords (make-coords :pos (float-vector 0.0 0.0 415.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink2)
     (send blink3 :newcoords (make-coords :pos (float-vector 0.0 0.0 535.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink3)
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     ;; definition of :drawer0
     (setq joint0 (instance linear-joint :init
			     :parent-link blink0 :child-link blink1 :name :drawer0   :axis (float-vector 1.0 0.0 0.0)
			     :min    0.0 :max  500.0 :max-joint-velocity 0.785398 :max-joint-torque 100))

     ;; definition of :drawer1
     (setq joint1 (instance linear-joint :init
			     :parent-link blink0 :child-link blink2 :name :drawer1   :axis (float-vector 1.0 0.0 0.0)
			     :min    0.0 :max  500.0 :max-joint-velocity 0.785398 :max-joint-torque 100))

     ;; definition of :drawer2
     (setq joint2 (instance linear-joint :init
			     :parent-link blink0 :child-link blink3 :name :drawer2   :axis (float-vector 1.0 0.0 0.0)
			     :min    0.0 :max  500.0 :max-joint-velocity 0.785398 :max-joint-torque 100))


     ;; definition of :handle
     (setq handle0 (make-cascoords :pos (float-vector 0.0 0.0 0.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name "handle0"))
     (send blink0 :assoc handle0)

     ;; init-ending 
     (setq links (list blink0 blink1 blink2 blink3))
     (setq joint-list (list joint0 joint1 joint2))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:drawer0 (&rest args) (forward-message-to joint0 args))
  (:drawer1 (&rest args) (forward-message-to joint1 args))
  (:drawer2 (&rest args) (forward-message-to joint2 args))
  (:handle (&rest args) (forward-message-to-all (list  handle0) args))
  (:handle-handle0 (&rest args) (forward-message-to handle0 args))
  (:attention (&rest args) (forward-message-to-all (list ) args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun brown-board (&rest args) (instance* brown-board-object :init args))
;; (format *error-output* "(instance brown-board-object :init) for generating model~%")
