;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass askul-corner-desk-object
  :super cascaded-link
  :slots (sensors
         ))
(defmethod askul-corner-desk-object
  (:init
   (&rest args &key (name "askul-corner-desk") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :askul-corner-desk-bodyset2
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -535.0 -185.0 700.0) (float-vector -185.0 -535.0 700.0) (float-vector 535.0 -535.0 700.0) (float-vector 535.0 535.0 700.0) (float-vector -535.0 535.0 700.0)))
         (instance face :init :vertices (list (float-vector -185.0 -535.0 682.0) (float-vector -535.0 -185.0 682.0) (float-vector -535.0 535.0 682.0) (float-vector 535.0 535.0 682.0) (float-vector 535.0 -535.0 682.0)))
         (instance face :init :vertices (list (float-vector -535.0 -185.0 700.0) (float-vector -535.0 -185.0 682.0) (float-vector -185.0 -535.0 682.0) (float-vector -185.0 -535.0 700.0)))
         (instance face :init :vertices (list (float-vector -535.0 535.0 700.0) (float-vector -535.0 535.0 682.0) (float-vector -535.0 -185.0 682.0) (float-vector -535.0 -185.0 700.0)))
         (instance face :init :vertices (list (float-vector 535.0 535.0 700.0) (float-vector 535.0 535.0 682.0) (float-vector -535.0 535.0 682.0) (float-vector -535.0 535.0 700.0)))
         (instance face :init :vertices (list (float-vector 535.0 -535.0 700.0) (float-vector 535.0 -535.0 682.0) (float-vector 535.0 535.0 682.0) (float-vector 535.0 535.0 700.0)))
         (instance face :init :vertices (list (float-vector -185.0 -535.0 700.0) (float-vector -185.0 -535.0 682.0) (float-vector 535.0 -535.0 682.0) (float-vector 535.0 -535.0 700.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -121.144 -508.0 682.0) (float-vector -119.0 -500.0 682.0) (float-vector -121.144 -492.0 682.0) (float-vector -127.0 -486.144 682.0) (float-vector -135.0 -484.0 682.0) (float-vector -143.0 -486.144 682.0) (float-vector -148.856 -492.0 682.0) (float-vector -151.0 -500.0 682.0) (float-vector -148.856 -508.0 682.0) (float-vector -143.0 -513.856 682.0) (float-vector -135.0 -516.0 682.0) (float-vector -127.0 -513.856 682.0)))
         (instance face :init :vertices (list (float-vector -119.0 -500.0 0.0) (float-vector -121.144 -508.0 0.0) (float-vector -127.0 -513.856 0.0) (float-vector -135.0 -516.0 0.0) (float-vector -143.0 -513.856 0.0) (float-vector -148.856 -508.0 0.0) (float-vector -151.0 -500.0 0.0) (float-vector -148.856 -492.0 0.0) (float-vector -143.0 -486.144 0.0) (float-vector -135.0 -484.0 0.0) (float-vector -127.0 -486.144 0.0) (float-vector -121.144 -492.0 0.0)))
         (instance face :init :vertices (list (float-vector -121.144 -508.0 682.0) (float-vector -121.144 -508.0 0.0) (float-vector -119.0 -500.0 0.0) (float-vector -119.0 -500.0 682.0)))
         (instance face :init :vertices (list (float-vector -127.0 -513.856 682.0) (float-vector -127.0 -513.856 0.0) (float-vector -121.144 -508.0 0.0) (float-vector -121.144 -508.0 682.0)))
         (instance face :init :vertices (list (float-vector -135.0 -516.0 682.0) (float-vector -135.0 -516.0 0.0) (float-vector -127.0 -513.856 0.0) (float-vector -127.0 -513.856 682.0)))
         (instance face :init :vertices (list (float-vector -143.0 -513.856 682.0) (float-vector -143.0 -513.856 0.0) (float-vector -135.0 -516.0 0.0) (float-vector -135.0 -516.0 682.0)))
         (instance face :init :vertices (list (float-vector -148.856 -508.0 682.0) (float-vector -148.856 -508.0 0.0) (float-vector -143.0 -513.856 0.0) (float-vector -143.0 -513.856 682.0)))
         (instance face :init :vertices (list (float-vector -151.0 -500.0 682.0) (float-vector -151.0 -500.0 0.0) (float-vector -148.856 -508.0 0.0) (float-vector -148.856 -508.0 682.0)))
         (instance face :init :vertices (list (float-vector -148.856 -492.0 682.0) (float-vector -148.856 -492.0 0.0) (float-vector -151.0 -500.0 0.0) (float-vector -151.0 -500.0 682.0)))
         (instance face :init :vertices (list (float-vector -143.0 -486.144 682.0) (float-vector -143.0 -486.144 0.0) (float-vector -148.856 -492.0 0.0) (float-vector -148.856 -492.0 682.0)))
         (instance face :init :vertices (list (float-vector -135.0 -484.0 682.0) (float-vector -135.0 -484.0 0.0) (float-vector -143.0 -486.144 0.0) (float-vector -143.0 -486.144 682.0)))
         (instance face :init :vertices (list (float-vector -127.0 -486.144 682.0) (float-vector -127.0 -486.144 0.0) (float-vector -135.0 -484.0 0.0) (float-vector -135.0 -484.0 682.0)))
         (instance face :init :vertices (list (float-vector -121.144 -492.0 682.0) (float-vector -121.144 -492.0 0.0) (float-vector -127.0 -486.144 0.0) (float-vector -127.0 -486.144 682.0)))
         (instance face :init :vertices (list (float-vector -119.0 -500.0 682.0) (float-vector -119.0 -500.0 0.0) (float-vector -121.144 -492.0 0.0) (float-vector -121.144 -492.0 682.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 513.856 -508.0 682.0) (float-vector 516.0 -500.0 682.0) (float-vector 513.856 -492.0 682.0) (float-vector 508.0 -486.144 682.0) (float-vector 500.0 -484.0 682.0) (float-vector 492.0 -486.144 682.0) (float-vector 486.144 -492.0 682.0) (float-vector 484.0 -500.0 682.0) (float-vector 486.144 -508.0 682.0) (float-vector 492.0 -513.856 682.0) (float-vector 500.0 -516.0 682.0) (float-vector 508.0 -513.856 682.0)))
         (instance face :init :vertices (list (float-vector 516.0 -500.0 0.0) (float-vector 513.856 -508.0 0.0) (float-vector 508.0 -513.856 0.0) (float-vector 500.0 -516.0 0.0) (float-vector 492.0 -513.856 0.0) (float-vector 486.144 -508.0 0.0) (float-vector 484.0 -500.0 0.0) (float-vector 486.144 -492.0 0.0) (float-vector 492.0 -486.144 0.0) (float-vector 500.0 -484.0 0.0) (float-vector 508.0 -486.144 0.0) (float-vector 513.856 -492.0 0.0)))
         (instance face :init :vertices (list (float-vector 513.856 -508.0 682.0) (float-vector 513.856 -508.0 0.0) (float-vector 516.0 -500.0 0.0) (float-vector 516.0 -500.0 682.0)))
         (instance face :init :vertices (list (float-vector 508.0 -513.856 682.0) (float-vector 508.0 -513.856 0.0) (float-vector 513.856 -508.0 0.0) (float-vector 513.856 -508.0 682.0)))
         (instance face :init :vertices (list (float-vector 500.0 -516.0 682.0) (float-vector 500.0 -516.0 0.0) (float-vector 508.0 -513.856 0.0) (float-vector 508.0 -513.856 682.0)))
         (instance face :init :vertices (list (float-vector 492.0 -513.856 682.0) (float-vector 492.0 -513.856 0.0) (float-vector 500.0 -516.0 0.0) (float-vector 500.0 -516.0 682.0)))
         (instance face :init :vertices (list (float-vector 486.144 -508.0 682.0) (float-vector 486.144 -508.0 0.0) (float-vector 492.0 -513.856 0.0) (float-vector 492.0 -513.856 682.0)))
         (instance face :init :vertices (list (float-vector 484.0 -500.0 682.0) (float-vector 484.0 -500.0 0.0) (float-vector 486.144 -508.0 0.0) (float-vector 486.144 -508.0 682.0)))
         (instance face :init :vertices (list (float-vector 486.144 -492.0 682.0) (float-vector 486.144 -492.0 0.0) (float-vector 484.0 -500.0 0.0) (float-vector 484.0 -500.0 682.0)))
         (instance face :init :vertices (list (float-vector 492.0 -486.144 682.0) (float-vector 492.0 -486.144 0.0) (float-vector 486.144 -492.0 0.0) (float-vector 486.144 -492.0 682.0)))
         (instance face :init :vertices (list (float-vector 500.0 -484.0 682.0) (float-vector 500.0 -484.0 0.0) (float-vector 492.0 -486.144 0.0) (float-vector 492.0 -486.144 682.0)))
         (instance face :init :vertices (list (float-vector 508.0 -486.144 682.0) (float-vector 508.0 -486.144 0.0) (float-vector 500.0 -484.0 0.0) (float-vector 500.0 -484.0 682.0)))
         (instance face :init :vertices (list (float-vector 513.856 -492.0 682.0) (float-vector 513.856 -492.0 0.0) (float-vector 508.0 -486.144 0.0) (float-vector 508.0 -486.144 682.0)))
         (instance face :init :vertices (list (float-vector 516.0 -500.0 682.0) (float-vector 516.0 -500.0 0.0) (float-vector 513.856 -492.0 0.0) (float-vector 513.856 -492.0 682.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 513.856 492.0 682.0) (float-vector 516.0 500.0 682.0) (float-vector 513.856 508.0 682.0) (float-vector 508.0 513.856 682.0) (float-vector 500.0 516.0 682.0) (float-vector 492.0 513.856 682.0) (float-vector 486.144 508.0 682.0) (float-vector 484.0 500.0 682.0) (float-vector 486.144 492.0 682.0) (float-vector 492.0 486.144 682.0) (float-vector 500.0 484.0 682.0) (float-vector 508.0 486.144 682.0)))
         (instance face :init :vertices (list (float-vector 516.0 500.0 0.0) (float-vector 513.856 492.0 0.0) (float-vector 508.0 486.144 0.0) (float-vector 500.0 484.0 0.0) (float-vector 492.0 486.144 0.0) (float-vector 486.144 492.0 0.0) (float-vector 484.0 500.0 0.0) (float-vector 486.144 508.0 0.0) (float-vector 492.0 513.856 0.0) (float-vector 500.0 516.0 0.0) (float-vector 508.0 513.856 0.0) (float-vector 513.856 508.0 0.0)))
         (instance face :init :vertices (list (float-vector 513.856 492.0 682.0) (float-vector 513.856 492.0 0.0) (float-vector 516.0 500.0 0.0) (float-vector 516.0 500.0 682.0)))
         (instance face :init :vertices (list (float-vector 508.0 486.144 682.0) (float-vector 508.0 486.144 0.0) (float-vector 513.856 492.0 0.0) (float-vector 513.856 492.0 682.0)))
         (instance face :init :vertices (list (float-vector 500.0 484.0 682.0) (float-vector 500.0 484.0 0.0) (float-vector 508.0 486.144 0.0) (float-vector 508.0 486.144 682.0)))
         (instance face :init :vertices (list (float-vector 492.0 486.144 682.0) (float-vector 492.0 486.144 0.0) (float-vector 500.0 484.0 0.0) (float-vector 500.0 484.0 682.0)))
         (instance face :init :vertices (list (float-vector 486.144 492.0 682.0) (float-vector 486.144 492.0 0.0) (float-vector 492.0 486.144 0.0) (float-vector 492.0 486.144 682.0)))
         (instance face :init :vertices (list (float-vector 484.0 500.0 682.0) (float-vector 484.0 500.0 0.0) (float-vector 486.144 492.0 0.0) (float-vector 486.144 492.0 682.0)))
         (instance face :init :vertices (list (float-vector 486.144 508.0 682.0) (float-vector 486.144 508.0 0.0) (float-vector 484.0 500.0 0.0) (float-vector 484.0 500.0 682.0)))
         (instance face :init :vertices (list (float-vector 492.0 513.856 682.0) (float-vector 492.0 513.856 0.0) (float-vector 486.144 508.0 0.0) (float-vector 486.144 508.0 682.0)))
         (instance face :init :vertices (list (float-vector 500.0 516.0 682.0) (float-vector 500.0 516.0 0.0) (float-vector 492.0 513.856 0.0) (float-vector 492.0 513.856 682.0)))
         (instance face :init :vertices (list (float-vector 508.0 513.856 682.0) (float-vector 508.0 513.856 0.0) (float-vector 500.0 516.0 0.0) (float-vector 500.0 516.0 682.0)))
         (instance face :init :vertices (list (float-vector 513.856 508.0 682.0) (float-vector 513.856 508.0 0.0) (float-vector 508.0 513.856 0.0) (float-vector 508.0 513.856 682.0)))
         (instance face :init :vertices (list (float-vector 516.0 500.0 682.0) (float-vector 516.0 500.0 0.0) (float-vector 513.856 508.0 0.0) (float-vector 513.856 508.0 682.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -486.144 492.0 682.0) (float-vector -484.0 500.0 682.0) (float-vector -486.144 508.0 682.0) (float-vector -492.0 513.856 682.0) (float-vector -500.0 516.0 682.0) (float-vector -508.0 513.856 682.0) (float-vector -513.856 508.0 682.0) (float-vector -516.0 500.0 682.0) (float-vector -513.856 492.0 682.0) (float-vector -508.0 486.144 682.0) (float-vector -500.0 484.0 682.0) (float-vector -492.0 486.144 682.0)))
         (instance face :init :vertices (list (float-vector -484.0 500.0 0.0) (float-vector -486.144 492.0 0.0) (float-vector -492.0 486.144 0.0) (float-vector -500.0 484.0 0.0) (float-vector -508.0 486.144 0.0) (float-vector -513.856 492.0 0.0) (float-vector -516.0 500.0 0.0) (float-vector -513.856 508.0 0.0) (float-vector -508.0 513.856 0.0) (float-vector -500.0 516.0 0.0) (float-vector -492.0 513.856 0.0) (float-vector -486.144 508.0 0.0)))
         (instance face :init :vertices (list (float-vector -486.144 492.0 682.0) (float-vector -486.144 492.0 0.0) (float-vector -484.0 500.0 0.0) (float-vector -484.0 500.0 682.0)))
         (instance face :init :vertices (list (float-vector -492.0 486.144 682.0) (float-vector -492.0 486.144 0.0) (float-vector -486.144 492.0 0.0) (float-vector -486.144 492.0 682.0)))
         (instance face :init :vertices (list (float-vector -500.0 484.0 682.0) (float-vector -500.0 484.0 0.0) (float-vector -492.0 486.144 0.0) (float-vector -492.0 486.144 682.0)))
         (instance face :init :vertices (list (float-vector -508.0 486.144 682.0) (float-vector -508.0 486.144 0.0) (float-vector -500.0 484.0 0.0) (float-vector -500.0 484.0 682.0)))
         (instance face :init :vertices (list (float-vector -513.856 492.0 682.0) (float-vector -513.856 492.0 0.0) (float-vector -508.0 486.144 0.0) (float-vector -508.0 486.144 682.0)))
         (instance face :init :vertices (list (float-vector -516.0 500.0 682.0) (float-vector -516.0 500.0 0.0) (float-vector -513.856 492.0 0.0) (float-vector -513.856 492.0 682.0)))
         (instance face :init :vertices (list (float-vector -513.856 508.0 682.0) (float-vector -513.856 508.0 0.0) (float-vector -516.0 500.0 0.0) (float-vector -516.0 500.0 682.0)))
         (instance face :init :vertices (list (float-vector -508.0 513.856 682.0) (float-vector -508.0 513.856 0.0) (float-vector -513.856 508.0 0.0) (float-vector -513.856 508.0 682.0)))
         (instance face :init :vertices (list (float-vector -500.0 516.0 682.0) (float-vector -500.0 516.0 0.0) (float-vector -508.0 513.856 0.0) (float-vector -508.0 513.856 682.0)))
         (instance face :init :vertices (list (float-vector -492.0 513.856 682.0) (float-vector -492.0 513.856 0.0) (float-vector -500.0 516.0 0.0) (float-vector -500.0 516.0 682.0)))
         (instance face :init :vertices (list (float-vector -486.144 508.0 682.0) (float-vector -486.144 508.0 0.0) (float-vector -492.0 513.856 0.0) (float-vector -492.0 513.856 682.0)))
         (instance face :init :vertices (list (float-vector -484.0 500.0 682.0) (float-vector -484.0 500.0 0.0) (float-vector -486.144 508.0 0.0) (float-vector -486.144 508.0 682.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -486.144 -143.0 682.0) (float-vector -484.0 -135.0 682.0) (float-vector -486.144 -127.0 682.0) (float-vector -492.0 -121.144 682.0) (float-vector -500.0 -119.0 682.0) (float-vector -508.0 -121.144 682.0) (float-vector -513.856 -127.0 682.0) (float-vector -516.0 -135.0 682.0) (float-vector -513.856 -143.0 682.0) (float-vector -508.0 -148.856 682.0) (float-vector -500.0 -151.0 682.0) (float-vector -492.0 -148.856 682.0)))
         (instance face :init :vertices (list (float-vector -484.0 -135.0 0.0) (float-vector -486.144 -143.0 0.0) (float-vector -492.0 -148.856 0.0) (float-vector -500.0 -151.0 0.0) (float-vector -508.0 -148.856 0.0) (float-vector -513.856 -143.0 0.0) (float-vector -516.0 -135.0 0.0) (float-vector -513.856 -127.0 0.0) (float-vector -508.0 -121.144 0.0) (float-vector -500.0 -119.0 0.0) (float-vector -492.0 -121.144 0.0) (float-vector -486.144 -127.0 0.0)))
         (instance face :init :vertices (list (float-vector -486.144 -143.0 682.0) (float-vector -486.144 -143.0 0.0) (float-vector -484.0 -135.0 0.0) (float-vector -484.0 -135.0 682.0)))
         (instance face :init :vertices (list (float-vector -492.0 -148.856 682.0) (float-vector -492.0 -148.856 0.0) (float-vector -486.144 -143.0 0.0) (float-vector -486.144 -143.0 682.0)))
         (instance face :init :vertices (list (float-vector -500.0 -151.0 682.0) (float-vector -500.0 -151.0 0.0) (float-vector -492.0 -148.856 0.0) (float-vector -492.0 -148.856 682.0)))
         (instance face :init :vertices (list (float-vector -508.0 -148.856 682.0) (float-vector -508.0 -148.856 0.0) (float-vector -500.0 -151.0 0.0) (float-vector -500.0 -151.0 682.0)))
         (instance face :init :vertices (list (float-vector -513.856 -143.0 682.0) (float-vector -513.856 -143.0 0.0) (float-vector -508.0 -148.856 0.0) (float-vector -508.0 -148.856 682.0)))
         (instance face :init :vertices (list (float-vector -516.0 -135.0 682.0) (float-vector -516.0 -135.0 0.0) (float-vector -513.856 -143.0 0.0) (float-vector -513.856 -143.0 682.0)))
         (instance face :init :vertices (list (float-vector -513.856 -127.0 682.0) (float-vector -513.856 -127.0 0.0) (float-vector -516.0 -135.0 0.0) (float-vector -516.0 -135.0 682.0)))
         (instance face :init :vertices (list (float-vector -508.0 -121.144 682.0) (float-vector -508.0 -121.144 0.0) (float-vector -513.856 -127.0 0.0) (float-vector -513.856 -127.0 682.0)))
         (instance face :init :vertices (list (float-vector -500.0 -119.0 682.0) (float-vector -500.0 -119.0 0.0) (float-vector -508.0 -121.144 0.0) (float-vector -508.0 -121.144 682.0)))
         (instance face :init :vertices (list (float-vector -492.0 -121.144 682.0) (float-vector -492.0 -121.144 0.0) (float-vector -500.0 -119.0 0.0) (float-vector -500.0 -119.0 682.0)))
         (instance face :init :vertices (list (float-vector -486.144 -127.0 682.0) (float-vector -486.144 -127.0 0.0) (float-vector -492.0 -121.144 0.0) (float-vector -492.0 -121.144 682.0)))
         (instance face :init :vertices (list (float-vector -484.0 -135.0 682.0) (float-vector -484.0 -135.0 0.0) (float-vector -486.144 -127.0 0.0) (float-vector -486.144 -127.0 682.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :white)
     (send (elt bc 1) :set-color :gray70)
     (send (elt bc 2) :set-color :gray70)
     (send (elt bc 3) :set-color :gray70)
     (send (elt bc 4) :set-color :gray70)
     (send (elt bc 5) :set-color :gray70)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :askul-corner-desk-bodyset2 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint


     ;; init-ending 
     (setq links (list blink0))
     (setq joint-list (list))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:handle (&rest args) (forward-message-to-all (list ) args))
  (:attention (&rest args) (forward-message-to-all (list ) args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun askul-corner-desk (&rest args) (instance* askul-corner-desk-object :init args))
;; (format *error-output* "(instance askul-corner-desk-object :init) for generating model~%")
